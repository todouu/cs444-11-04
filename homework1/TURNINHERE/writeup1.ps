%!PS-Adobe-2.0
%%Creator: dvips(k) 5.996 Copyright 2016 Radical Eye Software
%%Title: writeup1.dvi
%%CreationDate: Thu May  4 14:49:55 2017
%%Pages: 6
%%PageOrder: Ascend
%%BoundingBox: 0 0 612 792
%%DocumentFonts: URWPalladioL-Roma NimbusSanL-Bold NimbusSanL-Regu
%%+ NimbusSanL-ReguItal URWPalladioL-Ital URWPalladioL-Bold
%%DocumentPaperSizes: Letter
%%EndComments
%DVIPSWebPage: (www.radicaleye.com)
%DVIPSCommandLine:
%+ /usr/local/apps/tex_live/current/bin/x86_64-linux//dvips -R -Poutline
%+ writeup1.dvi -o writeup1.ps
%DVIPSParameters: dpi=600
%DVIPSSource:  TeX output 2017.05.04:1449
%%BeginProcSet: tex.pro 0 0
%!
/TeXDict 300 dict def TeXDict begin/N{def}def/B{bind def}N/S{exch}N/X{S
N}B/A{dup}B/TR{translate}N/isls false N/vsize 11 72 mul N/hsize 8.5 72
mul N/landplus90{false}def/@rigin{isls{[0 landplus90{1 -1}{-1 1}ifelse 0
0 0]concat}if 72 Resolution div 72 VResolution div neg scale isls{
landplus90{VResolution 72 div vsize mul 0 exch}{Resolution -72 div hsize
mul 0}ifelse TR}if Resolution VResolution vsize -72 div 1 add mul TR[
matrix currentmatrix{A A round sub abs 0.00001 lt{round}if}forall round
exch round exch]setmatrix}N/@landscape{/isls true N}B/@manualfeed{
statusdict/manualfeed true put}B/@copies{/#copies X}B/FMat[1 0 0 -1 0 0]
N/FBB[0 0 0 0]N/nn 0 N/IEn 0 N/ctr 0 N/df-tail{/nn 8 dict N nn begin
/FontType 3 N/FontMatrix fntrx N/FontBBox FBB N string/base X array
/BitMaps X/BuildChar{CharBuilder}N/Encoding IEn N end A{/foo setfont}2
array copy cvx N load 0 nn put/ctr 0 N[}B/sf 0 N/df{/sf 1 N/fntrx FMat N
df-tail}B/dfs{div/sf X/fntrx[sf 0 0 sf neg 0 0]N df-tail}B/E{pop nn A
definefont setfont}B/Cw{Cd A length 5 sub get}B/Ch{Cd A length 4 sub get
}B/Cx{128 Cd A length 3 sub get sub}B/Cy{Cd A length 2 sub get 127 sub}
B/Cdx{Cd A length 1 sub get}B/Ci{Cd A type/stringtype ne{ctr get/ctr ctr
1 add N}if}B/CharBuilder{save 3 1 roll S A/base get 2 index get S
/BitMaps get S get/Cd X pop/ctr 0 N Cdx 0 Cx Cy Ch sub Cx Cw add Cy
setcachedevice Cw Ch true[1 0 0 -1 -.1 Cx sub Cy .1 sub]{Ci}imagemask
restore}B/D{/cc X A type/stringtype ne{]}if nn/base get cc ctr put nn
/BitMaps get S ctr S sf 1 ne{A A length 1 sub A 2 index S get sf div put
}if put/ctr ctr 1 add N}B/I{cc 1 add D}B/bop{userdict/bop-hook known{
bop-hook}if/SI save N @rigin 0 0 moveto/V matrix currentmatrix A 1 get A
mul exch 0 get A mul add .99 lt{/QV}{/RV}ifelse load def pop pop}N/eop{
SI restore userdict/eop-hook known{eop-hook}if showpage}N/@start{
userdict/start-hook known{start-hook}if pop/VResolution X/Resolution X
1000 div/DVImag X/IEn 256 array N 2 string 0 1 255{IEn S A 360 add 36 4
index cvrs cvn put}for pop 65781.76 div/vsize X 65781.76 div/hsize X}N
/dir 0 def/dyy{/dir 0 def}B/dyt{/dir 1 def}B/dty{/dir 2 def}B/dtt{/dir 3
def}B/p{dir 2 eq{-90 rotate show 90 rotate}{dir 3 eq{-90 rotate show 90
rotate}{show}ifelse}ifelse}N/RMat[1 0 0 -1 0 0]N/BDot 260 string N/Rx 0
N/Ry 0 N/V{}B/RV/v{/Ry X/Rx X V}B statusdict begin/product where{pop
false[(Display)(NeXT)(LaserWriter 16/600)]{A length product length le{A
length product exch 0 exch getinterval eq{pop true exit}if}{pop}ifelse}
forall}{false}ifelse end{{gsave TR -.1 .1 TR 1 1 scale Rx Ry false RMat{
BDot}imagemask grestore}}{{gsave TR -.1 .1 TR Rx Ry scale 1 1 false RMat
{BDot}imagemask grestore}}ifelse B/QV{gsave newpath transform round exch
round exch itransform moveto Rx 0 rlineto 0 Ry neg rlineto Rx neg 0
rlineto fill grestore}B/a{moveto}B/delta 0 N/tail{A/delta X 0 rmoveto}B
/M{S p delta add tail}B/b{S p tail}B/c{-4 M}B/d{-3 M}B/e{-2 M}B/f{-1 M}
B/g{0 M}B/h{1 M}B/i{2 M}B/j{3 M}B/k{4 M}B/w{0 rmoveto}B/l{p -4 w}B/m{p
-3 w}B/n{p -2 w}B/o{p -1 w}B/q{p 1 w}B/r{p 2 w}B/s{p 3 w}B/t{p 4 w}B/x{
0 S rmoveto}B/y{3 2 roll p a}B/bos{/SS save N}B/eos{SS restore}B end

%%EndProcSet
%%BeginProcSet: pstricks.pro 0 0
% $Id: pstricks.pro 919 2014-05-19 18:42:47Z herbert $
%
%% PostScript prologue for pstricks.tex.
%% Version 1.24, 2016/04/22
%%
%% This program can be redistributed and/or modified under the terms
%% of the LaTeX Project Public License Distributed from CTAN archives
%% in directory macros/latex/base/lppl.txt.
%
%
% Define the follwing gs-functions if not known, eg when using distiller
%
systemdict /.setopacityalpha known not {/.setopacityalpha { pop } def } if
systemdict /.setblendmode known not {/.setblendmode { pop } def } if
systemdict /.setshapealpha known not {/.setshapealpha { pop } def } if
%
/tx@Dict 200 dict def 				% the main PSTricks dictionary
tx@Dict begin
/ADict 25 dict def				% The arrow dictionary
/CM { matrix currentmatrix } bind def
/SLW /setlinewidth load def
/CLW /currentlinewidth load def
/CP /currentpoint load def
/ED { exch def } bind def
/L /lineto load def
/T /translate load def
/TMatrix { } def
/RAngle { 0 } def
/Sqrt { dup 0 lt { pop 0 } { sqrt } ifelse } def  % return 0 for negative arguments 
/Atan { /atan load stopped { pop pop 0 } if } def % return 0 if atan not known
/ATAN1 {neg -1 atan 180 sub } def		% atan(x) (only one parameter)
/Div { dup 0 eq { pop } { div } ifelse } def  	% control the division
/Log { dup 1e-20 lt { pop -1e30 }{ log } ifelse } def % control the log
/tan { dup cos abs 1.e-10 lt 
  { pop 1.e10 } 				% return 1.e10 as infinit
  { dup sin exch cos div } ifelse 		% default sin/cos
} def
/Tan { dup sin exch cos Div } def 		% sin(x)/cos(x) x in degrees
/Acos {dup dup mul neg 1 add dup 0 lt {		% arc cos, returns 0 when negative root
  pop pop 0 }{ sqrt exch atan} ifelse } def
/Acos2 { 2 dict begin 
  /x ED /y ED
  y abs 1.0e-20 lt { 1.0e30 } if
  x y div 
  dup dup mul neg 1 add dup 0 lt {		% arc cos needs two values x,y
  pop pop 0 }{ sqrt exch atan} ifelse 
  y 0 lt { 180 add } if
} def
/NET { neg exch neg exch T } def	      	% change coordinate system to the negative one		
/Pyth { dup mul exch dup mul add sqrt } def   	% Pythagoras, expects 2 parameter
/Pyth2 {					% Pythagoras, xA yA xB yB
  3 -1 roll 		% xA xB yB yA
  sub			% xA xB yB-yA
  3 1 roll 		% yB-yA xA xB
  sub			% yB-yA xA-xB
  Pyth } def
/PtoC { 2 copy cos mul 3 1 roll sin mul } def % Polar to Cartesian
/PtoCab { dup cos 4 -1 roll mul 3 1 roll sin mul } def % Polar to Cartesian (Ellipse) a b phi-> x y 
%/Rand { rand 4294967295 div } def		% a real random number
/Rand { rand 2147483447 div } def		% a real random number between 0 and 1
%----------------- hv added 20050516 ---------------
/PiDiv2 1.57079632680 def
/Pi 3.14159265359 def 
/TwoPi 6.28318530718 def
/Euler 2.71828182846 def 
%/e Euler bind def
%
/RadtoDeg { 180 mul Pi div } bind def 		% convert from radian to degrees
/DegtoRad { Pi mul 180 div } bind def 		% viceversa
%
/startGlobal { true setglobal globaldict begin } bind def
/endGlobal { end false setglobal } bind def
/pssetRGBcolor /setrgbcolor load def
/pssetCMYKcolor /setcmykcolor load def
/pssetGraycolor /setgray load def
%
%----------------- hv end---------------------------
/PathLength@ { /z z y y1 sub x x1 sub Pyth add def /y1 y def /x1 x def } def
%
/PathLength { 
  flattenpath /z 0 def 
  { /y1 ED /x1 ED /y2 y1 def /x2 x1 def }
  { /y ED /x ED PathLength@ } 
  {} 
  { /y y2 def /x x2 def PathLength@ }
  /pathforall load stopped { pop pop pop pop } if 
  z 
} def
%
/STP { .996264 dup scale } def			% BP/PT scaling
/STV { SDict begin normalscale end STP  } def	% 
%
/DashLine {
    dup 0 gt
    { /a .5 def PathLength exch div }
    { pop /a 1 def PathLength } ifelse
    /b ED % pattern should fit evenly in b
    dup /X ED % pattern array
    0 get /y ED % length of first black segment
    /z 0 X {add} forall def % length of the full pattern
    %% Computation of the scaling factor as described by van Zandt:
    b a .5 sub 2 mul y mul sub z Div round
    z mul a .5 sub 2 mul y mul add b exch Div
    %%%% scaling factor on stack.
    /z ED %% now, z is the scaling factor
    false % for the length test below
    X { z mul } forall X astore %% modification TN 04-08-07
    %%% Checking whether at least one dash in X has positive length:
    {0 gt or} forall
    { X 1 a sub y mul }
    { [ 1 0 ] 0 }
    ifelse
    setdash stroke
} def
%
/DotLine { 
  /b PathLength def 
  /a ED /z ED /y CLW def 
  /z y z add def 
  a 0 gt { 
    /b b a div def 
  }{ 
    a 0 eq { 
      /b b y sub def 
    }{ a -3 eq { 
      /b b y add def } if 
    } ifelse 
  } ifelse 
  [ 0 b b z Div round Div dup 0 le { pop 1 } if ] 
  a 0 gt { 0 }{ y 2 div a -2 gt { neg }if } ifelse 
  setdash 1 setlinecap stroke 
} def
%
/SymbolLine {   % on stack [ x y x y ...
  counttomark 					% number of elements
  2 div cvi /n ED     				% n pairs
  /YA ED /XA ED					% the start point
  n 1 sub { 
    /YB ED /XB ED
    /XLength XB XA sub def
    /YLength YB YA sub def
    /PAngle YLength XLength Atan def
    /XYLength XLength YLength Pyth def
    %% for negative SymStep we calculate the distance 
    SymStep 0 lt 
      { %XYLength SymStep div abs cvi 
        /nSym SymStep abs cvi def } 
      { /nSym XYLength SymStep div cvi def }
    ifelse
    0.5 setflat
    /Shift Symbol stringwidth pop 2 div def 
    /deltaX XLength nSym div def
    /deltaY YLength nSym div def
    curveticks 
      { XA YA moveto }
      { XA Shift sub YA Shift sub moveto }
    ifelse 
    nSym { 
      gsave 
      curveticks 
        { PAngle 180 sub CorrAngle sub tickAngle add /rotAngle ED  
          currentpoint translate rotAngle rotate 
          0 SymbolWidth 2 div moveto 0 SymbolWidth 2 div neg lineto 
          SymbolLinewidth setlinewidth stroke
        }
        { 
          rotateSymbol { PAngle 180 sub CorrAngle sub rotate } if
          Symbol show 
        }
      ifelse 
      grestore 
      deltaX deltaY rmoveto
    } repeat
    /YA YB def /XA XB def
  } repeat 
  curveticks 
    { XA YA moveto }
    { XA Shift sub YA Shift sub moveto }
  ifelse 
  gsave 
  curveticks 
    { PAngle 180 sub CorrAngle sub tickAngle add /rotAngle ED  
      XA YA translate rotAngle rotate 
      0 SymbolWidth 2 div moveto 0 SymbolWidth 2 div neg lineto 
      SymbolLinewidth setlinewidth stroke
    }
    { 
      rotateSymbol { PAngle 180 sub CorrAngle sub rotate } if
      Symbol show 
    }
  ifelse 
  grestore
  pop 				% delete the mark symbol
} def
%
/LineFill { % hv ------------ patch 7 -------------
  gsave 
  abs /hatchWidthInc ED
  abs /hatchSepInc ED
  abs CLW add /a ED 
  a 0 dtransform round exch round exch
  2 copy idtransform 
  exch Atan rotate 
  idtransform pop /a ED 
  .25 .25 itransform pathbbox 
  /y2 ED 
  a Div ceiling cvi /x2 ED /y1 ED 
  a Div cvi /x1 ED /y2 y2 y1 sub def 
  clipType   % must be defined in pstricks.tex: clip -- eoclip 
  newpath 
  2 setlinecap 
  systemdict
  /setstrokeadjust known { true setstrokeadjust } if 
  x2 x1 sub 1 add { 
    x1 a mul y1 moveto 0 y2 rlineto stroke 
    /x1 x1 1 add 
      hatchWidthInc 0 gt { CLW add } if 
    def 
    hatchSepInc 0 gt hatchWidthInc 0 gt or { 
      /a a hatchSepInc add def
      CLW hatchWidthInc add SLW 
    } if
  } repeat 
  grestore 
  pop pop } def
%
/DotFill {%	 on stack: dot radius
  /dotRadius ED
  abs CLW add /a ED 
  a 0 dtransform round exch round exch
  2 copy idtransform 
  exch Atan rotate 
  idtransform pop /a ED 
  .25 .25 itransform 
  pathbbox % llx lly urx ury of smallest bounding box
  /y2 ED /x2 ED /y1 ED /x1 ED 
  y2 y1 sub a div 2 add cvi /Ny ED
  x2 x1 sub a div 2 add cvi /Nx ED
  clipType   % must be defined in pstricks.tex: clip -- eoclip 
  newpath 
  /yA y1 dotRadius add CLW add def
  /xA0 x1 dotRadius add CLW add def
  Ny {
     /xA xA0 def
     Nx { 
       newpath 
       xA yA dotRadius 0 360 arc 
       SolidDot { gsave fill grestore } if 
       stroke
       xA a add /xA ED
     } repeat
     yA a add /yA ED
  } repeat
  grestore
} def
%
/PenroseFill {%	 on stack: scaling factor
  /Scale ED
%  1 exch div round /penroseFactor ED 
%  a 0 dtransform round exch round exch
%  2 copy idtransform 
%  exch Atan rotate 
%  idtransform pop /a ED 
%  .25 .25 itransform pathbbox 
%  /y2 ED 
%  a Div ceiling cvi /x2 ED /y1 ED 
%  a Div cvi /x1 ED /y2 y2 y1 sub def 
  clip 
  newpath 
gsave
  220 150 translate
  Scale dup scale
  systemdict /setstrokeadjust known { true setstrokeadjust } if 
  /I/S/L/W/G/+/Z/F/E/D[/def/exch/for{E D}/add{s E get mul}
 { Z -36.2001 1 33 }{25 E S rlineto}{/q Z dup q G E q 1 + G}{Z 2 2}]{cvx def}forall
  [0 72 1008 {dup sin E cos }F ]1 setlinejoin/s W{/a W{/b I 10{/i I 4{/m I moveto
  i m +/j I 10{/l Z b m l + G a l G sub s m get div .2 + floor .3 + 25
  mul j l + S rmoveto}F i L j L stroke }F}F}F}F 
  grestore 
%  pop pop 
} def
%
/PenroseFillA {%  on stack: scaling factor, border color, kite color, dart color
  /Scale ED
  Scale dup scale
  /border_colour ED 
  /kite_colour ED 
  /dart_colour ED
  clip 
  newpath 
  gsave
  100 100 translate
  6 
  Scale 1 lt { 1 Scale dup add div mul cvi } if %%%%   Number of iterations
  10					%%%%   Long side length in millimeters
  /border_width { L 0.06 mul }def		%%%%   Choose the scalefactor for the borders
  /L exch 25.4 div 72 mul def		%%%%   Conversion: mm -> inches -> points
  /f{-1 5 sqrt add 2 div}bind def		%%%%   The reciprocal of the golden ratio
  /l{L f mul}bind def			%%%%   Short side length l = L*f
  /Ll{L l add}bind def			%%%%   Ll =  L + l
  /c{36 cos L mul}bind def		%%%%   c  =  L*cos(36)
  /s{36 sin L mul}bind def		%%%%   s  =  L*sin(36)
  /draw_tile { 0 0 moveto c s lineto 0 lineto gsave closepath gsave fill grestore
	     0 setlinewidth stroke grestore border_colour stroke } bind def
  /half_kite { dup dup 0 gt{ 1 sub gsave f f neg scale -36 rotate half_dart
			   Ll 0 translate 144 rotate kite grestore }
	      		 { kite_colour L draw_tile }ifelse
	     pop } bind def
  /half_dart { dup dup 0 gt{ 1 sub gsave f f scale half_kite
			   -144 rotate Ll neg 0 translate half_dart grestore }
	      		 { dart_colour l draw_tile }ifelse
  	     pop } bind def
  /kite{ gsave half_kite 1 -1 scale half_kite grestore }bind def
  border_width setlinewidth  1 setlinejoin  1 setlinecap
%  450 0 translate  
  dup f exch neg exp dup scale
  5 {kite 72 rotate } repeat stroke 
  grestore
} def
%
%
/TruchetFill { %	 on stack: scaling factor
  10 dict begin
  dup dup scale
  1 exch div round /penroseFactor ED 
  a 0 dtransform round exch round exch
  2 copy idtransform 
  exch Atan rotate 
  idtransform pop /a ED 
  .25 .25 itransform pathbbox 
  /y2 ED 
  a Div ceiling cvi /x2 ED /y1 ED 
  a Div cvi /x1 ED /y2 y2 y1 sub def 
  clip 
  newpath 
  systemdict
  /setstrokeadjust known { true setstrokeadjust } if 
  /ma a neg def
  /ha a 2 div def 
  /mha ha neg def
  /tile { 
    rand dup 2 idiv 2 mul eq { 90 rotate } if
    mha mha moveto ha mha lineto
    ha ha lineto mha ha lineto
%    closepath .1 setlinewidth stroke
    contents
  } def
  /contents{ 
    0 ha moveto ha 0 lineto
    0 mha moveto mha 0 lineto
%    1 setlinewidth stroke
  } def
  /dotiling {
    f ma mul a f a mul { 
      /i exch def
      f ma mul a f a mul { 
        /j exch def
        gsave i j translate
        tile stroke grestore
      } for
    } for
  } def
%
  /f 3 def 
  5 srand dotiling 
  end % local user dict
} def
%
/BeginArrow { 
  ADict begin 			% hold it local, for end see EndArrow
  /@mtrx CM def 
  gsave 
  2 copy T 
  2 index sub neg exch 
  3 index sub exch Atan 
  rotate newpath 
} def
%
/EndArrow { @mtrx setmatrix CP grestore end } def % end the ADict
%
/Arrow { 
  CLW mul add dup 
  2 div /w ED 
  mul dup /h ED 
  mul /a ED 
  { 0 h T 1 -1 scale } if 
  w neg h moveto 
  0 0 L w h L w neg a neg rlineto 
  gsave fill grestore 
} def
%
/ArrowD { % the sides are drawn as curves (hv 20071211)
  CLW mul add dup 
  2 div /w ED 
  mul dup /h ED 
  mul /Inset ED 
  { 0 h T 1 -1 scale } if % changes the direction
% we use y=w/h^2 * x^2 as equation for the control points
% for the coordinates the arrow is seen from top to bottom
% the bottom (tip) is (0;0)
  w neg h moveto % lower left of >
  w 9 div 4 mul neg h 3 div 2 mul
  w 9 div neg       h 3 div  
  0 0 curveto    % tip of >
  w 9 div        h 3 div  
  w 9 div 4 mul  h 3 div 2 mul
  w h curveto % upper left of >
  w neg Inset neg rlineto % move to x=0 and inset
  gsave fill grestore 
} def 
%
/Tbar { 
  CLW mul add /z ED 
  z -2 div CLW 2 div moveto 
  z 0 rlineto stroke 
  0 CLW moveto 
} def
%
/Bracket { 
  CLW mul add dup CLW sub 2 div 
  /x ED mul CLW add /y ED /z CLW 2 div def 
  x neg y moveto 
  x neg CLW 2 div L x CLW 2 div L x y L stroke 
  0 CLW moveto 
} def
%
/RoundBracket { 
  CLW mul add dup 2 div 
  /x ED mul /y ED /mtrx CM def 
  0 CLW 2 div T x y mul 0 ne { x y scale } if 
  1 1 moveto 
  .85 .5 .35 0 0 0 curveto 
  -.35 0 -.85 .5 -1 1 curveto 
  mtrx setmatrix stroke 0 CLW moveto 
} def
%
/SD { 0 360 arc fill } def
%
/EndDot { % DS is the dot size 
  { /z DS def } { /z 0 def } ifelse  	% outer or inner dimen 
  /b ED 				% the color definition
  0 z DS SD 
  b { 0 z DS CLW sub SD } if 
  0 DS z add CLW 4 div sub 
  moveto 
} def
%
/Shadow { [ { /moveto load } { /lineto load } { /curveto load } {
  /closepath load } /pathforall load stopped { pop pop pop pop CP /moveto
  load } if ] cvx newpath 3 1 roll T exec } def
%
/NArray { % holds the coordinates and on top of stack the showpoints boolean
  /showpoints ED 
  counttomark 2 div dup cvi /n ED  	% n 2 div on stack 
  n eq not { exch pop } if		% even numbers of points? delete one
  ] aload /Points ED 
  showpoints not { Points aload pop } if
%    { ] aload /Points ED } 
%    { n 2 mul 1 add -1 roll pop } ifelse	% delete the mark symbol 
} def
%
/Line { 
  NArray n 0 eq not 
    { n 1 eq { 0 0 /n 2 def } if ArrowA /n n 2 sub def 
      n { Lineto } repeat 
      CP 4 2 roll ArrowB L pop pop 
    } if 
} def
%
/LineToYAxis {
  /Ox ED		% Save the x origin value 
  NArray            % all x-y pairs on stack
  n { 2 copy moveto % go to current point
    Ox exch Lineto   % line to y-axis
    pop             % delete old x-value
  } repeat
} def
%
/LineToXAxis{
  /Oy ED		% Save the y origin value 
  NArray		% all x-y pairs on stack
  n 0 eq not
    { n 1 eq { 0 0 /n 2 def } if
      ArrowA
      /n n 2 sub def
      CP 2 copy moveto pop Oy Lineto
      n { 2 copy moveto pop Oy Lineto } repeat
      CP
      4 2 roll
      ArrowB
      2 copy moveto pop Oy
      L
      pop pop } if
} def
%
/Arcto { 
  /a [ 6 -2 roll ] cvx def 
  a r 
  /arcto load stopped { 5 } { 4 } ifelse { pop } repeat 
  a 
} def
%
/CheckClosed { 
  dup n 2 mul 1 sub index eq 2 index n 2 mul 1 add index eq
  and { pop pop /n n 1 sub def } if 
} def
%
/Polygon { 
  NArray n 2 eq { 0 0 /n 3 def } if 
  n 3 lt 
    { n { pop pop } repeat } 
    { n 3 gt { CheckClosed } if 
      n 2 mul -2 roll 
      /y0 ED /x0 ED /y1 ED /x1 ED  
      x1 y1 
      /x1 x0 x1 add 2 div def 
      /y1 y0 y1 add 2 div def 
      x1 y1 moveto 
      /n n 2 sub def 
      n { Lineto } repeat 
      x1 y1 x0 y0 6 4 roll Lineto
      Lineto pop pop closepath } ifelse 
} def
%
/SymbolPolygon {   % on stack [ x y x y ...
  counttomark 					% number of elements
  2 add /m ED
  2 copy m 2 roll				% copy last two
  m 2 div cvi /n ED    				% n pairs
  /YA ED /XA ED					% the start point
  n 1 sub { 
    /YB ED /XB ED
    /XLength XB XA sub def
    /YLength YB YA sub def
    /PAngle YLength XLength Atan def
    /XYLength XLength YLength Pyth def
    /nSym XYLength SymStep Div cvi def
    /Shift Symbol stringwidth pop 2 Div def 
    /deltaX XLength nSym Div def
    /deltaY YLength nSym Div def
    XA Shift sub YA Shift sub moveto 
    nSym { 
      gsave rotateSymbol { PAngle 180 sub CorrAngle sub rotate } if
      Symbol show 
      grestore 
      deltaX deltaY rmoveto
    } repeat
%    XB Shift sub YB Shift sub moveto Symbol show
    /YA YB def /XA XB def
  } repeat 
  pop	% delete the mark symbol
} def
%
/Diamond { 
  /mtrx CM def 
  T rotate 
  /h ED 
  /w ED 
  dup 0 eq { pop } { CLW mul neg 
    /d ED 
    /a w h Atan def 
    /h d a sin Div h add def 
    /w d a cos Div w add def } ifelse 
  mark w 2 div h 2 div w 0 0 h neg w neg 0 0 h w 2 div h 2 div 
  /ArrowA { moveto } def 
  /ArrowB { } def 
  false Line 
  closepath mtrx setmatrix } def
%
/Triangle { 
  /mtrx CM def 
  translate 
  rotate /h ED 2 div /w ED 
  dup CLW mul /d ED 
  /h h d w h Atan sin Div sub def 
  /w w d h w Atan 2 div dup cos exch sin Div mul sub def 
  mark 
  0 d w neg d 0 h w d 0 d 
  /ArrowA { moveto } def 
  /ArrowB { } def 
  false 
  Line 
  closepath 
  mtrx
% DG/SR modification begin - Jun.  1, 1998 - Patch 3 (from Michael Vulis)
% setmatrix } def
  setmatrix pop 
} def
% DG/SR modification end
%
/CCA { 
  /y ED /x ED 
  2 copy y sub /dy1 ED 
  x sub /dx1 ED 
  /l1 dx1 dy1 Pyth def 
} def
%
/CC { 
  /l0 l1 def 
  /x1 x dx sub def 
  /y1 y dy sub def 
  /dx0 dx1 def 
  /dy0 dy1 def 
  CCA 
  /dx dx0 l1 c exp mul dx1 l0 c exp mul add def 
  /dy dy0 l1 c exp mul dy1 l0 c exp mul add def 
  /m dx0 dy0 Atan dx1 dy1 Atan sub 2 div cos abs b exp a mul dx dy Pyth Div 2 div def 
  /x2 x l0 dx mul m mul sub def
  /y2 y l0 dy mul m mul sub def 
  /dx l1 dx mul m mul neg def 
  /dy l1 dy mul m mul neg def 
} def
%
/IC { 
  /c c 1 add def 
  c 0 lt { /c 0 def } { c 3 gt { /c 3 def } if } ifelse 
  /a a 2 mul 3 div 45 cos b exp div def 
  CCA 
  /dx 0 def 
  /dy 0 def 
} def
%
/BOC { IC CC x2 y2 x1 y1 ArrowA CP 4 2 roll x y curveto } def
/NC { CC x1 y1 x2 y2 x y curveto } def
/EOC { x dx sub y dy sub 4 2 roll ArrowB 2 copy curveto } def
/BAC { IC CC x y moveto CC x1 y1 CP ArrowA } def
/NAC { x2 y2 x y curveto CC x1 y1 } def
/EAC { x2 y2 x y ArrowB curveto pop pop } def
%
/OpenCurve { 
  NArray n 3 lt 
    { n { pop pop } repeat } 
    { BOC /n n 3 sub def n { NC } repeat EOC } ifelse 
} def
%
/CurvePath { 
  %% for negative SymStep we calculate the distance 
  SymStep 0 lt { gsave PathLength SymStep div abs /SymStep ED grestore } if
  0.5 setflat
  flattenpath /z 0 def /z0 0 def
  { /y1 ED /x1 ED /y2 y1 def /x2 x1 def 
    x1 Shift sub y1 Shift sub moveto 
    gsave 
    curveticks 
      { x1 y1 translate startAngle rotate 
        0 SymbolWidth 2 div moveto 0 SymbolWidth 2 div neg lineto 
        SymbolLinewidth setlinewidth stroke      
      }
      { startAngle rotate Symbol show }
    ifelse 
    grestore /z0 z def }
  { /y ED /x ED PathLength@ z z0 sub SymStep ge {
      x Shift sub y Shift sub moveto 
      gsave 
      curveticks 
        { y yOld sub x xOld sub Atan 180 sub CorrAngle sub /rotAngle ED  
          x y translate rotAngle rotate 
          0 SymbolWidth 2 div moveto 0 SymbolWidth 2 div neg lineto 
          SymbolLinewidth setlinewidth stroke
        }
        { 
          rotateSymbol { y yOld sub x xOld sub Atan 180 sub CorrAngle sub rotate } if        
          Symbol show 
        }
      ifelse 
      grestore /z0 z def } if 
    /yOld y def /xOld x def } 
  {} %% the lineto part
  { /y y2 def /x x2 def PathLength@ 
    x Shift sub y Shift sub moveto 
    gsave
    curveticks 
      { y yOld sub x xOld sub Atan 180 sub /rotAngle ED  
        x y translate rotAngle rotate 
        0 SymbolWidth 2 div moveto 0 SymbolWidth 2 div neg lineto 
        SymbolLinewidth setlinewidth stroke
      }
      { 
        x Shift sub y Shift sub moveto 
        rotateSymbol { y yOld sub x xOld sub Atan 180 sub CorrAngle sub rotate } if        
        Symbol show 
      }
    ifelse 
    grestore
  }
  pathforall 
%  curveticks 
%   { gsave 
%     x y translate rotAngle rotate 
%     0 SymbolWidth 2 div moveto 0 SymbolWidth 2 div neg lineto 
%     SymbolLinewidth setlinewidth stroke grestore
%   } if
  z 
} def
%
/OpenSymbolCurve { 
  OpenCurve
  0.1 setflat
  /Shift Symbol stringwidth pop 2 div def 
  CurvePath 
} def
%
/AltCurve { 
  { false NArray n 2 mul 2 roll 
    [ n 2 mul 3 sub 1 roll ] aload
    /Points ED 
    n 2 mul -2 roll } 
  { false NArray } ifelse 
  n 4 lt { n { pop pop } repeat } { BAC /n n 4 sub def n { NAC } repeat EAC } ifelse 
} def
%
/AltOpenSymbolCurve { 
  AltCurve
  0.1 setflat
  /Shift Symbol stringwidth pop 2 div def 
  CurvePath 
} def
%
/ClosedCurve { 
  NArray n 3 lt 
    { n { pop pop } repeat } 
    { n 3 gt { CheckClosed } if 
      6 copy n 2 mul 6 add 6 roll 
      IC CC x y moveto n { NC } repeat 
      closepath pop pop 
    } ifelse 
} def
%
/ClosedSymbolCurve { 
  ClosedCurve
  0.1 setflat
  /Shift Symbol stringwidth pop 2 div def 
  CurvePath 
} def
%
/CalcBezierSpline {%  Christoph Bersch
  10 dict begin
  /getX { Points exch 2 mul get } def
  /getY { Points exch 2 mul 1 add get } def
  /n Points length 1 sub 2 idiv def
  /GetFirstControlPoints {
    /x n array def
    /tmp n array def
    /b 2 def
    x 0 rhs 0 get b div put
    1 1 n 1 sub {
      /i exch def
      tmp i 1 b div dup 4 1 roll put
      i n 1 sub lt { 4 }{ 3.5 } ifelse exch sub /b exch def
      x i rhs i get x i 1 sub get sub b div put
    } for
    1 1 n 1 sub {
      n exch sub
      dup dup x exch 1 sub 2 copy 6 2 roll
      get 3 1 roll tmp exch get
      exch x exch get mul sub
      put	
    } for
    x
  } def
  % 
  n 1 eq {
    0 getX 2 mul 1 getX add 3 div
    0 getY 2 mul 1 getY add 3 div
    exch dup 3 1 roll 2 mul 0 getX sub
    exch dup 3 1 roll 2 mul 0 getY sub
    [ 0 getX 0 getY 7 3 roll 1 getX 1 getY ] /outPoints exch def
  } {
    /outPoints 6 n mul 2 add array def
    0 1 n {
      dup dup 6 mul dup 1 add
      outPoints exch 5 -1 roll getY put
      outPoints exch 3 -1 roll getX put
    } for
    /rhs n array def
    1 1 n 2 sub {
      rhs exch dup dup getX 4 mul exch 1 add getX 2 mul add put
    } for
    rhs 0 0 getX 1 getX 2 mul add put
    rhs n 1 sub dup getX 8 mul n getX add 2 div put
    GetFirstControlPoints
    1 1 n 2 sub {
      rhs exch dup dup getY 4 mul exch 1 add getY 2 mul add put
    } for
    rhs 0 0 getY 1 getY 2 mul add put
    rhs n 1 sub dup getY 8 mul n getY add 2 div put
    GetFirstControlPoints
    0 1 n 1 sub {
      /i exch def
      2 copy
      i get outPoints 6 i mul 3 add 3 -1 roll put
      i get outPoints 6 i mul 2 add 3 -1 roll put
      2 copy
      i n 1 sub lt {
        i 1 add get i 1 add getY 2 mul exch sub outPoints 6 i mul 5 add 3 -1 roll put
        i 1 add get i 1 add getX 2 mul exch sub outPoints 6 i mul 4 add 3 -1 roll put
      }{
        n 1 sub get n getY add 2 div outPoints 6 n 1 sub mul 5 add 3 -1 roll put
        n 1 sub get n getX add 2 div outPoints 6 n 1 sub mul 4 add 3 -1 roll put
      } ifelse
    } for
    pop pop
  } ifelse
  outPoints
  end
} def
/Spline {
  /showpoints ED
  counttomark 2 div dup cvi /n ED
  n eq not { exch pop } if
  ] /Points ED
  n 1 gt {
    CalcBezierSpline
    mark exch aload pop
    ArrowA
    n 2 sub {
      6 2 roll 4 2 roll curveto
    } repeat
    6 2 roll 4 2 roll ArrowB curveto
  } if
} def
/OpenSymbolSpline {
  Spline
  0.1 setflat
  /Shift Symbol stringwidth pop 2 div def 
  CurvePath 
} def
%
/SQ { /r ED r r moveto r r neg L r neg r neg L r neg r L fill } def
/ST { /y ED /x ED x y moveto x neg y L 0 x L fill } def
/SP { /r ED gsave 0 r moveto 4 { 72 rotate 0 r L } repeat fill grestore } def
%
/FontDot { 
  DS 2 mul dup 
  matrix scale matrix concatmatrix exch matrix
  rotate matrix concatmatrix exch 
  findfont exch makefont setfont 
} def
%
/Rect { 
  x1 y1 y2 add 2 div moveto 
  x1 y2 lineto 
  x2 y2 lineto 
  x2 y1 lineto
  x1 y1 lineto 
  closepath 
} def
%
/OvalFrame { 
  x1 x2 eq y1 y2 eq or 
    { pop pop x1 y1 moveto x2 y2 L } 
    { y1 y2 sub abs x1 x2 sub abs 2 copy gt 
      { exch pop } { pop } ifelse 
      2 div exch { dup 3 1 roll mul exch } if 
      2 copy lt { pop } { exch pop } ifelse
      /b ED 
      x1 y1 y2 add 2 div moveto 
      x1 y2 x2 y2 b arcto 
      x2 y2 x2 y1 b arcto
      x2 y1 x1 y1 b arcto 
      x1 y1 x1 y2 b arcto 
      16 { pop } repeat 
      closepath 
    } ifelse 
} def
%
/Frame { 
  CLW mul /a ED 
  3 -1 roll 
  2 copy gt { exch } if 
  a sub /y2 ED 
  a add /y1 ED 
  2 copy gt { exch } if 
  a sub /x2 ED 
  a add /x1 ED 
  1 index 0 eq { pop pop Rect } { OvalFrame } ifelse 
} def
%
/BezierNArray { 
  /f ED 
  counttomark 2 div dup cvi /n ED 
  n eq not { exch pop } if 
  n 1 sub neg 3 mod 3 add 3 mod { 0 0 /n n 1 add def } repeat 
  f { ] aload /Points ED } { n 2 mul 1 add -1 roll pop } ifelse 
} def
%
/OpenBezier { 
  BezierNArray 
  n 1 eq 
    { pop pop } 
    { ArrowA n 4 sub 3 idiv 
      { 6 2 roll 4 2 roll curveto } repeat 
      6 2 roll 4 2 roll ArrowB curveto } ifelse 
} def
%
/OpenSymbolBezier { 
  OpenBezier
  0.1 setflat
  /Shift Symbol stringwidth pop 2 div def 
  CurvePath 
} def
%
/ClosedBezier { 
  BezierNArray 
  n 1 eq 
    { pop pop } 
    { moveto n 1 sub 3 idiv 
      { 6 2 roll 4 2 roll curveto } repeat 
      closepath } ifelse 
} def
%
/ClosedSymbolBezier { 
  /f ED				 % save showpoints value 
  2 copy /yEnd ED /xEnd ED
  counttomark -2 roll 2 copy /yStart ED /xStart ED
  counttomark 2 roll
  f
  ClosedBezier
  0.1 setflat
  /Shift Symbol stringwidth pop 2 div def 
  CurvePath 
  [ xEnd yEnd xStart yStart SymbolLine 
} def
%
/BezierShowPoints { 
  gsave 
  Points aload length 2 div cvi /n ED 
  moveto 
  n 1 sub { lineto } repeat 
  CLW 2 div SLW [ 4 4 ] 0 setdash stroke 
  grestore 
} def
%
/Parab { 
  /y0 ED /x0 ED /y1 ED /x1 ED 
  /dx x0 x1 sub 3 div def 
  /dy y0 y1 sub 3 div def 
  x0 dx sub y0 dy add x1 y1 ArrowA
  x0 dx add y0 dy add x0 2 mul x1 sub y1 ArrowB 
  curveto 
  /Points [ x1 y1 x0 y0 x0 2 mul x1 sub y1 ] def 
} def
%
/Parab1 { % 1 end  |  0 SP
  /ySP ED /xSP ED /y1 ED /x1 ED 
  /dx xSP x1 sub 3 div def 
  /dy ySP y1 sub 3 div def 
  newpath x1 y1 moveto xSP y1 lineto xSP ySP lineto 
                       x1 ySP lineto closepath clip 
  currentpoint
  newpath moveto
  xSP dx sub ySP dy add x1 y1 ArrowA
  xSP dx add ySP dy add xSP 2 mul x1 sub y1 ArrowB 
  curveto 
  /Points [ x1 y1 xSP ySP xSP 2 mul x1 sub y1 ] def 
} def
%
/Grid { 
  newpath 
  /a 4 string def 
  /b ED % 				psk@gridlabels in pt
  /c ED % 				{ \pst@usecolor\psgridlabelcolor }
  /n ED % 				psk@griddots
  cvi dup 1 lt { pop 1 } if 
  /s ED % 				\psk@subgriddiv
  s div dup 0 eq { pop 1 } if 
  /dy ED s div dup 0 eq { pop 1 } if %	\pst@number\psyunit abs
  /dx ED dy div round dy mul %		\pst@number\psxunit abs
  /y0 ED dx div round dx mul 
  /x0 ED dy div round cvi 
  /y2 ED dx div round cvi 
  /x2 ED dy div round cvi 
  /y1 ED dx div round cvi 
  /x1 ED 
  /h y2 y1 sub 0 gt { 1 } { -1 } ifelse def 
  /w x2 x1 sub 0 gt { 1 } { -1 } ifelse def 
  b 0 gt { 
    /z1 b 4 div CLW 2 div add def
%    /Helvetica findfont b scalefont setfont 
    /b b .95 mul CLW 2 div add def } if 
  systemdict /setstrokeadjust known 
    { true setstrokeadjust /t { } def }
    { /t { transform 0.25 sub round 0.25 add exch 0.25 sub round 0.25 add
       exch itransform } bind def } ifelse 
  gsave n 0 gt { 1 setlinecap [ 0 dy n div ] dy n div 2 div setdash } { 2 setlinecap } ifelse 
  /i x1 def 
  /f y1 dy mul n 0 gt { dy n div 2 div h mul sub } if def 
  /g y2 dy mul n 0 gt { dy n div 2 div h mul add } if def 
  x2 x1 sub w mul 1 add dup 1000 gt { pop 1000 } if 
  { i dx mul dup y0 moveto 
    b 0 gt 
      { gsave c i a cvs dup stringwidth pop 
        /z2 ED w 0 gt {z1} {z1 z2 add neg} ifelse 
	h 0 gt {b neg}{z1} ifelse 
        rmoveto show grestore } if 
    dup t f moveto 
    g t L stroke 
    /i i w add def 
  } repeat 
  grestore 
  gsave 
  n 0 gt
  % DG/SR modification begin - Nov. 7, 1997 - Patch 1
  %{ 1 setlinecap [ 0 dx n div ] dy n div 2 div setdash }
    { 1 setlinecap [ 0 dx n div ] dx n div 2 div setdash }
  % DG/SR modification end
    { 2 setlinecap } ifelse 
  /i y1 def 
  /f x1 dx mul n 0 gt { dx n div 2 div w mul sub } if def 
  /g x2 dx mul n 0 gt { dx n div 2 div w mul add } if def 
  y2 y1 sub h mul 1 add dup 1000 gt { pop 1000 } if 
  { newpath i dy mul dup x0 exch moveto 
    b 0 gt { gsave c i a cvs dup stringwidth pop 
      /z2 ED 
      w 0 gt {z1 z2 add neg} {z1} ifelse 
      h 0 gt {z1} {b neg} ifelse 
      rmoveto show grestore } if 
    dup f exch t moveto 
    g exch t L stroke 
    /i i h add def 
  } repeat 
  grestore 
} def
%
/ArcArrow { 
  /d ED /b ED /a ED 
  gsave 
  newpath 0 -1000 moveto clip 
  newpath 
  0 1 0 0 b 
  grestore 
  c mul 
  /e ED 
  pop pop pop r a e d PtoC y add exch x add
  exch r a PtoC y add exch x add exch b pop pop pop pop a e d CLW 8 div c
  mul neg d 
} def
%
%
/isbool { type (booleantype) cvn eq } def
%
/Ellipse { 
  dup isbool { /MoveToStart ED }{ /MoveToStart false def }ifelse  % false or true
  /rotAngle ED
  /mtrx CM def 
  T 
  rotAngle rotate
  scale 
  MoveToStart { 0 0 moveto 1 0 rmoveto } if  % move to the start position
  0 0 1 5 3 roll arc 
  mtrx setmatrix 
} def
%
/ArcAdjust { %%%% Vincent Guirardel
% given a target length (targetLength) and an initial angle (angle0) [in the stack],
% let  M(angle0)=(rx*cos(angle0),ry*sin(angle0))=(x0,y0).
% This computes an angle t such that (x0,y0) is at distance 
% targetLength from the point M(t)=(rx*cos(t),ry*sin(t)).
% NOTE: this an absolute angle, it does not have to be added or substracted to angle0
% contrary to TvZ's code.
% To achieve, this, one iterates the following process: start with some angle t,
% compute the point M' at distance targetLength of (x0,y0) on the semi-line [(x0,y0) M(t)].
% Now take t' (= new angle) so that (0,0) M(t') and M' are aligned.
%
% Another difference with TvZ's code is that we need d (=add/sub) to be defined.
% the value of d = add/sub is used to know on which side we have to move.
% It is only used in the initialisation of the angle before the iteration.
%
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
% Input stack:  1: target length 2: initial angle
% variables used : rx, ry, d (=add/sub)
%
  /targetLength ED /angle0 ED
  /x0 rx angle0 cos mul def
  /y0 ry angle0 sin mul def
% we are looking for an angle t such that (x0,y0) is at distance targetLength 
% from the point M(t)=(rx*cos(t),ry*sin(t)))
%initialisation of angle (using 1st order approx = TvZ's code)
  targetLength 57.2958 mul
  angle0 sin rx mul dup mul
  angle0 cos ry mul dup mul
  add sqrt div 
% if initialisation angle is two large (more than 90 degrees) set it to 90 degrees
% (if the ellipse is very curved at the point where we draw the arrow, %
% the value can be much more than 360 degrees !)
% this should avoid going on the wrong side (more than 180 degrees) or go near
% a bad attractive point (at 180 degrees)
  dup 90 ge { pop 90 } if 
  angle0 exch d % add or sub
% maximum number of times to iterate the iterative procedure:
% iterative procedure: takes an angle t on top of stack, computes a 
% better angle (and put it on top of stack)
  30 { dup
% compute distance D between (x0,y0) and M(t)
    dup cos rx mul x0 sub dup mul exch sin ry mul y0 sub dup mul add sqrt
% if D almost equals targetLength, we stop
    dup targetLength sub abs 1e-5 le { pop exit } if
% stack now contains D t
% compute the point M(t') at distance targetLength of (x0,y0) on the semi-line [(x0,y0) M(t)]:
% M(t')= ( (x(t)-x0)*targetLength/d+x0 , (y(t)-y0)*targetLength/d+y0 )
    exch dup cos rx mul x0 sub  exch sin ry mul y0 sub
% stack contains:  y(t)-y0, x(t)-x0, d
    2 index Div targetLength mul y0 add ry Div exch
    2 index Div targetLength mul x0 add rx Div
% stack contains x(t')/rx , y(t')/ry , d
% now compute t', and remove D from stack
    atan exch pop
  } repeat
% we don't look at what happened... in particular, if targetLength is greater 
% than the diameter of the ellipse...
% the final angle will be around /angle0 + 180. maybe we should treat this pathological case...
% after iteration, stack contains an angle t such that M(t) is the tail of the arrow
% to give back the result as a an angle relative to angle0 we could add the following line:
% angle0 sub 0 exch d
%
% begin bug fix 2006-01-11
% we want to adjust the new angle t' by a multiple of 360 so that  | t'-angle0 | <= 180
%(we don't want to make the ellipse turn more or less than it should)...
dup angle0 sub dup abs 180 gt { 180 add 360 div floor 360 mul sub } { pop } ifelse
% end bug fix
} def
%
/EllipticArcArrow {
  /d ED      % is add or sub
  /b ED      % arrow procedure
  /a1 ED     % angle
  gsave
  newpath
  0 -1000 moveto
  clip                  % Set clippath far from arrow.
  newpath
  0 1 0 0 b             % Draw arrow to determine length.
  grestore
% Length of arrow is on top of stack. Next 3 numbers are junk.
%
  a1 exch ArcAdjust   % Angular position of base of arrow.
  /a2 ED
  pop pop pop
  a2 cos rx mul xOrig add % hv 2007-08-29   x->xOrig
  a2 sin ry mul yOrig add % hv 2007-08-29   y->yOrig
  a1 cos rx mul xOrig add % 
  a1 sin ry mul yOrig add % 
% Now arrow tip coor and base coor are on stack.
  b pop pop pop pop       % Draw arrow, and discard coordinates.
  a2 CLW 8 div
% change value of d (test it by looking if  `` 1 1 d '' gives 2 or not )
  1 1 d 2 eq { /d { sub } def } { /d { add } def } ifelse
  ArcAdjust
% resets original value of d
  1 1 d 2 eq { /d { sub } def } { /d { add } def } ifelse  % Adjust angle to give overlap.
} def
%%------------------ tvz/DG/hv (2004-05-10) end -------------------%%
%
/Rot { CP CP translate 3 -1 roll neg rotate NET  } def
%
/RotBegin { 
  tx@Dict /TMatrix known not { /TMatrix { } def /RAngle { 0 } def } if 
  /TMatrix [ TMatrix CM ] cvx def 
  /a ED 
  a Rot /RAngle [ RAngle dup a add ] cvx def 
} def
%
/RotEnd { 
  /TMatrix [ TMatrix setmatrix ] cvx def 
  /RAngle [ RAngle pop ] cvx def 
} def
%
/PutCoor { gsave CP T CM STV exch exec moveto setmatrix CP grestore } def
/PutBegin { /TMatrix [ TMatrix CM ] cvx def CP 4 2 roll T moveto } def
/PutEnd { CP /TMatrix [ TMatrix setmatrix ] cvx def moveto } def
%
/Uput {
  /a ED 
  add 2 div /h ED 2 
  div /w ED 
  /s a sin def 
  /c a cos def 
  /b s abs c abs 2 copy gt dup 
    /q ED 
    { pop } { exch pop } ifelse def 
  /w1 c b div w mul def 
  /h1 s b div h mul def 
  q { w1 abs w sub dup c mul abs }{ h1 abs h sub dup s mul abs } ifelse 
} def
%
/UUput { 
  5 dict begin
  /z ED 
  abs /y ED 
  /x ED 
  q { x s div c mul abs y gt }{ x c div s mul abs y gt } ifelse 
    { x x mul y y mul sub z z mul add sqrt z add } 
    { q { x s div } { x c div } ifelse abs 
    } ifelse 
  a PtoC 
  h1 add exch 
  w1 add exch 
  end
} def
%
end
%-----------------------------------------------------------------------------%
%
% END pstricks.pro

%%EndProcSet
%%BeginProcSet: pst-algparser.pro 0 0
% $Id: pst-algparser.pro 919 2014-05-19 18:42:47Z herbert $
%%
%% PostScript prologue for PSTricks algorithm parser
%% Version 0.07, 2014/08/01
%%
%% This program can be redistributed and/or modified under the terms
%% of the LaTeX Project Public License Distributed from CTAN archives
%% in directory macros/latex/base/lppl.txt.
%%
%%-----------------------------------------------------------------------------%
%
%currentdict /Pi known not { /Pi 3.14159265359 def } if
%
/AlgParser { tx@AlgToPs begin AlgToPs end } def  % Dominique Rodriguez
/I2P { AlgParser cvx exec } def  % Infix to Postfix
%
/tx@CoreAnalyzerDict 100 dict def tx@CoreAnalyzerDict begin
%
% PS ANALYZER FOR ALGEBRAIC EXPRESSION V1.13
%
% 09/2011 DR factorial with ! added
%
% E->T|E+T
% T->FS|T*FS
% FS -> F | +FS | -FS
% F->P|F^SF|P!
% P->(E)|literal
% literal->number|var|var[E]|func(params)
% params->E|E,param
% number->TOBEFINISHED
%
%% E expression, T term, SF signed factor, F factor, P power
%
%% parser
%
%% str
%
%% C->E<condition_operators>E
%% STR index -> STR index+lenExpr
/AnalyzeCond { AnalyzeExpr ReadCondOp AnalyzeExpr EvalCondOp  } def
%
%% analyze Expression List (separator , or | )
%% STR index -> STR index+lenExpr
%% /AnalyzeListOfE {
%%   { NextNonBlankChar pop AnalyzeExpr%%dup Strlen eq { exit } if NextNonBlankChar
%%     NextNonBlankChar dup 0 eq { pop exit } if
%%     dup 44 ne 1 index 124 ne and { dup 41 ne { PROBLEMCONTACTBILLOU } { pop exit } ifelse } if
%%     pop NextNonBlankChar dup 0 eq { exit } if 124 ne { PROBLEMCONTACTBILLOU } if 1 add NextNonBlankChar 0 eq {toto} if } loop
%%   AnalyzeListOfEPostHook
%% } def
/AnalyzeListOfE {
  /NotFirst false def
  { NextNonBlankChar pop AnalyzeExpr
    NotFirst { EvalListOfExpr } { /NotFirst true def } ifelse
    dup Strlen eq { exit } if NextNonBlankChar
    dup 44 ne 1 index 124 ne and
    { dup 41 ne { PROBLEMCONTACTBILLOU } { pop exit } ifelse }
    if  pop 1 add } loop
  AnalyzeListOfEPostHook
} def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% E->T|E+T
%% STR index -> STR index+lenExpr
/AnalyzeExpr {
  AnalyzePreHook AnalyzeTerm IsEndingExpr
  { dup 0 ne { 32 eq { NextNonBlankChar } if } { pop } ifelse }
  { { RollOp 1 add NextNonBlankChar pop AnalyzeTerm PreEvalHook EvalAddSub IsEndingExpr { pop exit } if } loop }
  ifelse
  AnalyzePostHook
} def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% T->FS|T*FS
%% STR index
/AnalyzeTerm {
  AnalyzePreHook AnalyzeSignedFactor IsEndingTerm
  { dup 0 ne { 32 eq { NextNonBlankChar } if } { pop } ifelse }
  { { RollOp 1 add NextNonBlankChar pop AnalyzeSignedFactor PreEvalHook EvalMulDiv IsEndingTerm { pop exit } if} loop }
  ifelse
  AnalyzePostHook
} def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% FS -> F | +FS | -FS
%% STR index
/AnalyzeSignedFactor {
  AnalyzePreHook 2 copy get dup IsUnaryOp
  { RollOp 1 add NextNonBlankChar pop AnalyzeSignedFactor EvalUnaryOp }
  { pop AnalyzeFactor }
  ifelse AnalyzePostHook
} def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% F->P|F^P|P!
%% STR index
/AnalyzeFactor {
  AnalyzePreHook AnalyzePower IsEndingFactor
  { dup 0 ne { 32 eq { NextNonBlankChar } if } { pop } ifelse }
  { { dup 33 eq%% is there a ! DR 09/2011
      { pop 1 add NextNonBlankChar pop EvalFactorial }
      { RollOp 1 add NextNonBlankChar pop AnalyzePower PreEvalHook EvalPower }
      ifelse
      IsEndingFactor { pop exit } if } loop }
  ifelse  AnalyzePostHook
} def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% P->(E)|literal
%% STR index
/AnalyzePower {
  %% depending of first char either a number, or a literal
  2 copy get dup 40 eq%%an open par
  { pop 1 add NextNonBlankChar pop AnalyzeExpr 1 add NextNonBlankChar pop }
  { AnalyzeLiteral }
  ifelse
} def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% STR index STR[index] -> STR index
%/AnalyzeLiteral { IsNumber { EvalNumber } { EvalLiteral } ifelse } def
/AnalyzeLiteral { dup IsUnaryOp exch IsNumber or { EvalNumber } { EvalLiteral } ifelse } def%%dr 09102006
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% recognize + or -
%% chr -> T/F
/IsUnaryOp { dup 43 eq exch 45 eq or } bind def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% a number can contain only : 0123456789.
%% chr -> T/F
/IsNumber { dup 48 ge exch dup 57 le 3 -1 roll and exch 46 eq or } bind def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% STR index -> STR index number
%% a number can be of the form [0-9]*.[0-9]*\([eE][+-]?[0-9]+\)?
%% STR index -> STR index' number
/ReadNumber {
  exch dup 3 -1 roll dup 3 1 roll
  %%read mantissa
  { 1 add  2 copy dup Strlen eq { pop pop 0 exit } if get dup IsNumber not { exit } if pop } loop
  dup 101 eq exch 69 eq or
  %%% there is a "e" or "E" -> read exponant
  { 1 add 2 copy get dup IsUnaryOp
    { pop 1 add 2 copy get } if
    { IsNumber not { exit } if 1 add 2 copy get } loop }
  if
  dup 4 1 roll
  3 -1 roll exch 1 index sub getinterval
} def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% a number can contain only : 0123456789.
%% chr -> T/F
/IsCondOp { dup 30 eq exch dup 60 ge exch 62 le and or } bind def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% STR index -> STR index number
%% a number can be of the form [0-9]*.[0-9]*\([eE][+-]?[0-9]+\)?
%% STR index -> STR index' number
/ReadCondOp {
  NextNonBlankChar 1 index 4 1 roll
  { IsCondOp not { exit } if 1 add  2 copy get } loop
  2 copy 5 -1 roll
  exch 1 index sub getinterval 3 1 roll
} def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% a literal can contain only : 0123456789.
%% chr -> T/F
/IsLiteral {%
  dup 48 ge exch dup  57 le 3 -1 roll and exch
  dup 65 ge exch dup  90 le 3 -1 roll and 3 -1 roll or exch
  dup 97 ge exch     122 le and or } bind def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% a literal can be of the form [a-zA-Z][a-zA-Z0-9]*\(\((Expression)\)|\(\[Expression\]\)\)?
%% STR index -> literal STR index' nextchr
/ReadLiteral {
  exch dup 3 -1 roll dup 3 1 roll
  %%read literal core
  { 2 copy dup Strlen eq { pop pop 0 exit } if get dup IsLiteral not { exit } if pop 1 add } loop
  4 1 roll dup 5 1 roll 3 -1 roll exch 1 index sub getinterval 4 1 roll
} def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% expr is ended by end of str or a clpar
%% STR index -> STR index STR[index] T/F
/IsEndingExpr {%
  2 copy dup Strlen eq
  %% if end of str is reached -> end !
  { pop pop 0 true }
  %% ending chr -> clpar, comma, |, <, >, =, !,
  {get dup  dup  41 eq
       exch dup 124 eq
       exch dup  93 eq
       exch dup  44 eq
       exch dup  30 eq
       exch dup  60 ge exch 62 le and or or or or or}
  ifelse } def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% expr is ended by end of str or a +-
%% STR index -> STR index STR[index] T/F
/IsEndingTerm { IsEndingExpr { true } { dup dup 43 eq exch 45 eq or } ifelse } def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% expr is ended by end of str or */
%% STR index -> STR index STR[index] T/F
/IsEndingFactor { IsEndingTerm { true } { dup dup 42 eq exch 47 eq or } ifelse } def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% expr is ended by end of str or ^
%% STR index -> STR index STR[index] T/F
/IsEndingPower { IsEndingFactor { true } { dup 94 eq } ifelse } def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% STR index -> STR index STR[index]
/NextNonBlankChar { { dup Strlen eq { 0 exit } if 2 copy get dup neBlkChar { exit } if pop 1 add } loop } bind def
/neBlkChar { dup 32 ne exch dup 10 ne exch 9 ne and and } bind def
%%%%%%%%%%%%%%%%%%%%%%%%
%% DEBUG
/BRK {false} def
/BRKtrue {/BRK true def} def
/BRKStop {BRK {BRKtoto} if } def
/BRKEvalStop {BRK exch if } def
/BRKBRK2true {BRK {BRK2true} if } def
/BRK2 {false} def
/BRK2true {/BRK2 true def} def
/BRK2Stop {BRK2 {BRK2toto} if } def/BRK {false} def
end
%
%-------------------------------------------------------------------------------%
%
/tx@AlgToPs 12 dict def tx@AlgToPs begin
%
%% algExpr -> PSVector
/AlgToPs { tx@CoreAnalyzerDict begin InitParser AnalyzeListOfE pop pop EndingSequence end } def
/EndingSequence { ExpressionVector aload length /end cvx exch 1 add array astore } def
/InitParser { /ExpressionVector [ /tx@AddMathFunc cvx /begin cvx ] def dup length /Strlen exch def 0 } def
/Strlen 0 def
/EvalListOfExpr {} def%
/EvalNumber {%
    ReadNumber  cvr /ExpressionVector ExpressionVector aload length dup 3 add -1 roll cvx
    exch 1 add array astore def NextNonBlankChar pop } def
/EvalAddSub {%
  /ExpressionVector ExpressionVector aload length dup 5 add -1 roll
  43 eq { /add } { /sub } ifelse cvx exch 1 add array astore def
} def
/EvalMulDiv {%
  /ExpressionVector ExpressionVector aload length dup 5 add -1 roll
  42 eq { /mul } { /div } ifelse cvx exch 1 add array astore def
} def
/EvalPower {%
  /ExpressionVector ExpressionVector aload length dup 5 add -1 roll
  pop /exp cvx exch 1 add array astore def
} def
/EvalFactorial {% DR 09/2011
  /ExpressionVector ExpressionVector aload length
  /fact cvx exch 1 add array astore def
} def
/EvalLiteral {%
  ReadLiteral
  dup 40 eq%%% there is an open par -> function call
  { pop 2 index
    dup (Sum) eq { EvalSum }
    { dup (IfTE) eq { EvalCond }
      { dup (Derive) eq { pop EvalDerive }
	{ pop 1 add NextNonBlankChar pop AnalyzeListOfE 2 index TrigoFunc
          /ExpressionVector ExpressionVector aload length dup 5 add -1 roll cvn cvx
	  exch 1 add array astore def 1 add NextNonBlankChar pop } ifelse } ifelse} ifelse }
  { /ExpressionVector ExpressionVector aload length dup 6 add -1 roll cvn cvx exch 1 add array astore def
    dup 91 eq%%% there is an open bracket -> vector element
    { pop 1 add NextNonBlankChar pop AnalyzeExpr
      /ExpressionVector ExpressionVector aload length /cvi cvx exch /get cvx exch 2 add array astore def 1 add }
    { pop NextNonBlankChar pop }
    ifelse}
  ifelse
} def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% the derive function : Derive(n,f(x))
%% firstparindex lastparindex ->
/EvalDerive {
  %% manage the function descripiton
  1 add ReadNumber 3 1 roll NextNonBlankChar
  44 ne { ANALYZER_ERROR_missing_second_comma_in_Sum } if
  1 add NextNonBlankChar pop
  3 -1 roll cvi
  dup 0 eq
  { pop AnalyzeExpr 3 -1 roll pop 1 add }
  { 1 sub 3 1 roll (x)  exch tx@Derive begin DeriveIndexed end 4 -1 roll
    { (x) tx@Derive begin Derive end } repeat
    ExpressionVector exch /ExpressionVector [] def
    AlgToPs aload length
    /ExpressionVector 1 index 3 add -1 roll aload length dup 3 add -1 roll  /l2 exch def /l1 exch def
    l1 l2 add 1 add l2 neg roll l1 l2 add array astore def 3 -1 roll pop 1 add
    1 index length /Strlen exch def } ifelse
} def
/EvalSum {%
  pop 1 add NextNonBlankChar pop
  %% read the variable name
  ReadLiteral pop NextNonBlankChar
  44 ne { ANALYZER_ERROR_missing_first_comma_in_Sum } if
  %% read the initial value
  1 add NextNonBlankChar pop ReadNumber cvi 3 1 roll
  2 copy get 44 ne { ANALYZER_ERROR_missing_second_comma_in_Sum } if
  %% read the increment value
  1 add NextNonBlankChar pop ReadNumber cvi 3 1 roll
  2 copy get 44 ne { ANALYZER_ERROR_missing_second_comma_in_Sum } if
  %% read the limit value
  1 add NextNonBlankChar pop ReadNumber cvi 3 1 roll
  2 copy get 44 ne { ANALYZER_ERROR_missing_second_comma_in_Sum } if
  /ExpressionVector ExpressionVector aload length dup 7 add -3 roll 0 4 1 roll
  5 -1 roll 4 add array astore def
  %% keep ExpressionVector for later and create a new one for internal Sum computation
  ExpressionVector 3 1 roll /ExpressionVector [ 6 -1 roll cvn /exch cvx /def cvx ] def
  1 add NextNonBlankChar pop AnalyzeExpr
  %% add each term
  /ExpressionVector ExpressionVector aload length 1 add /add cvx exch array astore def
  /ExpressionVector 4 -1 roll aload length ExpressionVector cvx /for cvx 3 -1 roll 2 add
  array astore def 3 -1 roll pop 1 add
} def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% Convert to radians if trigo function call
%% (name) ->
/TrigoFunc {
  dup (cos) eq 1 index (sin) eq or exch (tan) eq or
  { /ExpressionVector ExpressionVector aload length 3.1415926 /div cvx 180 /mul cvx 5 -1 roll 4 add
    array astore def
  } if
} def
/EvalCond {%
  pop 1 add AnalyzeCond NextNonBlankChar
  44 ne { ANALYZER_ERROR_missing_first_comma_in_IfTE } if
  ExpressionVector 3 1 roll /ExpressionVector [] def
  1 add AnalyzeExpr ExpressionVector 3 1 roll /ExpressionVector [] def
  NextNonBlankChar 44 ne { ANALYZER_ERROR_missing_second_comma_in_IfTE } if
  1 add AnalyzeExpr
  NextNonBlankChar 41 ne { ANALYZER_ERROR_missing_ending parenthesis_in_IfTE } if
  ExpressionVector
  /ExpressionVector 6 -1 roll aload length dup
  6 add -1 roll cvx exch dup 4 add -1 roll cvx /ifelse cvx 3 -1 roll 3 add array astore def
  1 add 3 -1 roll pop
} def
%% CondOp STR index
/EvalCondOp {%
  3 -1 roll
  dup (=) eq  { /eq } {%
  dup (<) eq  { /lt } {%
  dup (>) eq  { /gt } {%
  dup (>=) eq { /ge } {%
  dup (<=) eq { /ge } {%
  dup (!=) eq { /ne } { ERROR_non_valid_conditional_operator }
  ifelse } ifelse } ifelse } ifelse } ifelse } ifelse
  cvx exch pop
  /ExpressionVector ExpressionVector aload length dup 3 add -1 roll exch 1 add array astore def } def
/EvalUnaryOp {
  3 -1 roll 45 eq { /ExpressionVector ExpressionVector aload length /neg cvx exch 1 add array astore def } if
} def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% H O O K S
/AnalyzePreHook {} bind def
/PreEvalHook {} bind def
/AnalyzeListOfEPostHook {} bind def
/AnalyzePostHook {} def
/RollOp { 3 1 roll } bind def
end   %tx@CoreAnalyzerDict
%
%--------------------------------------------------------------------%
%
/tx@Derive 41 dict def tx@Derive begin
%%increase ^^ for each function added
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% algExpr variable -> PSVector
/Derive {
  10240 string 3 1 roll 0 3 1 roll
  /Variable exch def
  tx@CoreAnalyzerDict begin InitParser AnalyzeListOfE end
} def
/Strlen 0 def
/InitParser { dup length /Strlen exch def 0 } def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% algExpr variable index -> PSVector
/DeriveIndexed {%
  3 1 roll 10240 string 3 1 roll 0 3 1 roll
  /Variable exch def
  tx@CoreAnalyzerDict begin InitParser pop 4 -1 roll AnalyzeExpr 4 -2 roll pop pop 4 -2 roll exch pop end
} def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% (u,v)'=-(u',v')
/EvalListOfExpr {%
  4 2 roll 2 copy 9 -1 roll dup length 4 1 roll putinterval add AddPipe
           2 copy 7 -1 roll dup length 4 1 roll putinterval add
  6 -2 roll pop pop
  2 copy pop 0 6 2 roll GetIntervalNewStr 5 1 roll 2 copy 0 exch getinterval 6 1 roll } def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% (-u)'=-(u')
/EvalUnaryOp {
  4 -2 roll 4 index (0) eq
  { (0) StrConcat 7 -1 roll pop }
  { 7 -1 roll 45 eq
    { AddSub AddOpPar true } { false } ifelse
    3 1 roll 5 index StrConcat 3 -1 roll { AddClPar } if } ifelse
  2 copy pop 0 6 2 roll GetIntervalNewStr
  7 -2 roll pop pop 2 index 6 index dup 4 index exch sub getinterval exch 6 2 roll
} def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% (number)'=0
/EvalNumber { ReadNumber (0) 6 2 roll } def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% (u+v)'=u'+v'
/EvalAddSub {%
  7 index dup (0) eq
  { pop true }%% du=0 nothing added
  { dup length exch 5 index 5 index 3 -1 roll putinterval 4 -1 roll add 3 1 roll false }
  ifelse
  5 index dup (0) eq
  { pop { (0) } { 4 -2 roll 2 copy pop 0  6 2 roll GetIntervalNewStr } ifelse }%%dv=0
  { exch
    { 5 -2 roll 7 index 45 eq { AddSub } if false } %%nothing yet added
    { 5 -2 roll 7 index 43 eq%%something yet added
      { AddAdd false } { AddSub AddOpPar true } ifelse }
    ifelse 11 1 roll
    3 -1 roll StrConcat 10 -1 roll { AddClPar } if
    2 copy pop 0 6 2 roll GetIntervalNewStr }
  ifelse
  mark 11 -5 roll cleartomark 2 index 6 index dup 4 index exch sub getinterval exch 6 2 roll
} def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% (u*v)' or (u/v)'
/EvalMulDiv { 6 index 42 eq {EvalMul} {EvalDiv} ifelse } def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% (u*v)'=u'*v+u*v'
/EvalMul {%
  4 -2 roll 7 index dup (0) eq
  { pop false }%%du=0
  { (1) eq%%du=1
    { false }
    { AddOpPar 7 index StrConcat AddClPar AddMul AddOpPar true } ifelse
    3 1 roll 6 index StrConcat 3 -1 roll { AddClPar } if
    true }%%du!=0
  ifelse
  5 1 roll 5 index (0) eq
  { 5 -1 roll not { (0) StrConcat } if }%%dv=0
  { 5 -1 roll { AddAdd } if
    4 index (1) eq
    { 8 index StrConcat }
    { AddOpPar 8 index StrConcat AddClPar AddMul AddOpPar 4 index StrConcat AddClPar }
    ifelse
  }%%dv!=0
  ifelse
  2 copy pop 0 6 2 roll GetIntervalNewStr
  mark 11 -5 roll cleartomark 2 index 6 index dup 4 index exch sub getinterval exch 6 2 roll
} def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% (u/v)'=(u'*v-u*v')/v^2
/EvalDiv {%
  4 -2 roll
  4 index (0) eq%%dv=0 -> u'/v
  { 7 index (0) eq { (0) StrConcat } { AddOpPar 7 index StrConcat AddClPar AddDiv 5 index StrConcat } ifelse }
  { 7 index dup (0) eq
    { pop }%%du=0
    { (1) eq%%du=1
      { false }
      { AddOpPar 7 index StrConcat AddClPar AddMul AddOpPar true } ifelse
      3 1 roll 6 index StrConcat 3 -1 roll { AddClPar } if}%%du!=0
    ifelse
      AddSub
      4 index (1) eq
      { 8 index StrConcat }
      { AddOpPar 8 index StrConcat AddClPar AddMul AddOpPar 4 index StrConcat AddClPar }
      ifelse
    %}%%dv!=0
    2 copy GetIntervalNewStr 3 1 roll pop 0 AddOpPar 3 -1 roll StrConcat AddClPar
    AddDiv AddOpPar 5 index StrConcat AddClPar 2 copy (^2) putinterval 2 add }
  ifelse
  2 copy pop 0 6 2 roll GetIntervalNewStr
  mark 11 -5 roll cleartomark 2 index 6 index dup 4 index exch sub getinterval exch 6 2 roll
} def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% str1 index str2 -> str1 index
/StrConcat { dup length 4 2 roll 2 copy 6 -1 roll putinterval 3 -1 roll add } bind def
/GetIntervalNewStr { 0 exch getinterval dup length string copy } bind def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% (u^v)'=(u^v)'=u'vu^(v-1)+v'u^(v)ln(u)
/EvalPower {%
  4 -2 roll 7 index (0) eq
  {%%if du=0 then (u^v)'=v'ln(u)u^v
    4 index (0) eq
    { (0) StrConcat }%%if dv=0 then (u^v)'=0
    { 4 index (1) ne { AddOpPar 4 index StrConcat (\)*) StrConcat } if
      8 index (e) ne { (ln\() StrConcat 8 index StrConcat (\)*) StrConcat } if
      AddOpPar 8 index StrConcat (\)^\() StrConcat 5 index StrConcat AddClPar } ifelse
  }
  {%%du!=0
    4 index (0) eq
    {%%if dv=0 then (u^v)'=vu'u^(v-1)
      5 index dup IsStrNumber
      { dup (0) eq
        { StrConcat }
        { dup dup (1) eq exch (1.0) eq or
          { StrConcat  }
	  { StrConcat
	    7 index dup (1) ne exch (1.0) ne and%%%dr 09102006 insert du if <> 1
	    { (*\() StrConcat 7 index StrConcat (\)) StrConcat } if%%%dr 09102006
            (*\() StrConcat 8 index StrConcat (\)) StrConcat
            5 index  dup dup (2) eq exch (2.0) eq or
	    { pop } { cvr 1 sub 20 string cvs 3 1 roll (^) StrConcat 3 -1 roll StrConcat } ifelse } ifelse } ifelse }
      { pop AddOpPar 5 index StrConcat (\)*\() StrConcat 8 index StrConcat (\)^\() StrConcat
        5 index StrConcat (-1\)) StrConcat } ifelse
    }
    {%%if dv!=0 and du!=0 then (u^v)'=u'vu^(v-1)+v'u^(v)ln(u)
      7 index (1) ne { AddOpPar 7 index StrConcat (\)*) StrConcat } if
      AddOpPar 5 index StrConcat (\)*\() StrConcat
      8 index StrConcat (\)^\() StrConcat
      5 index StrConcat (-1\)+\() StrConcat
      4 index (1) ne { 4 index StrConcat (\)*\() StrConcat } if
      8 index StrConcat (\)^\() StrConcat
      5 index StrConcat (\)*ln\() StrConcat
      8 index StrConcat AddClPar
    } ifelse
  } ifelse
  2 copy pop 0 6 2 roll GetIntervalNewStr
  mark 11 -5 roll cleartomark 2 index 6 index dup 4 index exch sub getinterval exch 6 2 roll
} def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% No derivative for factorial ! only cst => null derivative
/EvalFactorial {% DR 09/2011
  4 index (0) eq
  { (0) mark 8 -2 roll  cleartomark 2 index 7 index dup 4 index exch sub getinterval exch 6 2 roll }
  { DERIVATIVE_ENGINE_ERROR_no_variable_in_factorial } ifelse
} def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% str -> true/false
/IsStrNumber {%
  true exch
  { dup 48 lt exch dup 57 gt 3 -1 roll or
    exch dup 46 ne%%.
    exch dup 43 ne%%+
    exch 45 ne%%-
    and and and { pop false } if } forall
} def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% literal switch -> func call, vector, variables
/EvalLiteral {%
  ReadLiteral dup 40 eq%%% there is an open par -> function call
  { pop (EvalFunc_             ) 9 4 index StrConcat 0 exch getinterval cvn cvx exec }
  { dup 91 eq%%% there is an open bracket -> vector element
    { DERIVATIVE_ENGINE_ERROR_vector_not_yet_implemented }
    { pop EvalVariable }
    ifelse }
  ifelse
} def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% first last parpos Expr[first:parpos-1] ->
/EvalVariable { 2 index Variable eq { (1) } { (0) } ifelse 4 -1 roll exch 6 2 roll } def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% (f(u))'=u'f'(u)
/EvalFunc {
  4 2 roll 4 index (1) ne
  { AddOpPar 4 index StrConcat (\)*) StrConcat } if
  (Eval             ) 4 8 index StrConcat 0 exch getinterval cvn cvx exec
  2 copy pop 0 6 2 roll GetIntervalNewStr
  mark 9 -3 roll cleartomark 2 index 6 index dup 4 index exch sub getinterval exch 6 2 roll
} def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% Func derivative -> Eval<func>
/EvalFunc_sin {%
  PreCommonFunc
  { (cos\() StrConcat 5 index StrConcat AddClPar } if
  PostCommonFunc } def
/EvalFunc_cos {%
  PreCommonFunc
  { (\(-sin\() StrConcat 5 index StrConcat (\)\)) StrConcat } if
  PostCommonFunc } def
/EvalFunc_tan {%
  PreCommonFunc
  {  dup 0 eq { (1) StrConcat } { 1 sub } ifelse  (/cos\() StrConcat 5 index StrConcat (\)^2) StrConcat } if
  PostCommonFunc } def
/EvalFunc_asin {%
  PreCommonFunc
  { (1/sqrt\(1-\() StrConcat 5 index StrConcat (\)^2\)\)) StrConcat } if
  PostCommonFunc } def
/EvalFunc_acos {%
  PreCommonFunc
  { (-1/sqrt\(1-\() StrConcat 5 index StrConcat (\)^2\)\)) StrConcat } if
  PostCommonFunc } def
/EvalFunc_atg {%
  PreCommonFunc
  { (1/\(1+\() StrConcat 5 index StrConcat (\)^2\)\)) StrConcat } if
  PostCommonFunc } def
/EvalFunc_floor {%
  PreCommonFunc
  {  dup 0 eq { (1) StrConcat } { 1 sub } ifelse (/\() StrConcat 5 index StrConcat AddClPar } if
  PostCommonFunc } def
/EvalFunc_ln {%
  PreCommonFunc
  {  dup 0 eq { (1) StrConcat } { 1 sub } ifelse (/\() StrConcat 5 index StrConcat AddClPar } if
  PostCommonFunc } def
/EvalFunc_exp {%
  PreCommonFunc
  {  (exp\() StrConcat 5 index StrConcat AddClPar } if
  PostCommonFunc } def
/EvalFunc_EXP {%
  PreCommonFunc
  {  (EXP\() StrConcat 5 index StrConcat AddClPar } if
  PostCommonFunc } def
/EvalFunc_sqrt {%
  PreCommonFunc
  { dup 0 eq { (1) StrConcat } { 1 sub } ifelse (/\(2*sqrt\() StrConcat 5 index StrConcat (\)\)) StrConcat } if
  PostCommonFunc } def
/EvalFunc_Fact {%
  PreCommonFunc { DERIVATIVE_ENGINE_ERROR_no_variable_expression_in_Fact } if
  PostCommonFunc } def
/EvalFunc_sh {%
  PreCommonFunc
  { (ch\() StrConcat 5 index StrConcat AddClPar } if
  PostCommonFunc } def
/EvalFunc_ch {%
  PreCommonFunc
  { (sh\() StrConcat 5 index StrConcat AddClPar } if
  PostCommonFunc } def
/EvalFunc_th {%
  PreCommonFunc
  {  dup 0 eq { (1) StrConcat } { 1 sub } ifelse  (/ch\() StrConcat 5 index StrConcat (\)^2) StrConcat } if
  PostCommonFunc } def
/EvalFunc_Argsh {%
  PreCommonFunc
  { (1/sqrt\(1+\() StrConcat 5 index StrConcat (\)^2\)\)) StrConcat } if
  PostCommonFunc } def
/EvalFunc_Argch {%
  PreCommonFunc
  { (1/sqrt\(\() StrConcat 5 index StrConcat (\)^2-1\)\)) StrConcat } if
  PostCommonFunc } def
/EvalFunc_Argth {%
  PreCommonFunc
  { (1/\(1-\() StrConcat 5 index StrConcat (\)^2\)\)) StrConcat } if
  PostCommonFunc } def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
/PreCommonFunc {
  1 add NextNonBlankChar pop 3 -1 roll 5 1 roll AnalyzeExpr 1 add NextNonBlankChar pop
  4 2 roll 4 index (0) eq
  { (0) StrConcat false }
  { 4 index (1)  ne { AddOpPar 4 index StrConcat (\)*) StrConcat } if true } ifelse
} def
/PostCommonFunc {
  2 copy pop 0 6 2 roll GetIntervalNewStr
  mark 9 -3 roll cleartomark 2 index 6 index dup 4 index exch sub getinterval exch 6 2 roll
} def
/EvalFunc_Derive {%
  1 add ReadNumber cvi 1 add dup cvr log 1 add cvi string cvs
  4 -1 roll pop 5 1 roll 1 add NextNonBlankChar pop AnalyzeExpr 1 add
  4 -2 roll (Derive\() StrConcat 7 -1 roll StrConcat (,) StrConcat 6 -1 roll StrConcat AddClPar
  2 copy pop 0 6 2 roll GetIntervalNewStr 6 -1 roll pop 2 index 6 index dup 4 index exch sub getinterval
  exch 6 2 roll } def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% literal switch -> func call, vector, variables
/EvalFunc_Sum {%
  1 add NextNonBlankChar pop
  %% read the variable name
  ReadLiteral pop 3 -1 roll pop NextNonBlankChar
  44 ne { ANALYZER_ERROR_missing_first_comma_in_Sum } if
  %% read the initial value
  1 add NextNonBlankChar pop ReadNumber pop
  2 copy get 44 ne { ANALYZER_ERROR_missing_second_comma_in_Sum } if
  %% read the increment value
  1 add NextNonBlankChar pop ReadNumber pop
  2 copy get 44 ne { ANALYZER_ERROR_missing_third_comma_in_Sum } if
  %% read the limit value
  1 add NextNonBlankChar pop ReadNumber pop
  2 copy get 44 ne { ANALYZER_ERROR_missing_fourth_comma_in_Sum } if
  1 add NextNonBlankChar pop dup 6 1 roll 3 -1 roll pop AnalyzeExpr 1 add NextNonBlankChar pop
  4 -2 roll 3 index 8 index dup 9 index exch sub getinterval StrConcat
  4 index StrConcat AddClPar
  2 copy pop 0 6 2 roll GetIntervalNewStr
  mark 9 -3 roll cleartomark 2 index 6 index dup 4 index exch sub getinterval exch 6 2 roll
} def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% literal switch -> func call, vector, variables
/EvalFunc_IfTE {%
  3 -1 roll pop 1 add NextNonBlankChar pop SkipCond
  NextNonBlankChar
  44 ne { ANALYZER_ERROR_missing_first_comma_in_IfTE } if
  1 add NextNonBlankChar pop dup 5 1 roll
  AnalyzeExpr NextNonBlankChar
  44 ne { ANALYZER_ERROR_missing_second_comma_in_IfTE } if
  1 add NextNonBlankChar pop
  AnalyzeExpr 1 add NextNonBlankChar pop
  4 -2 roll 3 index 10 index dup 11 index exch sub getinterval StrConcat
  6 index StrConcat (,) StrConcat 4 index StrConcat AddClPar
  2 copy pop 0 6 2 roll GetIntervalNewStr
  mark 11 -5 roll cleartomark 2 index 6 index dup 4 index exch sub getinterval exch 6 2 roll
} def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% advance in str until a comma is found (no error detection!)
%% str index -> str index'
/SkipCond { { 1 add 2 copy get 44 eq {exit } if } loop } bind def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% Convert to radians if trigo function call
%% (name) ->
/TrigoFunc {
  dup (cos) eq 1 index (sin) eq or exch (tan) eq or
  { /ExpressionVector ExpressionVector aload length Pi /div cvx 180 /mul cvx 5 -1 roll 4 add
    array astore def
  } if
} def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% No derivative for condition....
/EvalCondOp { 3 -1 roll pop } bind def
/PutIntervalOneAdd {putinterval 1 add} bind def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% Add open parenthesis in string at the given index
%% str index -> str index+1
/AddOpPar {2 copy (\() PutIntervalOneAdd} bind def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% Add close parenthesis in string at the given index
%% str index -> str index+1
/AddClPar {2 copy (\)) PutIntervalOneAdd} bind def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% Add 0 in string at the given index
%% str index -> str index+1
/AddZero {2 copy (0) PutIntervalOneAdd} bind def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% Add open parenthesis in string at the given index
%% str index -> str index+1
/AddMul {2 copy (*) PutIntervalOneAdd} bind def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% Add open parenthesis in string at the given index
%% str index -> str index+1
/AddDiv {2 copy (/) PutIntervalOneAdd} bind def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% Add a plus sign in string at the given index
%% str index -> str index+1
/AddAdd {2 copy (+) PutIntervalOneAdd} bind def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% Add a minus sign in string at the given index
%% str index -> str index+1
/AddSub {2 copy (-) PutIntervalOneAdd} bind def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% Add a pipe sign in string at the given index
%% str index -> str index+1
/AddPipe {2 copy (|) PutIntervalOneAdd} bind def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% H O O K S
/AnalyzePreHook { dup 5 1 roll } bind def
/PreEvalHook {} def
/AnalyzePostHook { 7 -1 roll pop } bind def
/AnalyzeListOfEPostHook { 6 -1 roll mark 6 1 roll cleartomark } bind def
/RollOp { 5 1 roll } bind def
end%%%tx@CoreAnalyzerDict
/tx@AddMathFunc 12 dict def tx@AddMathFunc begin
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% NEW FUNC
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% function arcsine in radians asin(x)=atan(x/sqrt(1-x^2))
%% x -> theta
/asin {%
  dup abs 1 gt { EQDFasinrangeerror  } if
  dup dup dup mul 1 exch sub sqrt atan exch 0 lt { 360 sub } if DegtoRad
} def
%% function arccosine in radians acos(x)=atan(sqrt(1-x^2)/x)
%% x -> theta
/acos {%
  dup abs 1 gt { EQDFacosrangeerror  } if
  dup dup mul 1 exch sub sqrt exch atan DegtoRad
} def
%% function arctangent in radians
%% x -> theta
/atg { 1 atan dup 90 gt { 360 sub } if DegtoRad } bind def
%% HYPERBOLIC FUNCTIONS
/sh { dup Ex exch neg Ex sub 2 div } def
/ch { dup Ex exch neg Ex add 2 div } def
/th { dup sh exch ch div } def
/Argsh { dup dup mul 1 add sqrt add ln } def
/Argch { dup dup mul 1 sub sqrt add ln } def
/Argth { dup 1 add exch 1 exch sub div ln 2 div } def
%% modified exponential funtion for 0
%% x n -> x^n
/Exp { dup 0 eq { pop pop 1 } { exp } ifelse } bind def
%% modified exponential funtion for 0
%% x -> e^x
/Ex { Euler exch exp } bind def
%%
%% factorial function
%% n -> n!
/Fact { 1 exch 2 exch 1 exch { mul } for } bind def
/fact { Fact } bind def
/! { Fact } bind def
end
%
% END pst-algparser.pro

%%EndProcSet
%%BeginProcSet: pst-tools.pro 0 0
% $Id: pst-tools.pro 842 2013-10-26 10:25:41Z herbert $
%
%% PostScript tools prologue for pstricks.tex.
%% Version 0.04, 2013/10/26
%%
%% This program can be redistributed and/or modified under the terms
%% of the LaTeX Project Public License Distributed from CTAN archives
%% in directory macros/latex/base/lppl.txt.
%
%
/Pi2 1.57079632679489661925640 def
/factorial { % n on stack, returns n! 
  dup 0 eq { 1 }{ 
    dup 1 gt { dup 1 sub factorial mul } if }
  ifelse } def 
%
/MoverN { % m n on stack, returns the binomial coefficient m over n
  2 dict begin
  /n exch def /m exch def
  n 0 eq { 1 }{
    m n eq { 1 }{
      m factorial n factorial m n sub factorial mul div } ifelse } ifelse 
  end
} def
%
/ps@ReverseOrderOfPoints { % on stack [P1 P2 P3 ...Pn]=>[Pn,Pn-1,...,P2,P1]
  5 dict begin       % all local
  aload length /n ED % number of coors
  n 2 div cvi /m ED  % number of Points
  /n1 n def
  m { n1 2 roll /n1 n1 2 sub def } repeat
  n array astore
  end
} def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
% subroutines for complex numbers, given as an array [a b] 
% which is a+bi = Real+i Imag
%
/cxadd {		% [a1 b1] [a2 b2] = [a1+a2 b1+b2]
  dup 0 get		% [a1 b1] [a2 b2] a2
  3 -1 roll		% [a2 b2] a2 [a1 b1]
  dup 0 get		% [a2 b2] a2 [a1 b1] a1
  3 -1 roll		% [a2 b2] [a1 b1] a1 a2
  add			% [a2 b2] [a1 b1] a1+a2
  3 1 roll		% a1+a2 [a2 b2] [a1 b1]
  1 get			% a1+a2 [a2 b2] b1
  exch 1 get		% a1+a2 b1 b2
  add 2 array astore
} def
%
/cxneg {		% [a b]
  dup 1 get		% [a b] b
  exch 0 get		% b a
  neg exch neg		% -a -b
  2 array astore
} def
%
/cxsub { cxneg cxadd } def  % same as negative addition
%
% [a1 b1][a2 b2] = [a1a2-b1b2 a1b2+b1a2] = [a3 b3]
/cxmul {		% [a1 b1] [a2 b2]
  dup 0 get		% [a1 b1] [a2 b2] a2
  exch 1 get		% [a1 b1] a2 b2
  3 -1 roll		% a2 b2 [a1 b1]
  dup 0 get		% a2 b2 [a1 b1] a1
  exch 1 get		% a2 b2 a1 b1
  dup			% a2 b2 a1 b1 b1
  5 -1 roll dup		% b2 a1 b1 b1 a2 a2
  3 1 roll mul		% b2 a1 b1 a2 b1a2
  5 -2 roll dup		% b1 a2 b1a2 b2 a1 a1
  3 -1 roll dup		% b1 a2 b1a2 a1 a1 b2 b2
  3 1 roll mul		% b1 a2 b1a2 a1 b2 a1b2
  4 -1 roll add		% b1 a2 a1 b2 b3
  4 2 roll mul		% b1 b2 b3 a1a2
  4 2 roll mul sub	% b3 a3
  exch 2 array astore
} def
%
% [a b]^2 = [a^2-b^2 2ab] = [a2 b2]
/cxsqr {		% [a b]   square root
  dup 0 get exch 1 get	% a b
  dup dup mul		% a b b^2
  3 -1 roll		% b b^2 a
  dup dup mul 		% b b^2 a a^2
  3 -1 roll sub		% b a a2
  3 1 roll mul 2 mul	% a2 b2	
  2 array astore
} def
%
/cxsqrt {		% [a b]
%  dup cxnorm sqrt /r exch def
%  cxarg 2 div RadtoDeg dup cos r mul exch sin r mul cxmake2 
  cxlog 		% log[a b]
  2 cxrdiv 		% log[a b]/2
  aload pop exch	% b a
  2.781 exch exp	% b exp(a)
  exch cxconv exch	% [Re +iIm] exp(a)
  cxrmul		%
} def
%
/cxarg { 		% [a b] 
  aload pop 		% a b
  exch atan 		% arctan b/a
  DegtoRad 		% arg(z)=atan(b/a)
} def
%
% log[a b] = [a^2-b^2 2ab] = [a2 b2]
/cxlog {		% [a b]
  dup 			% [a b][a b]
  cxnorm 		% [a b] |z|
  log 			% [a b] log|z|
  exch 			% log|z|[a b]
  cxarg 		% log|z| Theta
  cxmake2 		% [log|z| Theta]
} def
%
% square of magnitude of complex number
/cxnorm2 {		% [a b]
  dup 0 get exch 1 get	% a b
  dup mul			% a b^2
  exch dup mul add	% a^2+b^2
} def
%
/cxnorm {		% [a b]
  cxnorm2 sqrt
} def
%
/cxconj {		% conjugent complex
  dup 0 get exch 1 get	% a b
  neg 2 array astore	% [a -b]
} def
%
/cxre { 0 get } def	% real value
/cxim { 1 get } def	% imag value
%
% 1/[a b] = ([a -b]/(a^2+b^2)
/cxrecip {		% [a b]
  dup cxnorm2 exch	% n2 [a b]
  dup 0 get exch 1 get	% n2 a b
  3 -1 roll		% a b n2
  dup			% a b n2 n2
  4 -1 roll exch div	% b n2 a/n2
  3 1 roll div		% a/n2 b/n2
  neg 2 array astore
} def
%
/cxmake1 { 0 2 array astore } def % make a complex number, real given
/cxmake2 { 2 array astore } def	  % dito, both given
%
/cxdiv { cxrecip cxmul } def
%
% multiplikation by a real number
/cxrmul {		% [a b] r
  exch aload pop	% r a b
  3 -1 roll dup		% a b r r
  3 1 roll mul		% a r b*r
  3 1 roll mul		% b*r a*r
  exch 2 array astore   % [a*r b*r]
} def
%
% division by a real number
/cxrdiv {		% [a b] r
  1 exch div		% [a b] 1/r
  cxrmul
} def
%
% exp(i theta) = cos(theta)+i sin(theta) polar<->cartesian
/cxconv {		% theta
  RadtoDeg dup sin exch cos cxmake2
} def

%%%%% ### bubblesort ###
%% syntax : array bubblesort --> array2 trie par ordre croissant
%% code de Bill Casselman
%% http://www.math.ubc.ca/people/faculty/cass/graphics/text/www/
/bubblesort { % on stack must be an array [ ... ]
4 dict begin
   /a exch def
   /n a length 1 sub def
   n 0 gt {
      % at this point only the n+1 items in the bottom of a remain to
      % the sorted largest item in that blocks is to be moved up into
      % position n
      n {
         0 1 n 1 sub {
            /i exch def
            a i get a i 1 add get gt {
               % if a[i] > a[i+1] swap a[i] and a[i+1]
               a i 1 add
               a i get
               a i a i 1 add get
               % set new a[i] = old a[i+1]
               put
               % set new a[i+1] = old a[i]
               put
            } if
         } for
         /n n 1 sub def
      } repeat
   } if
   a % return the sorted array
end
} def
%
/concatstringarray{  %  [(a) (b) ... (z)] --> (ab...z)  20100422
  0 1 index { length add } forall 
  string     
  0 3 2 roll      
  { 3 copy putinterval length add }forall 
  pop  
} bind def
%
/dot2comma {% on stack a string (...) 
  2 dict begin
  /Output exch def
  0 1 Output length 1 sub { 
    /Index exch def 
    Output Index get 46 eq { Output Index 44 put } if 
  } for
  Output
  end
} def
%
/rightTrim { % on stack the string and the character number to be stripped  
  /charNo exch def
  dup
  length 1 sub -1 0 { 
    /i exch def dup i get charNo ne { exit } if 
  } for
  0 i 1 add getinterval
  dup length string copy
} bind def  % leaves the stripped string on the stack

/psStringwidth /stringwidth load def
/psShow /show load def

%/stringwidth{ 32 rightTrim psStringwidth } bind def

%/show { 32 rightTrim psShow } bind def
%-----------------------------------------------------------------------------%

/pgffunctions {
    /pgfsc{}bind def% stroke color is empty by default
    /pgffc{}bind def% fill color is empty by default
    /pgfstr{stroke}bind def%
    /pgffill{fill}bind def%
    /pgfeofill{eofill}bind def%
    /pgfe{a dup 0 rlineto exch 0 exch rlineto neg 0 rlineto closepath}bind def% rectangle
    /pgfw{setlinewidth}bind def% setlinewidth
    /pgfs{save pgfpd 72 Resolution div 72 VResolution div neg scale 
      magscale{1 DVImag div dup scale}if 
      pgfx neg pgfy neg translate pgffoa .setopacityalpha}bind def% save
    /pgfr{pgfsd restore}bind def %restore
    userdict begin%
    /pgfo{pgfsd /pgfx currentpoint /pgfy exch def def @beginspecial}bind def %open
    /pgfc{newpath @endspecial pgfpd}bind def %close
    /pgfsd{globaldict /pgfdelta /delta where {pop delta} {0} ifelse put}bind def% save delta
    /pgfpd{/delta globaldict /pgfdelta get def}bind def % put delta
    /.setopacityalpha where {pop} {/.setopacityalpha{pop}def} ifelse % install .setopacityalpha 
    /.pgfsetfillopacityalpha{/pgffoa exch def
      /pgffill{gsave pgffoa .setopacityalpha fill 1 .setopacityalpha newpath fill grestore newpath}bind def
      /pgfeofill{gsave pgffoa .setopacityalpha eofill 1 .setopacityalpha newpath eofill grestore newpath}bind def}bind def
    /.pgfsetstrokeopacityalpha{/pgfsoa exch def /pgfstr{gsave pgfsoa .setopacityalpha stroke grestore newpath}bind def}bind def
    /pgffoa 1 def
    /pgfsoa 1 def
    end
} def
%-----------------------------------------------------------------------------%
% END pst-tools.pro

%%EndProcSet
%%BeginProcSet: pst-dots.pro 0 0
% $Id: pst-dots.pro 801 2013-07-09 18:10:41Z herbert $
%
%% PostScript prologue for pstricks.tex.
%% Version 2.02,  2009/06/16
%%
%% For distribution, see pstricks.tex.
%%
%% Timothy Van Zandt <tvz@Princeton.EDU>
%%
%% This program can be redistributed and/or modified under the terms
%% of the LaTeX Project Public License Distributed from CTAN archives
%% in directory macros/latex/base/lppl.txt.
%%
%% Modified by Etienne Riga  - Dec. 16, 1999
%% Modified by Etienne Riga  - 2005/01/01 (er)
%% to add /Diamond, /SolidDiamond and /BoldDiamond
%% Modified by Herbert Voss (hv) - 2008/04/17 
%
10 dict dup begin			% hold local
  /FontType 3 def
  /FontMatrix [.001 0 0 .001 0 0] def
%  /FontBBox [-571.5 -742.5 571.5 742.5] def % changed to next line 20060616 hv
  /FontBBox [-1000 -1000 1000 1000] def  % See end of file in /BuildGlyph
  /Encoding 256 array def
  0 1 255 {Encoding exch /.notdef put} for % fill the array with /.notdef
  Encoding				   % replace with given dot names
    dup (b) 0 get /Bullet put		   % get the numerical position of b in ASCII
%					   % and save /Bullet at this place in Encoding 
    dup (c) 0 get /Circle put
    dup (C) 0 get /BoldCircle put	% 67
    dup (u) 0 get /SolidTriangle put
    dup (t) 0 get /Triangle put
    dup (T) 0 get /BoldTriangle put
    dup (r) 0 get /SolidSquare put
    dup (s) 0 get /Square put
    dup (S) 0 get /BoldSquare put
    dup (q) 0 get /SolidPentagon put
    dup (p) 0 get /Pentagon put
    dup (P) 0 get /BoldPentagon put
%%%		  
    dup (k) 0 get /Asterisk put
    dup (K) 0 get /BoldAsterisk put
    dup (J) 0 get /SolidAsterisk put
    dup (h) 0 get /Hexagon put
    dup (H) 0 get /BoldHexagon put
    dup (G) 0 get /SolidHexagon put
    dup (f) 0 get /Octogon put		% 2008-04-18 hv
    dup (F) 0 get /BoldOctogon put	% 2008-04-18 hv
    dup (g) 0 get /SolidOctogon put	% 2008-04-18 hv
    dup (a) 0 get /Add put
    dup (A) 0 get /BoldAdd put 		% 65
    dup (x) 0 get /Mul put
    dup (X) 0 get /BoldMul put
    dup (m) 0 get /Oplus put
    dup (M) 0 get /BOplus put
    dup (e) 0 get /SolidOplus put
    dup (n) 0 get /Otimes put
    dup (N) 0 get /BOtimes put
    dup (E) 0 get /SolidOtimes put
    dup (i) 0 get /Bar put
    dup (I) 0 get /BoldBar put
    dup (l) 0 get /SolidDiamond put
    dup (d) 0 get /Diamond put
        (D) 0 get /BoldDiamond put
%%%  
/CharProcs 47 dict def
CharProcs begin
  /CirclePath {0 0 500 0 360 arc closepath} def
  /Bullet {CirclePath fill} def
  /Circle {CirclePath .9 .9 scale CirclePath eofill} def
  /BoldCircle {CirclePath .8 .8 scale CirclePath eofill} def
  /TrianglePath {0 660 moveto -571.5 -330 lineto 571.5 -330 lineto closepath} def
  /SolidTriangle {TrianglePath fill} def
  /Triangle {TrianglePath .85 .85 scale TrianglePath eofill} def
  /BoldTriangle {TrianglePath .7 .7 scale TrianglePath eofill} def
  /SquarePath {-450 450 moveto 450 450 lineto 450 -450 lineto -450 -450 lineto closepath} def
  /SolidSquare {SquarePath fill} def
  /Square {SquarePath .89 .89 scale SquarePath eofill} def
  /BoldSquare {SquarePath .78 .78 scale SquarePath eofill} def
  /PentagonPath {
    -337.8 -465 moveto 337.8 -465 lineto 546.6 177.6 lineto
    0 574.7 lineto -546.6 177.6 lineto closepath
  } def
  /SolidPentagon {PentagonPath fill} def
  /Pentagon {PentagonPath .89 .89 scale PentagonPath eofill} def
  /BoldPentagon {PentagonPath .78 .78 scale PentagonPath eofill} def
%-------------- hv begin 2004/07/25   from: er 2003/03/24
  /HexagonPath {
    0 550 moveto -476 275 lineto -476 -275 lineto
    0 -550 lineto 476 -275 lineto 476 275 lineto closepath
  } def
  /SolidHexagon {HexagonPath fill} def
  /Hexagon {HexagonPath .89 .89 scale HexagonPath eofill} def
  /BoldHexagon {HexagonPath .79 .79 scale HexagonPath eofill} def
%					2008-04-18 hv
  /OctogonPath { 
     550 dup 22.5 tan mul dup neg dup add /xMove exch def 
     exch moveto 7 { xMove 0 rlineto 45 rotate } repeat closepath } def 
  /SolidOctogon { OctogonPath fill                             } def
  /Octogon {      OctogonPath .89 .89 scale OctogonPath eofill } def
  /BoldOctogon {  OctogonPath .79 .79 scale OctogonPath eofill } def
%
  /AsteriskPath {
    20 0 moveto 10 250 180 500 0 500 curveto
    -180 500 -10 250 -20 0 curveto closepath
  } def
  /Asterisk {
    AsteriskPath 60 rotate AsteriskPath 60 rotate AsteriskPath
    60 rotate AsteriskPath 60 rotate AsteriskPath 60 rotate AsteriskPath fill
  } def
%
  /Basterp {50 250 220 500 0 500 curveto -220 500 -50 250 -50 30 cos 100 mul curveto} def
  /BoldAsteriskPath {
    50 30 cos 100 mul moveto  Basterp
    60 rotate Basterp 60 rotate Basterp
    60 rotate Basterp 60 rotate Basterp
    60 rotate Basterp closepath
  } def
  /BoldAsterisk {BoldAsteriskPath fill} def
  /SolidAsterisk {CirclePath .9 .9 scale BoldAsteriskPath eofill} def
  /CrossPath {
    40 550 moveto -40 550 lineto -40 40 lineto -550 40 lineto
    -550 -40 lineto -40 -40 lineto -40 -550 lineto 40 -550 lineto 
    40 -40 lineto 550 -40 lineto 550 40 lineto 40 40 lineto closepath
  } def
  /BoldCrossPath {80 550 moveto -80 550 lineto -80 80 lineto -550 80 lineto
    -550 -80 lineto -80 -80 lineto -80 -550 lineto 80 -550 lineto 
    80 -80 lineto 550 -80 lineto 550 80 lineto 80 80 lineto closepath
  } def
  /Add {CrossPath fill} def
  /Mul {45 rotate CrossPath fill} def
  /BoldAdd {BoldCrossPath fill} def
  /BoldMul {45 rotate BoldCrossPath fill} def
  /Oplus {CirclePath .9 .9 scale CirclePath eofill .775 .775 scale CrossPath fill } def 
  /SolidOplus {CirclePath .775 .775 scale BoldCrossPath eofill} def 
  /BOplus {CirclePath .8 .8 scale CirclePath eofill .775 .775 scale BoldCrossPath fill} def 
  /Otimes {CirclePath .9 .9 scale CirclePath eofill 45 rotate .775 .775 scale CrossPath fill} def 
  /BOtimes {CirclePath .8 .8 scale CirclePath eofill 45 rotate .775 .775 scale BoldCrossPath fill } def 
  /SolidOtimes {CirclePath 45 rotate .775 .775 scale BoldCrossPath eofill} def 
  /BarPath {40 660 moveto -40 660 lineto -40 -660 lineto 40 -660 lineto closepath} def
  /Bar {BarPath fill} def
  /BoldBarPath {80 660 moveto -80 660 lineto -80 -660 lineto 80 -660 lineto closepath} def
  /BoldBar {BoldBarPath fill} def
  /DiamondPath {0 742.5 moveto -428.5 0 lineto 0 -742.5 lineto 428.5 0 lineto closepath} def
  /SolidDiamond {DiamondPath fill} def
  /Diamond {DiamondPath .865 .865 scale DiamondPath eofill} def
  /BoldDiamond {DiamondPath .73 .73 scale DiamondPath eofill} def
%%%
  /.notdef { } def
end
%
/BuildGlyph {
  exch
  begin 		
%  Metrics 1 index get exec 0
    0 0
%      BBoxes 3 index get exec
    -1000 -1000 1000 1000
%     -571.5 -742.5 571.5 742.5
    setcachedevice
    CharProcs begin load exec end
  end
} def
%
/BuildChar {
  1 index /Encoding get exch get
  1 index /BuildGlyph get exec
} bind def
%
end
/PSTricksDotFont exch definefont pop
%
%% end

%%EndProcSet
%%BeginProcSet: pst-node.pro 0 0
% $Id: pst-node.pro 40 2014-07-25 06:46:27Z herbert $
%%
%% PostScript prologue for pst-node.tex.
%% Version 1.15, 2014/01/27.
%%
%% This program can be redistributed and/or modified under the terms
%% of the LaTeX Project Public License Distributed from CTAN archives
%% in directory macros/latex/base/lppl.txt.
%
%%%%  EMPTY lines are not aload!!! Problem with pst-eps -> \par
%
%
tx@Dict begin 			% from main pstricks dict
 /T /translate load def 
 /CP /currentpoint load def 
% /startGlobal { true setglobal globaldict begin } bind def
% /endGlobal { end false setglobal } bind def
end
/tx@NodeDict 400 dict def tx@NodeDict begin
/NewNode { % on stack: { x y } boolean N@name type InitXnode 
  gsave 
  NodeScale                     % a bugfix for xelatex, it's empty for dvips
  /next exch def 		% { x y } boolean N@name type  
  dict dup 			% { x y } boolean N@name dict dict
  3 1 roll def 			% { x y } boolean dict N@name dict def
  exch { dup 3 1 roll def } if  % { x y } dict boolean
  begin 			% { x y } dict begin
  tx@Dict begin 
    STV CP T exec 		% set scaling
  end 
  /NodeMtrx CM def 		% save CM
  next 				% InitXNode
  end
  grestore 
} def
%
/InitPnode { 
  /Y ED /X ED 
  /NodePos { NodeSep Cos mul NodeSep Sin mul } def
} def
%
/InitCnode { 
  /r ED /Y ED /X ED 
  /NodePos { NodeSep r add dup Cos mul exch Sin mul } def 
} def
%
/GetRnodePos { 
  Cos 0 gt { /dx r NodeSep add def } { /dx l NodeSep sub def } ifelse 
  Sin 0 gt { /dy u NodeSep add def } { /dy d NodeSep sub def } ifelse 
  dx Sin mul abs dy 
  Cos mul abs gt { dy Cos mul Sin div dy } { dx dup Sin mul Cos Div } ifelse 
} def
%
/InitRnode { 
  /Y ED /X ED X sub /r ED /l X neg def Y add neg /d ED Y sub /u ED 
  /NodePos { GetRnodePos } def 
} def
%
/DiaNodePos { 
  w h mul w Sin mul abs h Cos mul abs add Div NodeSep add dup
  Cos mul exch Sin mul 
} def
%
/TriNodePos { 
  Sin s lt 
    { d NodeSep sub dup Cos mul Sin Div exch } 
    { w h mul w Sin mul h Cos abs mul add Div 
      NodeSep add dup Cos mul exch Sin mul 
    } ifelse 
} def
%
/InitTriNode { 
  sub 2 div exch 
  2 div exch 
  2 copy T 
  2 copy 4 index index /d ED 
  pop pop pop pop 
  -90 mul rotate 
  /NodeMtrx CM def 
  /X 0 def /Y 0 def 
  d sub abs neg /d ED 
  d add /h ED 
  2 div h mul h d sub Div /w ED 
  /s d w Atan sin def 
  /NodePos { TriNodePos } def 
} def
%
/OvalNodePos { 
  /ww w NodeSep add def 
  /hh h NodeSep add def 
  Sin ww mul Cos hh mul Atan dup cos ww mul exch sin hh mul 
} def
%
/GetCenter { begin X Y NodeMtrx transform CM itransform end } def
%
/XYPos { 
  dup sin exch cos Do 
  /Cos ED /Sin ED /Dist ED 
  Cos 0 gt 
    { Dist Dist Sin mul Cos div }
    { Cos 0 lt 
      { Dist neg Dist Sin mul Cos div neg }
      { 0 Dist Sin mul } ifelse 
    } ifelse 
  Do 
} def
%
/GetEdge {
  dup 0 eq 
    { pop begin 1 0 NodeMtrx dtransform 
      CM idtransform 
      exch atan sub 
      dup 
      sin /Sin ED 
      cos /Cos ED 
      /NodeSep ED 
      NodePos NodeMtrx dtransform CM idtransform end }
    { 1 eq {{exch}} {{}} ifelse /Do ED pop XYPos } ifelse 
} def
%
/AddOffset { 
  1 index 0 eq 
    { pop pop } 
    { 2 copy 5 2 roll cos mul add 4 1 roll sin mul sub exch } ifelse 
} def
%
/GetEdgeA { 
  NodeSepA AngleA NodeA NodeSepTypeA GetEdge 
  OffsetA AngleA AddOffset 
  yA add /yA1 ED 
  xA add /xA1 ED 
} def
%
/GetEdgeB { 
  NodeSepB AngleB NodeB NodeSepTypeB GetEdge 
  OffsetB AngleB AddOffset 
  yB add /yB1 ED 
  xB add /xB1 ED 
} def
%
/GetArmA { 
  ArmTypeA 0 eq 
    { /xA2 ArmA AngleA cos mul xA1 add def 
      /yA2 ArmA AngleA sin mul yA1 add def } 
    { ArmTypeA 1 eq {{exch}} {{}} ifelse 
      /Do ED 
      ArmA AngleA XYPos OffsetA AngleA AddOffset 
      yA add /yA2 ED 
      xA add /xA2 ED } ifelse 
} def
%
/GetArmB { 
  ArmTypeB 0 eq 
    { /xB2 ArmB AngleB cos mul xB1 add def 
      /yB2 ArmB AngleB sin mul yB1 add def } 
    { ArmTypeB 1 eq {{exch}} {{}} ifelse 
      /Do ED
      ArmB AngleB XYPos OffsetB AngleB AddOffset 
      yB add /yB2 ED 
      xB add /xB2 ED } ifelse 
} def
%
/InitNC { 
  /b ED /a ED % second and first node
  /NodeSepTypeB ED /NodeSepTypeA ED 
  /NodeSepB ED /NodeSepA ED 
  /OffsetB ED /OffsetA ED 
  tx@NodeDict a known tx@NodeDict b known and dup { 
    /NodeA a load def 
    /NodeB b load def 
    NodeA GetCenter /yA ED /xA ED 
    NodeB GetCenter /yB ED /xB ED } if 
} def
%
/LPutLine { 
  4 copy 
  3 -1 roll sub neg 3 1 roll sub Atan /NAngle ED 
  1 t sub mul 
  3 1 roll 1 t sub mul 
  4 1 roll t mul add /Y ED 
  t mul add /X ED 
} def
%
/LPutLines { 
  mark LPutVar counttomark 2 div 1 sub /n ED 
%  t floor dup n gt 
  t floor dup n ge 		% to allow npos<= hv 2008-08-14
  { pop n 1 sub /t 1 def } { dup t sub neg /t ED } ifelse 
  cvi 2 mul { pop } repeat 
  LPutLine 
  cleartomark 
} def
%
/BezierMidpoint { 
  /y3 ED /x3 ED /y2 ED /x2 ED /y1 ED /x1 ED /y0 ED /x0 ED /t ED 
  /cx x1 x0 sub 3 mul def 
  /cy y1 y0 sub 3 mul def 
  /bx x2 x1 sub 3 mul cx sub def 
  /by y2 y1 sub 3 mul cy sub def 
  /ax x3 x0 sub cx sub bx sub def 
  /ay y3 y0 sub cy sub by sub def 
  ax t 3 exp mul bx t t mul mul add 
  cx t mul add x0 add ay t 3 exp mul 
  by t t mul mul add cy t mul add
  y0 add 3 ay t t mul mul mul 2 
  by t mul mul add cy add 3 ax t t mul mul mul 
  2 bx t mul mul add cx add atan /NAngle ED 
  /Y ED /X ED 
} def
%
/HPosBegin { yB yA ge { /t 1 t sub def } if /Y yB yA sub t mul yA add def
} def
%
/HPosEnd { /X Y yyA sub yyB yyA sub Div xxB xxA sub mul xxA add def
           /NAngle yyB yyA sub xxB xxA sub Atan def 
} def
/HPutLine { HPosBegin /yyA ED /xxA ED /yyB ED /xxB ED HPosEnd  } def
%
/HPutLines { HPosBegin yB yA ge 
  { /check { le } def } { /check { ge } def } ifelse 
  /xxA xA def 
  /yyA yA def 
  mark xB yB LPutVar 
    { dup Y check { exit } { /yyA ED /xxA ED } ifelse } 
  loop 
  /yyB ED /xxB ED cleartomark HPosEnd 
} def
%
/VPosBegin { 
  xB xA lt { /t 1 t sub def } if /X xB xA sub t mul xA add def
} def
%
/VPosEnd { /Y X xxA sub xxB xxA sub Div yyB yyA sub mul yyA add def
/NAngle yyB yyA sub xxB xxA sub Atan def } def
/VPutLine { VPosBegin /yyA ED /xxA ED /yyB ED /xxB ED VPosEnd  } def
/VPutLines { VPosBegin xB xA ge { /check { le } def } { /check { ge } def
} ifelse /xxA xA def /yyA yA def mark xB yB LPutVar { 1 index X check {
exit } { /yyA ED /xxA ED } ifelse } loop /yyB ED /xxB ED cleartomark
VPosEnd  } def
/HPutCurve { gsave newpath /SaveLPutVar /LPutVar load def LPutVar 8 -2
roll moveto curveto flattenpath /LPutVar [ {} {} {} {} pathforall ] cvx
def grestore exec /LPutVar /SaveLPutVar load def 
} def
%
/NCCoor { 
  /AngleA yB yA sub xB xA sub Atan def 
  /AngleB AngleA 180 add def
  GetEdgeA GetEdgeB 
  /LPutVar [ xB1 yB1 xA1 yA1 ] cvx def 
  /LPutPos { LPutVar LPutLine } def 
  /HPutPos { LPutVar HPutLine } def 
  /VPutPos { LPutVar VPutLine } def 
  LPutVar 
} def
%
/NCLine { 
  NCCoor 
  tx@Dict begin 
  ArrowA CP 4 2 roll 
  ArrowB 
  lineto pop pop
  end 
} def
%
/NCLines { 
  false NArray 
  n 0 eq 
    { NCLine } 
    { 2 copy yA sub exch xA sub Atan /AngleA ED 
      n 2 mul dup index exch index yB sub exch xB sub 
      Atan /AngleB ED 
      GetEdgeA GetEdgeB 
      /LPutVar [ xB1 yB1 n 2 mul 4 add 4 roll xA1 yA1 ] cvx def 
      mark LPutVar 
      tx@Dict begin false Line end 
      /LPutPos { LPutLines } def 
      /HPutPos { HPutLines } def 
      /VPutPos { VPutLines } def 
    } ifelse 
} def
%
/NCCurve { 
  GetEdgeA 
  GetEdgeB 
  xA1 xB1 sub yA1 yB1 sub Pyth 2 div dup 3 -1
roll mul /ArmA ED mul /ArmB ED /ArmTypeA 0 def /ArmTypeB 0 def GetArmA
GetArmB xA2 yA2 xA1 yA1 tx@Dict begin ArrowA end xB2 yB2 xB1 yB1 tx@Dict
begin ArrowB end curveto /LPutVar [ xA1 yA1 xA2 yA2 xB2 yB2 xB1 yB1 ]
cvx def /LPutPos { t LPutVar BezierMidpoint } def /HPutPos { { HPutLines
} HPutCurve } def /VPutPos { { VPutLines } HPutCurve } def } def
%
/NCAngles { 
  GetEdgeA GetEdgeB GetArmA GetArmB 
  /mtrx AngleA matrix rotate def 
  xA2 yA2 mtrx transform pop 
  xB2 yB2 mtrx transform exch pop 
  mtrx itransform 
  /y0 ED /x0 ED 
  mark ArmB 0 ne { xB1 yB1 } if 
  xB2 yB2 x0 y0 xA2 yA2 
  ArmA 0 ne { xA1 yA1 } if 
  tx@Dict begin false Line end 
  /LPutVar [ xB1 yB1 xB2 yB2 x0 y0 xA2 yA2 xA1 yA1 ] cvx def 
  /LPutPos { LPutLines } def
  /HPutPos { HPutLines } def 
  /VPutPos { VPutLines } def } def
%
/NCAngle { 
  GetEdgeA GetEdgeB GetArmB 
  /mtrx AngleA matrix rotate def 
  xB2 yB2 mtrx itransform pop xA1 yA1 mtrx itransform exch pop mtrx transform
  /y0 ED /x0 ED 
  mark 
  ArmB 0 ne { xB1 yB1 } if 
  xB2 yB2 x0 y0 xA1 yA1
  tx@Dict begin false Line end 
  /LPutVar [ xB1 yB1 xB2 yB2 x0 y0 xA1 yA1 ] cvx def 
  /LPutPos { LPutLines } def 
  /HPutPos { HPutLines } def 
  /VPutPos { VPutLines } def 
} def
%
/NCBar { 
  GetEdgeA GetEdgeB GetArmA GetArmB 
  /mtrx AngleA matrix rotate def
  xA2 yA2 mtrx itransform pop 
  xB2 yB2 mtrx itransform pop 
  sub dup 0 mtrx transform 
  3 -1 roll 0 gt 
    { /yB2 exch yB2 add def /xB2 exch xB2 add def }
    { /yA2 exch neg yA2 add def /xA2 exch neg xA2 add def } ifelse 
  mark 
  ArmB 0 ne { xB1 yB1 } if 
  xB2 yB2 xA2 yA2 ArmA 0 ne { xA1 yA1 } if 
  tx@Dict begin false Line end 
  /LPutVar [ xB1 yB1 xB2 yB2 xA2 yA2 xA1 yA1 ] cvx def 
  /LPutPos { LPutLines } def 
  /HPutPos { HPutLines } def 
  /VPutPos { VPutLines } def 
} def
%
/NCDiag { 
  /lineAngle ED
  GetEdgeA GetEdgeB GetArmA GetArmB mark
  lineAngle abs 0 gt {
    /xTemp xA2 10 add def
    /yTemp yA2 lineAngle dup sin exch cos div 10 mul add def
    /dY1 yTemp yA2 sub def
    /dX1 xTemp xA2 sub def
    /dY2 yB2 yB1 sub def
    /dX2 xB2 xB1 sub def
    dX1 abs 0.01 lt {
      /m2 dY2 dX2 div def
      /xB2 xA2 def
      /yB2 xA2 xB1 sub m2 mul yB1 add def
    }{
      dX2 abs 0.01 lt {
        /m1 dY1 dX1 div def
        /xB2 xB1 def
        /yB2 xB1 xA2 sub m1 mul yA2 add def
      }{%
        /m1 dY1 dX1 div def
        /m2 dY2 dX2 div def
        /xB2 m1 xA2 mul m2 xB1 mul sub yA2 sub yB1 add m1 m2 sub div def
        /yB2 xB2 xA2 sub m1 mul yA2 add def
      } ifelse
    } ifelse
  } if
  ArmB 0 ne { xB1 yB1 } if
  xB2 yB2 xA2 yA2 
  ArmA 0 ne { xA1 yA1 } if 
  tx@Dict begin false Line end
  /LPutVar [ xB1 yB1 xB2 yB2 xA2 yA2 xA1 yA1 ] cvx def 
  /LPutPos { LPutLines } def 
  /HPutPos { HPutLines } def 
  /VPutPos { VPutLines } def 
%
%  GetEdgeA GetEdgeB GetArmA GetArmB mark 
%  ArmB 0 ne { xB1 yB1 } if
%  xB2 yB2 xA2 yA2 
%  ArmA 0 ne { xA1 yA1 } if 
%  tx@Dict begin false Line end
%  /LPutVar [ xB1 yB1 xB2 yB2 xA2 yA2 xA1 yA1 ] cvx def 
%  /LPutPos { LPutLines } def 
%  /HPutPos { HPutLines } def 
%  /VPutPos { VPutLines } def 
} def
%
/NCDiagg { 
  /lineAngle ED
  GetEdgeA GetArmA 
  lineAngle abs 0 gt 
    { lineAngle }
    { yB yA2 sub xB xA2 sub Atan 180 add } ifelse 
  /AngleB ED
  GetEdgeB mark
  lineAngle abs 0 gt {
    /dY2 yA2 yA1 sub def
    /dX2 xA2 xA1 sub def
    lineAngle abs 90 eq {
      /m2 dY2 dX2 div def
      /yA2 xB xA2 sub m2 mul yA2 add def
      /xA2 xB def
    }{
      /m1 lineAngle dup sin exch cos div def % tan alpha
      dX2 abs 0.01 lt {
        /yA2 xA1 xB sub m1 mul yB add def
        /xA2 xA1 def
      }{%
        /m2 dY2 dX2 div def
        /xA2 m1 xB mul m2 xA2 mul sub yA2 add yB sub m1 m2 sub div def
        /yA2 xA2 xB sub m1 mul yB add def
      } ifelse
    } ifelse
  } if
  xB1 yB1 xA2 yA2
  ArmA 0 ne { xA1 yA1 } if
  tx@Dict begin false Line end
  /LPutVar [ xB1 yB1 xA2 yA2 xA1 yA1 ] cvx def
  /LPutPos { LPutLines } def
  /HPutPos { HPutLines } def
  /VPutPos { VPutLines } def
%
%  GetEdgeA GetArmA 
%  yB yA2 sub xB xA2 sub Atan 180 add /AngleB ED
%  GetEdgeB 
%  mark 
%  xB1 yB1 xA2 yA2 
%  ArmA 0 ne { xA1 yA1 } if 
%  tx@Dict begin false Line end 
%  /LPutVar [ xB1 yB1 xA2 yA2 xA1 yA1 ] cvx def 
%  /LPutPos { LPutLines } def 
%  /HPutPos { HPutLines } def 
%  /VPutPos { VPutLines } def 
} def
%
/NCLoop { 
  GetEdgeA GetEdgeB GetArmA GetArmB 
  /mtrx AngleA matrix rotate def 
  xA2 yA2 mtrx transform loopsize add /yA3 ED /xA3 ED 
  /xB3 xB2 yB2 mtrx transform pop def 
  xB3 yA3 mtrx itransform /yB3 ED /xB3 ED 
  xA3 yA3 mtrx itransform /yA3 ED /xA3 ED 
  mark ArmB 0 ne { xB1 yB1 } if 
  xB2 yB2 xB3 yB3 xA3 yA3 xA2 yA2 ArmA 0 ne { xA1 yA1 } if 
  tx@Dict begin false Line end 
  /LPutVar [ xB1 yB1 xB2 yB2 xB3 yB3 xA3 yA3 xA2 yA2 xA1 yA1 ] cvx def 
  /LPutPos { LPutLines } def 
  /HPutPos { HPutLines } def 
  /VPutPos { VPutLines } def 
} def
%
% DG/SR modification begin - May 9, 1997 - Patch 1
%/NCCircle { 0 0 NodesepA nodeA \tx@GetEdge pop xA sub 2 div dup 2 exp r
%r mul sub abs sqrt atan 2 mul /a ED r AngleA 90 add PtoC yA add exch xA add
%exch 2 copy /LPutVar [ 4 2 roll r AngleA ] cvx def /LPutPos { LPutVar t 360
%mul add dup 5 1 roll 90 sub \tx@PtoC 3 -1 roll add /Y ED add /X ED /NAngle ED
%
/NCCircle { 
  NodeSepA 0 NodeA 0 GetEdge pop 
  2 div dup 2 exp r r mul sub abs sqrt 
  atan 2 mul /a ED 
  r AngleA 90 add PtoC yA add exch xA add 
  exch 2 copy 
  /LPutVar [ 4 2 roll r AngleA ] cvx def 
  /LPutPos { 
    LPutVar t 360 mul add dup 5 1 roll 90 sub PtoC 
    3 -1 roll add 
    /Y ED add /X ED /NAngle ED
% DG/SR modification end
  } def 
  /HPutPos { LPutPos } def 
  /VPutPos { LPutPos } def 
  r AngleA 90 sub a add AngleA 270 add a sub 
  tx@Dict begin 
  /angleB ED /angleA ED /r ED 
  /c 57.2957 r Div def 
  /y ED /x ED 
} def
%
/NCBox { 
  /d ED /h ED 
  /AngleB yB yA sub xB xA sub Atan def 
  /AngleA AngleB 180 add def 
  GetEdgeA GetEdgeB 
  /dx d AngleB sin mul def 
  /dy d AngleB cos mul neg def 
  /hx h AngleB sin mul neg def 
  /hy h AngleB cos mul def 
  /LPutVar [ 
    xA1 hx add yA1 hy add xB1 hx add yB1 hy add 
    xB1 dx add yB1 dy add xA1 dx add yA1 dy add ] cvx def 
  /LPutPos { LPutLines } def 
  /HPutPos { xB yB xA yA LPutLine } def 
  /VPutPos { HPutPos } def 
  mark 
  LPutVar tx@Dict begin false Polygon end 
} def
%
/NCArcBox { 
  /l ED neg /d ED /h ED /a ED 
  /AngleA yB yA sub xB xA sub Atan def 
  /AngleB AngleA 180 add def 
  /tA AngleA a sub 90 add def 
  /tB tA a 2 mul add def 
  /r xB xA sub tA cos tB cos sub Div dup 0 eq { pop 1 } if def
  /x0 xA r tA cos mul add def 
  /y0 yA r tA sin mul add def 
  /c 57.2958 r div def 
  /AngleA AngleA a sub 180 add def 
  /AngleB AngleB a add 180 add def
  GetEdgeA GetEdgeB 
  /AngleA tA 180 add yA yA1 sub xA xA1 sub Pyth c mul sub def 
  /AngleB tB 180 add yB yB1 sub xB xB1 sub Pyth c mul add def 
  l 0 eq { 
    x0 y0 r h add AngleA AngleB arc x0 y0 r d add AngleB AngleA arcn 
  }{ 
    x0 y0 translate 
    /tA AngleA l c mul add def 
    /tB AngleB l c mul sub def
    0 0 r h add tA tB arc r h add 
    AngleB PtoC r d add 
    AngleB PtoC 2 copy 
    6 2 roll l arcto 4 { pop } repeat 
    r d add tB PtoC l arcto 4 { pop } repeat 
    0 0 r d add tB tA arcn r d add 
    AngleA PtoC r h add 
    AngleA PtoC 2 copy 6 2 roll 
    l arcto 4 { pop } repeat 
    r h add tA PtoC l arcto 4 { pop } repeat 
  } ifelse 
  closepath 
  /LPutVar [ x0 y0 r AngleA AngleB h d ] cvx def 
  /LPutPos { 
    LPutVar /d ED /h ED 
    /AngleB ED /AngleA ED 
    /r ED /y0 ED /x0 ED 
    t 1 le { 
      r h add AngleA 1 t sub mul AngleB t mul add dup 90 add /NAngle ED PtoC 
    }{t 2 lt { 
        /NAngle AngleB 180 add def r 2 t sub 
        h mul t 1 sub d mul add add AngleB PtoC 
      }{ 
        t 3 lt { 
          r d add AngleB 3 t sub mul AngleA 2 t sub
          mul add dup 90 sub /NAngle ED PtoC 
        }{ 
          /NAngle AngleA 180 add def 
          r 4 t sub d mul t 3 sub h mul add add AngleA PtoC 
        } ifelse 
      } ifelse 
    } ifelse
    y0 add /Y ED x0 add /X ED 
  } def 
  /HPutPos { LPutPos } def 
  /VPutPos { LPutPos } def 
} def
%
/Tfan { /AngleA yB yA sub xB xA sub Atan def GetEdgeA w xA1 xB sub yA1 yB
sub Pyth Pyth w Div CLW 2 div mul 2 div dup AngleA sin mul yA1 add /yA1
ED AngleA cos mul xA1 add /xA1 ED /LPutVar [ xA1 yA1 m { xB w add yB xB
w sub yB } { xB yB w sub xB yB w add } ifelse xA1 yA1 ] cvx def /LPutPos
{ LPutLines } def /VPutPos@ { LPutVar flag { 8 4 roll pop pop pop pop }
{ pop pop pop pop 4 2 roll } ifelse } def /VPutPos { VPutPos@ VPutLine }
def /HPutPos { VPutPos@ HPutLine } def mark LPutVar tx@Dict begin
/ArrowA { moveto } def /ArrowB { } def false Line closepath end } def
%
/LPutCoor { 
  NAngle 
  tx@Dict begin /NAngle ED end 
  gsave 
  CM STV 
  CP Y sub neg exch X sub neg exch moveto 
  setmatrix CP 
  grestore 
} def
%
/LPut { 
  tx@NodeDict /LPutPos known 
    { LPutPos } { CP /Y ED /X ED /NAngle 0 def } ifelse 
  LPutCoor  
} def
%
/HPutAdjust { 
  Sin Cos mul 0 eq 
    { 0 } 
    { d Cos mul Sin div flag not { neg } if 
      h Cos mul Sin div flag { neg } if 
      2 copy gt { pop } { exch pop } ifelse 
    } ifelse 
  s add flag { r add neg }{ l add } ifelse 
  X add /X ED 
} def
%
/VPutAdjust { 
  Sin Cos mul 
  0 eq 
    { 0 }
    { l Sin mul Cos div flag { neg } if
      r Sin mul Cos div flag not { neg } if 
      2 copy gt { pop } { exch pop } ifelse 
    } ifelse 
  s add flag { d add } { h add neg } ifelse 
  Y add /Y ED 
} def
%
%
end
%
% END pst-node.pro

%%EndProcSet
%%BeginProcSet: pst-grad.pro 0 0
%!
% PostScript prologue for pst-grad.tex.
% Version 1.05, 2006/11/04 
% prepared by Herbert Voss
% For copying restrictions, see pstricks.tex.
%
% For the PSTricks gradient fillstyle.%
% Based on some EPS files by leeweyr!bill@nuchat.sccsi.com (W. R. Lee).%
% Syntax:% D.G. modification begin - Apr.  9, %1998
%%%%%% R0 G0 B0 R1 G1 B1 NumLines MidPoint Angle GradientFill
%   ifGradientCircle GradientScale %GradientPosX GradientPosY
%     R0 G0 B0 R1 G1 B1 NumLines MidPoint %Angle GradientFill
% D.G. modification end
%
/tx@GradientDict 40 dict def
tx@GradientDict begin
/GradientFill {
 /ifCMYK exch def   % do we have rgb or cmyk? hv 1.06
 rotate
 /MidPoint ED
 /NumLines ED
 ifCMYK {
    /LastBlack ED	% 1.06
    /LastYellow ED	% 1.06
    /LastMagenta ED	% 1.06
    /LastCyan ED	% 1.06
    /FirstBlack ED	% 1.06
    /FirstYellow ED	% 1.06
    /FirstMagenta ED	% 1.06
    /FirstCyan ED	% 1.06
 }{ /LastBlue ED
    /LastGreen ED
    /LastRed ED
    /FirstBlue ED
    /FirstGreen ED
    /FirstRed ED
 } ifelse
 /GradientPosY ED
 /GradientPosX ED
 /GradientScale ED
 /ifGradientCircle ED
 % This avoids gaps due to rounding errors:
 clip
 pathbbox           %leave llx,lly,urx,ury on stack
 4 copy /ury ED /urx ED /lly ED /llx ED
 /y ED /x ED
 ifGradientCircle
   { 0 GradientPosX eq { 0 GradientPosX eq {2 copy translate} if } if }
   {2 copy translate} ifelse
 y sub neg /y ED
 x sub neg /x ED  % This avoids gaps due to rounding errors:
 ifCMYK {				% 1.06
    LastCyan FirstCyan add 2 div	% 1.06
    LastMagenta FirstMagenta add 2 div	% 1.06
    LastYellow FirstYellow add 2 div	% 1.06
    LastBlack FirstBlack add 2 div	% 1.06
    setcmykcolor			% 1.06
  }{
    LastRed FirstRed add 2 div
    LastGreen FirstGreen add 2 div
    LastBlue FirstBlue add 2 div
    setrgbcolor
  } ifelse
 ifGradientCircle
   { /YSizePerLine y NumLines div def
     /CurrentY y 2 div def
     /MidLine NumLines 2 div 1 MidPoint sub mul abs cvi def
   }{
     fill
     /YSizePerLine y NumLines div def
     /CurrentY 0 def
     /MidLine NumLines 1 MidPoint sub mul abs cvi def
   } ifelse
 MidLine NumLines 2 sub gt 
   { /MidLine NumLines def }
   { MidLine 2 lt { /MidLine 0 def } if } ifelse
 MidLine 0 gt {
  ifCMYK {
    /Cyan FirstCyan def
    /Magenta FirstMagenta def
    /Yellow FirstYellow def
    /Black FirstBlack def
    /CyanIncrement LastCyan FirstCyan sub MidLine 1 sub div def
    /MagentaIncrement LastMagenta FirstMagenta sub MidLine 1 sub div def
    /YellowIncrement LastYellow FirstYellow sub MidLine 1 sub div def
    /BlackIncrement LastBlack FirstBlack sub MidLine 1 sub div def
  }{
    /Red FirstRed def
    /Green FirstGreen def
    /Blue FirstBlue def
    /RedIncrement LastRed FirstRed sub MidLine 1 sub div def
    /GreenIncrement LastGreen FirstGreen sub MidLine 1 sub div def
    /BlueIncrement LastBlue FirstBlue sub MidLine 1 sub div def
  } ifelse
  MidLine { GradientLoop } repeat
 } if
 MidLine NumLines lt {
  ifCMYK {
    /Cyan LastCyan def
    /Magenta LastMagenta def
    /Yellow LastYellow def
    /Black LastBlack def
    /CyanIncrement FirstCyan LastCyan sub NumLines MidLine sub 1 sub div def
    /MagentaIncrement FirstMagenta LastMagenta sub NumLines MidLine sub 1 sub div def
    /YellowIncrement FirstYellow LastYellow sub NumLines MidLine sub 1 sub div def
    /BlackIncrement FirstBlack LastBlack sub NumLines MidLine sub 1 sub div def
  }{
    /Red LastRed def
    /Green LastGreen def
    /Blue LastBlue def
    /RedIncrement FirstRed LastRed sub NumLines MidLine sub 1 sub div def
    /GreenIncrement FirstGreen LastGreen sub NumLines MidLine sub 1 sub div def
    /BlueIncrement FirstBlue LastBlue sub NumLines MidLine sub 1 sub div def
  } ifelse
  NumLines MidLine sub { GradientLoop } repeat  
 } if
} def/GradientLoop {
% D.G. modification begin - Jul. 23, 1997 / Apr.  9, 1998
  ifGradientCircle
   {CurrentY 0 gt {
% The default center used is the center of the bounding box of the object
      0 GradientPosX eq        {0 GradientPosX eq
           {/GradientPosX urx llx sub 2 div def
            /GradientPosY ury lly sub 2 div def} if} if
      GradientPosX GradientPosY CurrentY GradientScale mul 0 360 arc
      ifCMYK { Cyan Magenta Yellow Black setcmykcolor }
           { Red Green Blue setrgbcolor } ifelse 
      fill
      /CurrentY CurrentY YSizePerLine sub def
      ifCMYK {
        /Cyan Cyan CyanIncrement add def
        /Magenta Magenta MagentaIncrement add def
        /Yellow Yellow YellowIncrement add def
        /Black Black BlackIncrement add def
      }{	
        /Blue Blue BlueIncrement add def
        /Green Green GreenIncrement add def
        /Red Red RedIncrement add def
      } ifelse
  } if }   { 0 CurrentY moveto    x 0 rlineto
    0 YSizePerLine rlineto    x neg 0 rlineto    closepath
      ifCMYK { Cyan Magenta Yellow Black setcmykcolor }
           { Red Green Blue setrgbcolor } ifelse 
      fill    
      /CurrentY CurrentY YSizePerLine add def
      ifCMYK {
        /Cyan Cyan CyanIncrement add def
        /Magenta Magenta MagentaIncrement add def
        /Yellow Yellow YellowIncrement add def
        /Black Black BlackIncrement add def
      }{	
        /Blue Blue BlueIncrement add def
        /Green Green GreenIncrement add def
        /Red Red RedIncrement add def
      } ifelse
      } ifelse% D.G. modification end
    }def
%
/GradientFillHSB { %	hv 2006-11-04
  rotate
  /MidPoint ED
  /NumLines ED
  /LastBrightness ED
  /LastSaturation ED
  /LastHue ED
  /FirstBrightness ED
  /FirstSaturation ED
  /FirstHue ED
  % This avoids gaps due to rounding errors:
  clip
  pathbbox           %leave llx,lly,urx,ury on stack
  /y ED /x ED
  2 copy translate
  y sub neg /y ED
  x sub neg /x ED
  % This avoids gaps due to rounding errors:
  LastHue FirstHue add 2 div
  LastSaturation FirstSaturation add 2 div
  LastBrightness FirstBrightness add 2 div
  sethsbcolor
  fill
  /YSizePerLine y NumLines div def
  /CurrentY 0 def
  /MidLine NumLines 1 MidPoint sub mul abs cvi def
  MidLine NumLines 2 sub gt
  { /MidLine NumLines def }
  { MidLine 2 lt { /MidLine 0 def } if }
  ifelse
  MidLine 0 gt
  {
    /Hue FirstHue def
    /Saturation FirstSaturation def
    /Brightness FirstBrightness def
    /HueIncrement LastHue FirstHue sub MidLine 1 sub div def
    /SaturationIncrement LastSaturation FirstSaturation sub MidLine 1 sub
                         div def
    /BrightnessIncrement LastBrightness FirstBrightness sub MidLine 1 sub
                         div def
    MidLine { GradientLoopHSB } repeat
  } if
  MidLine NumLines lt
  {
    /Hue LastHue def
    /Saturation LastSaturation def
    /Brightness LastBrightness def
    /HueIncrement FirstHue LastHue sub NumLines MidLine sub 1 sub div def
    /SaturationIncrement FirstSaturation LastSaturation sub
                         NumLines MidLine sub 1 sub div def
    /BrightnessIncrement FirstBrightness LastBrightness sub
                         NumLines MidLine sub 1 sub div def
    NumLines MidLine sub { GradientLoopHSB } repeat
  } if
} def
/GradientLoopHSB {
  0 CurrentY moveto
  x 0 rlineto
  0 YSizePerLine rlineto
  x neg 0 rlineto
  closepath
  Hue Saturation Brightness sethsbcolor fill
  /CurrentY CurrentY YSizePerLine add def
  /Brightness Brightness BrightnessIncrement add def
  /Saturation Saturation SaturationIncrement add def
  /Hue Hue HueIncrement add def
} def
%
end
%
% END pst-grad.pro

%%EndProcSet
%%BeginProcSet: 8r.enc 0 0
% File 8r.enc  TeX Base 1 Encoding  Revision 2.0  2002-10-30
%
% @@psencodingfile@{
%   author    = "S. Rahtz, P. MacKay, Alan Jeffrey, B. Horn, K. Berry,
%                W. Schmidt, P. Lehman",
%   version   = "2.0",
%   date      = "27nov06",
%   filename  = "8r.enc",
%   email     = "tex-fonts@@tug.org",
%   docstring = "This is the encoding vector for Type1 and TrueType
%                fonts to be used with TeX.  This file is part of the
%                PSNFSS bundle, version 9"
% @}
% 
% The idea is to have all the characters normally included in Type 1 fonts
% available for typesetting. This is effectively the characters in Adobe
% Standard encoding, ISO Latin 1, Windows ANSI including the euro symbol,
% MacRoman, and some extra characters from Lucida.
% 
% Character code assignments were made as follows:
% 
% (1) the Windows ANSI characters are almost all in their Windows ANSI
% positions, because some Windows users cannot easily reencode the
% fonts, and it makes no difference on other systems. The only Windows
% ANSI characters not available are those that make no sense for
% typesetting -- rubout (127 decimal), nobreakspace (160), softhyphen
% (173). quotesingle and grave are moved just because it's such an
% irritation not having them in TeX positions.
% 
% (2) Remaining characters are assigned arbitrarily to the lower part
% of the range, avoiding 0, 10 and 13 in case we meet dumb software.
% 
% (3) Y&Y Lucida Bright includes some extra text characters; in the
% hopes that other PostScript fonts, perhaps created for public
% consumption, will include them, they are included starting at 0x12.
% These are /dotlessj /ff /ffi /ffl.
% 
% (4) hyphen appears twice for compatibility with both ASCII and Windows.
%
% (5) /Euro was assigned to 128, as in Windows ANSI
%
% (6) Missing characters from MacRoman encoding incorporated as follows:
%
%     PostScript      MacRoman        TeXBase1
%     --------------  --------------  --------------
%     /notequal       173             0x16
%     /infinity       176             0x17
%     /lessequal      178             0x18
%     /greaterequal   179             0x19
%     /partialdiff    182             0x1A
%     /summation      183             0x1B
%     /product        184             0x1C
%     /pi             185             0x1D
%     /integral       186             0x81
%     /Omega          189             0x8D
%     /radical        195             0x8E
%     /approxequal    197             0x8F
%     /Delta          198             0x9D
%     /lozenge        215             0x9E
%
/TeXBase1Encoding [
% 0x00
 /.notdef /dotaccent /fi /fl
 /fraction /hungarumlaut /Lslash /lslash
 /ogonek /ring /.notdef /breve
 /minus /.notdef /Zcaron /zcaron
% 0x10
 /caron /dotlessi /dotlessj /ff
 /ffi /ffl /notequal /infinity
 /lessequal /greaterequal /partialdiff /summation
 /product /pi /grave /quotesingle
% 0x20
 /space /exclam /quotedbl /numbersign
 /dollar /percent /ampersand /quoteright
 /parenleft /parenright /asterisk /plus
 /comma /hyphen /period /slash
% 0x30
 /zero /one /two /three
 /four /five /six /seven
 /eight /nine /colon /semicolon
 /less /equal /greater /question
% 0x40
 /at /A /B /C
 /D /E /F /G
 /H /I /J /K
 /L /M /N /O
% 0x50
 /P /Q /R /S
 /T /U /V /W
 /X /Y /Z /bracketleft
 /backslash /bracketright /asciicircum /underscore
% 0x60
 /quoteleft /a /b /c
 /d /e /f /g
 /h /i /j /k
 /l /m /n /o
% 0x70
 /p /q /r /s
 /t /u /v /w
 /x /y /z /braceleft
 /bar /braceright /asciitilde /.notdef
% 0x80
 /Euro /integral /quotesinglbase /florin
 /quotedblbase /ellipsis /dagger /daggerdbl
 /circumflex /perthousand /Scaron /guilsinglleft
 /OE /Omega /radical /approxequal
% 0x90
 /.notdef /.notdef /.notdef /quotedblleft
 /quotedblright /bullet /endash /emdash
 /tilde /trademark /scaron /guilsinglright
 /oe /Delta /lozenge /Ydieresis
% 0xA0
 /.notdef /exclamdown /cent /sterling
 /currency /yen /brokenbar /section
 /dieresis /copyright /ordfeminine /guillemotleft
 /logicalnot /hyphen /registered /macron
% 0xB0
 /degree /plusminus /twosuperior /threesuperior
 /acute /mu /paragraph /periodcentered
 /cedilla /onesuperior /ordmasculine /guillemotright
 /onequarter /onehalf /threequarters /questiondown
% 0xC0
 /Agrave /Aacute /Acircumflex /Atilde
 /Adieresis /Aring /AE /Ccedilla
 /Egrave /Eacute /Ecircumflex /Edieresis
 /Igrave /Iacute /Icircumflex /Idieresis
% 0xD0
 /Eth /Ntilde /Ograve /Oacute
 /Ocircumflex /Otilde /Odieresis /multiply
 /Oslash /Ugrave /Uacute /Ucircumflex
 /Udieresis /Yacute /Thorn /germandbls
% 0xE0
 /agrave /aacute /acircumflex /atilde
 /adieresis /aring /ae /ccedilla
 /egrave /eacute /ecircumflex /edieresis
 /igrave /iacute /icircumflex /idieresis
% 0xF0
 /eth /ntilde /ograve /oacute
 /ocircumflex /otilde /odieresis /divide
 /oslash /ugrave /uacute /ucircumflex
 /udieresis /yacute /thorn /ydieresis
] def


%%EndProcSet
%%BeginProcSet: texps.pro 0 0
%!
TeXDict begin/rf{findfont dup length 1 add dict begin{1 index/FID ne 2
index/UniqueID ne and{def}{pop pop}ifelse}forall[1 index 0 6 -1 roll
exec 0 exch 5 -1 roll VResolution Resolution div mul neg 0 0]FontType 0
ne{/Metrics exch def dict begin Encoding{exch dup type/integertype ne{
pop pop 1 sub dup 0 le{pop}{[}ifelse}{FontMatrix 0 get div Metrics 0 get
div def}ifelse}forall Metrics/Metrics currentdict end def}{{1 index type
/nametype eq{exit}if exch pop}loop}ifelse[2 index currentdict end
definefont 3 -1 roll makefont/setfont cvx]cvx def}def/ObliqueSlant{dup
sin S cos div neg}B/SlantFont{4 index mul add}def/ExtendFont{3 -1 roll
mul exch}def/ReEncodeFont{CharStrings rcheck{/Encoding false def dup[
exch{dup CharStrings exch known not{pop/.notdef/Encoding true def}if}
forall Encoding{]exch pop}{cleartomark}ifelse}if/Encoding exch def}def
end

%%EndProcSet
%%BeginProcSet: special.pro 0 0
%!
TeXDict begin/SDict 200 dict N SDict begin/@SpecialDefaults{/hs 612 N
/vs 792 N/ho 0 N/vo 0 N/hsc 1 N/vsc 1 N/ang 0 N/CLIP 0 N/rwiSeen false N
/rhiSeen false N/letter{}N/note{}N/a4{}N/legal{}N}B/@scaleunit 100 N
/@hscale{@scaleunit div/hsc X}B/@vscale{@scaleunit div/vsc X}B/@hsize{
/hs X/CLIP 1 N}B/@vsize{/vs X/CLIP 1 N}B/@clip{/CLIP 2 N}B/@hoffset{/ho
X}B/@voffset{/vo X}B/@angle{/ang X}B/@rwi{10 div/rwi X/rwiSeen true N}B
/@rhi{10 div/rhi X/rhiSeen true N}B/@llx{/llx X}B/@lly{/lly X}B/@urx{
/urx X}B/@ury{/ury X}B/magscale true def end/@MacSetUp{userdict/md known
{userdict/md get type/dicttype eq{userdict begin md length 10 add md
maxlength ge{/md md dup length 20 add dict copy def}if end md begin
/letter{}N/note{}N/legal{}N/od{txpose 1 0 mtx defaultmatrix dtransform S
atan/pa X newpath clippath mark{transform{itransform moveto}}{transform{
itransform lineto}}{6 -2 roll transform 6 -2 roll transform 6 -2 roll
transform{itransform 6 2 roll itransform 6 2 roll itransform 6 2 roll
curveto}}{{closepath}}pathforall newpath counttomark array astore/gc xdf
pop ct 39 0 put 10 fz 0 fs 2 F/|______Courier fnt invertflag{PaintBlack}
if}N/txpose{pxs pys scale ppr aload pop por{noflips{pop S neg S TR pop 1
-1 scale}if xflip yflip and{pop S neg S TR 180 rotate 1 -1 scale ppr 3
get ppr 1 get neg sub neg ppr 2 get ppr 0 get neg sub neg TR}if xflip
yflip not and{pop S neg S TR pop 180 rotate ppr 3 get ppr 1 get neg sub
neg 0 TR}if yflip xflip not and{ppr 1 get neg ppr 0 get neg TR}if}{
noflips{TR pop pop 270 rotate 1 -1 scale}if xflip yflip and{TR pop pop
90 rotate 1 -1 scale ppr 3 get ppr 1 get neg sub neg ppr 2 get ppr 0 get
neg sub neg TR}if xflip yflip not and{TR pop pop 90 rotate ppr 3 get ppr
1 get neg sub neg 0 TR}if yflip xflip not and{TR pop pop 270 rotate ppr
2 get ppr 0 get neg sub neg 0 S TR}if}ifelse scaleby96{ppr aload pop 4
-1 roll add 2 div 3 1 roll add 2 div 2 copy TR .96 dup scale neg S neg S
TR}if}N/cp{pop pop showpage pm restore}N end}if}if}N/normalscale{
Resolution 72 div VResolution 72 div neg scale magscale{DVImag dup scale
}if 0 setgray}N/@beginspecial{SDict begin/SpecialSave save N gsave
normalscale currentpoint TR @SpecialDefaults count/ocount X/dcount
countdictstack N}N/@setspecial{CLIP 1 eq{newpath 0 0 moveto hs 0 rlineto
0 vs rlineto hs neg 0 rlineto closepath clip}if ho vo TR hsc vsc scale
ang rotate rwiSeen{rwi urx llx sub div rhiSeen{rhi ury lly sub div}{dup}
ifelse scale llx neg lly neg TR}{rhiSeen{rhi ury lly sub div dup scale
llx neg lly neg TR}if}ifelse CLIP 2 eq{newpath llx lly moveto urx lly
lineto urx ury lineto llx ury lineto closepath clip}if/showpage{}N
/erasepage{}N/setpagedevice{pop}N/copypage{}N newpath}N/@endspecial{
count ocount sub{pop}repeat countdictstack dcount sub{end}repeat
grestore SpecialSave restore end}N/@defspecial{SDict begin}N
/@fedspecial{end}B/li{lineto}B/rl{rlineto}B/rc{rcurveto}B/np{/SaveX
currentpoint/SaveY X N 1 setlinecap newpath}N/st{stroke SaveX SaveY
moveto}N/fil{fill SaveX SaveY moveto}N/ellipse{/endangle X/startangle X
/yrad X/xrad X/savematrix matrix currentmatrix N TR xrad yrad scale 0 0
1 startangle endangle arc savematrix setmatrix}N end

%%EndProcSet
%%BeginProcSet: color.pro 0 0
%!
TeXDict begin/setcmykcolor where{pop}{/setcmykcolor{dup 10 eq{pop
setrgbcolor}{1 sub 4 1 roll 3{3 index add neg dup 0 lt{pop 0}if 3 1 roll
}repeat setrgbcolor pop}ifelse}B}ifelse/TeXcolorcmyk{setcmykcolor}def
/TeXcolorrgb{setrgbcolor}def/TeXcolorgrey{setgray}def/TeXcolorgray{
setgray}def/TeXcolorhsb{sethsbcolor}def/currentcmykcolor where{pop}{
/currentcmykcolor{currentrgbcolor 10}B}ifelse/DC{exch dup userdict exch
known{pop pop}{X}ifelse}B/GreenYellow{0.15 0 0.69 0 setcmykcolor}DC
/Yellow{0 0 1 0 setcmykcolor}DC/Goldenrod{0 0.10 0.84 0 setcmykcolor}DC
/Dandelion{0 0.29 0.84 0 setcmykcolor}DC/Apricot{0 0.32 0.52 0
setcmykcolor}DC/Peach{0 0.50 0.70 0 setcmykcolor}DC/Melon{0 0.46 0.50 0
setcmykcolor}DC/YellowOrange{0 0.42 1 0 setcmykcolor}DC/Orange{0 0.61
0.87 0 setcmykcolor}DC/BurntOrange{0 0.51 1 0 setcmykcolor}DC
/Bittersweet{0 0.75 1 0.24 setcmykcolor}DC/RedOrange{0 0.77 0.87 0
setcmykcolor}DC/Mahogany{0 0.85 0.87 0.35 setcmykcolor}DC/Maroon{0 0.87
0.68 0.32 setcmykcolor}DC/BrickRed{0 0.89 0.94 0.28 setcmykcolor}DC/Red{
0 1 1 0 setcmykcolor}DC/OrangeRed{0 1 0.50 0 setcmykcolor}DC/RubineRed{
0 1 0.13 0 setcmykcolor}DC/WildStrawberry{0 0.96 0.39 0 setcmykcolor}DC
/Salmon{0 0.53 0.38 0 setcmykcolor}DC/CarnationPink{0 0.63 0 0
setcmykcolor}DC/Magenta{0 1 0 0 setcmykcolor}DC/VioletRed{0 0.81 0 0
setcmykcolor}DC/Rhodamine{0 0.82 0 0 setcmykcolor}DC/Mulberry{0.34 0.90
0 0.02 setcmykcolor}DC/RedViolet{0.07 0.90 0 0.34 setcmykcolor}DC
/Fuchsia{0.47 0.91 0 0.08 setcmykcolor}DC/Lavender{0 0.48 0 0
setcmykcolor}DC/Thistle{0.12 0.59 0 0 setcmykcolor}DC/Orchid{0.32 0.64 0
0 setcmykcolor}DC/DarkOrchid{0.40 0.80 0.20 0 setcmykcolor}DC/Purple{
0.45 0.86 0 0 setcmykcolor}DC/Plum{0.50 1 0 0 setcmykcolor}DC/Violet{
0.79 0.88 0 0 setcmykcolor}DC/RoyalPurple{0.75 0.90 0 0 setcmykcolor}DC
/BlueViolet{0.86 0.91 0 0.04 setcmykcolor}DC/Periwinkle{0.57 0.55 0 0
setcmykcolor}DC/CadetBlue{0.62 0.57 0.23 0 setcmykcolor}DC
/CornflowerBlue{0.65 0.13 0 0 setcmykcolor}DC/MidnightBlue{0.98 0.13 0
0.43 setcmykcolor}DC/NavyBlue{0.94 0.54 0 0 setcmykcolor}DC/RoyalBlue{1
0.50 0 0 setcmykcolor}DC/Blue{1 1 0 0 setcmykcolor}DC/Cerulean{0.94 0.11
0 0 setcmykcolor}DC/Cyan{1 0 0 0 setcmykcolor}DC/ProcessBlue{0.96 0 0 0
setcmykcolor}DC/SkyBlue{0.62 0 0.12 0 setcmykcolor}DC/Turquoise{0.85 0
0.20 0 setcmykcolor}DC/TealBlue{0.86 0 0.34 0.02 setcmykcolor}DC
/Aquamarine{0.82 0 0.30 0 setcmykcolor}DC/BlueGreen{0.85 0 0.33 0
setcmykcolor}DC/Emerald{1 0 0.50 0 setcmykcolor}DC/JungleGreen{0.99 0
0.52 0 setcmykcolor}DC/SeaGreen{0.69 0 0.50 0 setcmykcolor}DC/Green{1 0
1 0 setcmykcolor}DC/ForestGreen{0.91 0 0.88 0.12 setcmykcolor}DC
/PineGreen{0.92 0 0.59 0.25 setcmykcolor}DC/LimeGreen{0.50 0 1 0
setcmykcolor}DC/YellowGreen{0.44 0 0.74 0 setcmykcolor}DC/SpringGreen{
0.26 0 0.76 0 setcmykcolor}DC/OliveGreen{0.64 0 0.95 0.40 setcmykcolor}
DC/RawSienna{0 0.72 1 0.45 setcmykcolor}DC/Sepia{0 0.83 1 0.70
setcmykcolor}DC/Brown{0 0.81 1 0.60 setcmykcolor}DC/Tan{0.14 0.42 0.56 0
setcmykcolor}DC/Gray{0 0 0 0.50 setcmykcolor}DC/Black{0 0 0 1
setcmykcolor}DC/White{0 0 0 0 setcmykcolor}DC end

%%EndProcSet
TeXDict begin @defspecial

 systemdict /pdfmark known{userdict /?pdfmark systemdict /exec get
put}{userdict /?pdfmark systemdict /pop get put userdict /pdfmark systemdict
/cleartomark get put}ifelse

 /DvipsToPDF{72.27 mul Resolution div} def/PDFToDvips{72.27 div Resolution
mul} def/BPToDvips{72 div Resolution mul}def/BorderArrayPatch{[exch{dup
dup type/integertype eq exch type/realtype eq or{BPToDvips}if}forall]}def/HyperBorder
{1 PDFToDvips} def/H.V {pdf@hoff pdf@voff null} def/H.B {/Rect[pdf@llx
pdf@lly pdf@urx pdf@ury]} def/H.S {currentpoint HyperBorder add /pdf@lly
exch def dup DvipsToPDF 72 add /pdf@hoff exch def HyperBorder sub /pdf@llx
exch def} def/H.L {2 sub dup/HyperBasePt exch def PDFToDvips /HyperBaseDvips
exch def currentpoint HyperBaseDvips sub /pdf@ury exch def/pdf@urx
exch def} def/H.A {H.L currentpoint exch pop vsize 72 sub exch DvipsToPDF
HyperBasePt sub sub /pdf@voff exch def} def/H.R {currentpoint HyperBorder
sub /pdf@ury exch def HyperBorder add /pdf@urx exch def currentpoint
exch pop vsize 72 sub exch DvipsToPDF sub /pdf@voff exch def} def
 
@fedspecial end
%%BeginFont: URWPalladioL-Ital
%!PS-AdobeFont-1.0: URWPalladioL-Ital 1.05
%%CreationDate: Wed Dec 22 1999
% Copyright (URW)++,Copyright 1999 by (URW)++ Design & Development
% (URW)++,Copyright 1999 by (URW)++ Design & Development
% See the file COPYING (GNU General Public License) for license conditions.
% As a special exception, permission is granted to include this font
% program in a Postscript or PDF file that consists of a document that
% contains text to be displayed or printed using this font, regardless
% of the conditions or license applying to the document itself.
12 dict begin
/FontInfo 10 dict dup begin
/version (1.05) readonly def
/Notice ((URW)++,Copyright 1999 by (URW)++ Design & Development. See the file COPYING (GNU General Public License) for license conditions. As a special exception, permission is granted to include this font program in a Postscript or PDF file that consists of a document that contains text to be displayed or printed using this font, regardless of the conditions or license applying to the document itself.) readonly def
/Copyright (Copyright (URW)++,Copyright 1999 by (URW)++ Design & Development) readonly def
/FullName (URW Palladio L Italic) readonly def
/FamilyName (URW Palladio L) readonly def
/Weight (Regular) readonly def
/ItalicAngle -9.5 def
/isFixedPitch false def
/UnderlinePosition -100 def
/UnderlineThickness 50 def
end readonly def
/FontName /URWPalladioL-Ital def
/PaintType 0 def
/WMode 0 def
/FontBBox {-170 -305 1010 941} readonly def
/FontType 1 def
/FontMatrix [0.001 0.0 0.0 0.001 0.0 0.0] readonly def
/Encoding StandardEncoding def
currentdict end
currentfile eexec
D9D66F633B846A989B9974B0179FC6CC445BC2C03103C68570A7B354A4A280AE
6FBF7F9888E039AB60FCAF852EB4CE3AFEB979D5EA70FDE44A2AE5C8C0166C27
BF9665EEA11C7D2329C1A211DD26BB372BE5822F5EA70D99EB578C7BEFD44CDF
045A363056E5E1CC51525EA6FC061DCEBB337208EFF729802376A2801424F670
0E7E6397B28F15BC10B40012B0A3EAEB2693E8F7F627C4C9C7C6C5BFF105C1E4
1B2B9E8F09253B76040D268B80719E1B3F5A55AA45ACB5F973DECC54C8130ABE
C8E23C8067FC409DBA23A469DC7C6C4F7EEDC3DA588EE3C5B2829D3E1492978B
F91C30C1912183DB62BA489418A68C3BD44566603673FAFE6C3DD78FDFC1F6A0
840DFA44EAD8A5653DDF2FE86B8BDF672707D2AAC76CE376C2C9E56EB95F30CD
75B1E312BE777EAD75EFA21114335130DDC559ACC1A14454397984D624EEB43A
C7BD688E270025A34A912884DF387744462E4F666099415F25F86999B31B0588
576296579F6935952724452D811B749AE61C6265711EF0024C6AB25EFE1E88FC
F88AA072958C75F616D971AFB3D9116E041EE7B66C39DA4481A97509DE7AC156
CB43C5A85501E66164E5FC61F9C64EE138CA0D9A0808BE0443CF3FBAD13C63EE
E7E39F1D385A453E8095DB2FF5914A611E11BBDDB04D6FC55D51B08358EF7253
9B8E1FE26561CD5CA9661C91D264B3810A37BE373BF66FCB021E4407375ECAF6
BEDC1561D701A5885F4216EC592958C80DB9B8365D66A8E075A88782C4BC6161
F6B5246F49B14E4E086FD10E01EDEA5D95A0F67D9F6D16C093CC98116B652B60
04B7FBD451E536399DE7A8D8B8E0740228524FA5CF81735BBC72B976F955FB3F
85B91278057DC1FA6B42FF84B9F267188631A0EB7B4456653620151073F4275C
9B80D71B4DA3EF23BA2811F90A844D2D4A18C2D3E7C75DC2351F250E946C49EE
1D67BA5377ABAE009B18599825EAA89BAB6B56BC1177B32B4863A004CC7448B0
27D9F6030ABABDDED61E95CF4D02EA9170BBCF04E982FB170EFF61B5F0A3E39A
E4596CB6B478F6EA85D464460C3E3C301813928D1A4140ED2931D06F55DA1B92
575627B7363A7B2F52C2EBCB003F3168ACEADBC274B460104B32A37A35E08E61
6B4C58ED4BC82DA01AE19F2AFD0CA670D4CD12464788C7AF3C22AAE6B2B67FBD
72227163E56D6B000CA09205E5DE9A469288A5910D3FB382621C0220E057A6E1
D45DF424BE6D4A9CBF0E9C57A7505345416B248B1D6BAD13A02489FBAC13AC58
FA76B00AD677FE4516AE17384099CF4D9CA95E527E64B9FA87B64BDF9704294A
8B2C51E4FA23D4AB55C637BC8752B48C0ADA62A69B5B7B8D3A9A933EA4789536
D912DC1538DD035DAA2F1F5B0522A24877E4A44991BBDD34374F207D96F86CF3
9FB83560A6487579162F51CD4190C1FEB8776D7F800C87A2707EFDCF56450331
B58CD9A51ECC7EE17952C3AECD739C9CC21B3C3472CAD5E073D10EC5D9B7AE5C
2468B3515B4E5CE9AD9081E1172F69555F6863D99ED216F3551392409C5DC234
EFB8455C231D0F74004F3415983909F3D8C4AED27FC8D189397FABDB8564780F
55943FCD4B308B75960BD7D8829218F1C6D27B038A9AE39D2F8F7DB339B7F171
E5C53328A95D928552CE6AB64F5D5864A2B36CD9775479F96EB37D8DC7BF1B8A
0C98B0B1A4ABB448328D4ECA00E5F41F160F84208893EE27F86A2845058FE8A3
3D609E1E590C54B2089351600C954413E6F0765BBCC80BF672D91414C6364109
D5ABF3EB78A9A2470E356E572535D55B1F77CBCE599D53A3367BA3C28DB6183A
E68F6564178DC0354DFF9E679553C2535B4FDD75927036E6284031851533345E
C77FAD42B0D5F7F4E717F7F2F574F03B3BD18DA17B1B815B966A2F82D27A9DE7
D80DC986174F26E19C66F955940D517A38DF6F58F26AB3AE4A670E49B3A65396
C7C62E415DECE0740B1C300F284B0149B211DA30E866859BF0F2368F5DFD963B
F8FFA5642F9192E43D4BB95CF70387C6270755A3BE7042F6E114D3C6DC1354D1
C0E5ABC997C64F3C84D2C3B7581BC955B514D0E86241AB753C32214F6A8B3B92
4B6F0B44397342211B44EE1C72727E7CC6A042DBC2011D60A37E8FCCFF71287C
18CC525EC8D73AF17F67AE52BC8317DF1B513A2DDA4538BD974A1B6EADFE9F84
A7C5DC8C8AB26D58E5E0A5E134067039F198B7F58DD98265D04B596996E80992
52953DF229AFBE2367DE24BBAF62155A9BE09791F9820797DD03F0E02B1701BE
DC570C54C32A259BBDFE261919452773EA2DB99D70940FE93DE03E207106B5E9
C9FE79AC790A19B2E26035B18479957419A561C23348904A0F8C54EF951B4BAD
2BCDE303B82B01C4E1F5C9F2CF9A0430CB4BE1AFDC30E799BEDE4F80E5CF50E4
4B9D8319141D0F653FF50218AE3BB56977F0E8D2923493697FA7CCAD9B99FEFC
AF0E8834E0A9D1693D15464AC122B8682FB988983C9F331A3BE83A2BC00EC73A
A0676A1535719DD7956ABCAC1E8FE2D3FB60CD3CD5CCC604BF52CDA8B78EC787
8E84C78C982452C6889029EC7E0FA5E6DB7C1EF7CE08A428E156B9B115428090
0CFE638FDAE4B0A674821E93DD3A02885D6F382959D9AD24BB4C3D7482011999
076142CB15DA1C54E86E453983513A75F939205C061918E3DA3932982607D197
25AC8219DEBB2A09078E465B3DF59B2C01298E571DA720DF8E04A32B8DE7532B
D19CFDD69285BF725FB229FAC5B0463E045B9F840D1138FE79B813421C3D5EFA
A73A3716AA9B4E66C8E5A03D5F1D98DE47AB51DD77014C292251A2702BA7542C
40771F1475B919C0E0944D0E294F4BA63F145C16F1812AB2F8969F9BD7470531
9E03CEBCCF3F71B4C23DC40447A2D21270DD055EA707AD54B4B052B449B2C401
E18976E5F8628E21B209878770BCCE75E467680764A4DF585AA8EA461D7B9AF3
392807983E300EE9A5BF4E928004BD90C2FCDFB6DD8952B76D6026258A210A15
C3EA3C1253A877265441DBB89C9A871889CABBB06F48159CF46FDF12DEFD868D
C4480DBD8452E83798A93FB92613967677C0E56E43FAC5578FF5A1E58E8097DE
6723C2A24209374FC83E8FA88B00612FA8EF409E9A126A7EFC7AA7A43D01CC33
5539B7BE33816C132235755AD79D58E075C3FED601BB2052E2B38D9149777BEF
325C6AF3E0A92786105FE8D4BD0F3678EDF78B77E537B9C68696476E930AC214
3BB7DC23B09B5CE218ABF2807F0BC08D0359F5AE1EA8728EC6600D6D2AFC1111
47CD7AB46DA2993728ACEF23FD8FC11F483C0CDAFE837D984A761286C27D809C
75D22373802023DD465F60E5E5492F17615E9DC61A41F2B4CCCA221C3A72AB75
84D24400671CD623C679F654F27464C3E04E4B15FA6FE9D0EF916A1C5DD0F7F8
387DD8CA44A544BEE210382DB0321D08CFF6ED941F5ABC150DB466536520A005
46E0F30FCD4D97B8A1F921BAF0ED78D89F33F144043D0FEE36BBF435367CD7E5
D8E384CA3C4F4E66B09F7BFCC674F381FEC5E0D2A13D518C43DC9DC3A19714A5
E79C7EA7942D47411ADA02B67315F797A599354D0EE1DAB4181763AECEC23F62
7A1777EB05D5BE5A896F0D386A421D08A3481E4A81CD7B8E281FDCF8A030CEB6
7DB8EF36ED92478A0C1BE81FD74B3C0097B8E7382AC74F7A875BA583F31D8697
1CD2445F5BDD3E6A7CED7163449C26E3355A50ADCBBD47A8BB0CCBD932A4C517
BA7C024CE791E9E85821EC8FA0AAFB5829429F15FA1BF3DAF894E939E5EAE869
C75193C2DAA100BE728339DA46EDA1FEF945E28E9C82B631973544019CC2AB7C
9F1265B32E13A33A4B1A6A40F3FEE824B277DEB9489E1A2312DA7F2B295D688F
8F17ADC676E012A737EFA5B743C0FEDB224E360B0242791886B52275052894C3
9DAD40632EC98DABB7DDAECBCAC2C3F7DB1333A4EB3C77717722878A49E7A5A8
40BF8EFA3FCB60F72D16E6767722502D7B7C90C8348ED94D18230809DCF10DDD
04F807A1B0351E141D952593C64A7F90DD7B85DC131D66DD04D3E8E0E4B8F40C
BAB3942190EC22BAC4EA986D9AFA823FF0CF19C19DE983E0A77C371A5EE3E5EE
60BE0E9116197C8AECCD1EF1603D94FB33C1B40F2BE7AC5AC6F3D6CD5283DBCB
D2250079CA9F195195CB4F7B689BE4C0395E893486EEFE202CCCDB3B235BB50B
FB85FFA6DF961DEE4395D2BF066CE4E6A9D2F2583404F795DD3CD508B40546C8
8C508DEC76B0CB5271D99C80F65A5279043E68FFB9A147CE50B1BC45A841EB3B
9134F6ACF1E5101187BBF9960E5615D0C0DFC537AE7691A92A5D6291464AF2EF
F2AA270E4E38DAFE6D49BF278123A4966E4E7C6E2C30B4D4D6880642D161FE9D
58A402949482CC048021C397FE059602082FF2F9E746D12F2FFDE34BABA0FB8D
1E384FACBB7030D3CDA75B1EC5F340DED25ADEFD9A5D17ACD610B2360CB3AA39
3D2251D2CBDC732BF6DDE3839E3DCD75A12D39DA0466D9B30DFA0DDE3E833818
ABCFF9A2F51B416B3F99463EC5DA4EABBFEBE23FAAC12BA68C2622BA35F1B0B7
661A99E3BB1BD13565961B1B3760EE57E29E6F592E57250F65306A1666F002A9
B36C608B6E3EE4977A695410551EA8F0912E1D19CE24488F510E909D2D3F0BE2
ADF32E017E9EB5E294B9559556A974B88380A89B6E813D9223A95FEC0D35641F
EE00260B5008276AD62D05AFDCDCE4E33091132D471EDCAE38607DDBECDD79FB
CC7A4425EDDAA7F49257148F05FF52FA65924AC2337BEB55ADB1106E0FF4863C
43F7B4CC4E42D6564B0C2F3B595C9F8B8A3106AC80DB85CE6633CD771B8D108B
7CE405504ECD699F42B6DEE9D130BB7118B3394AF7EE7076395E67C3CF9B71BE
069AE6C28D4FEBB379F0A21B75F34987BA586C6FF368ABDC46963C46D2F7BF94
5125B3C95B1D9E1C889376D26BE1FC0A910EA98EFC31A04041B8A3E4A901284F
589BC93B9DB78795CC31B01C879BB44632D8F9D8196B6AD2573892F7C7C03F1D
5F4748B5DFC1F8D787F99305EED29D2F35DDD0320956D2148DC7C2D7EFE859F4
1EDE3AC974B43AC1FA919F23A2F2CF7A16BA18DF3377A013A5191B4D7908FA75
3D997501EA15183EB324BA3956918BF295AD636946160DBF3082857F0352DBB2
387B43EE4CF762927CFCCCD8769905F0F6CFF798BDBEFFA0A5A818D08949856F
5E9BA08E97275AA6D6D56C8DE82E1FD21984D255DAAB15D2530F5004F063AD7F
2B69FC2B4A13B3B4891F94E4829E3B4E99FDD2019610FB1F1B7224B598AC585A
FC792F2F5F04FDB35F13509F132635E835D2D74CBBB259F1F07DC7F74A0D295C
BA3FAD1E46371B4494A48CC3535311FE6DB43D7BA43B9E2457A326E9A5C97A68
58F1F198CD09E67E806CCA17003E8130E33961FE59835F21DC12BA21878EE9FC
1A953F569C002E526244487C242639D8BF382F60E470958640F97B6E66D0A2A6
6554392ABB770267F630F989B8F24DFF060706AB2B516787BD4341323DB9FF79
3AD4F899614BBA63162B921A44C40E2E099BA69836D76D228AB4DA24F24523E8
62A8836F4EEB162702D1F680500DD69316A876A328D58784A92CC1DE08FA35D2
642A84E6AE282BAB6BE62675E4689FF336E3A1673344C687C79113C46C08335A
B14B4F25AE5B380B319480A9377B6238262748B2CBCBBE6B3BCC90ADD3356E54
C9828A31B91797E7DE20D551350C0B7DD01457B56579E3735C7410A8F4DF0F62
E7764EA7EC053E89642F12AE52237197AB0E23F628281B2F4E854AE64153EF40
319B2B459D0E10BE77A8F941EA695C009EB284CBB816AC6FA5D713DEF849D3CB
A6E7995F0CCE1DDCA6F51DC6FADC7C7E2C5EB5F68377A82ECF178CFC51F75D48
15B0DCCB265CF381F02FBF83D19176AC10FC9132536131D25E9E8FC7A7ED3D99
BC762576D38886EBFD84A70D93D1D1203F8C21D9CC04E187BE53F8FED4F33633
BA03A72C1FAFB0F696C4C97E374632D5969859F9F16E68C2BEB5A247801D8EAF
F2CB0EA7EF01BBE4523C5FD5ABF3D87C74483CE4272074EBD88C9DCBDD1E51AC
1353F7C1C36914C7F2D238B7EDA1CA4AD405276E3513DB07C21862F9C9DA95F3
7929EE55B032A5FBFE5991BAC2556AE999834EDF972895EE541BD1EC657ED5D3
BD43A15CB7EACC4D466D92B811D773B475C03A372183C536651BCD254A1631C0
85CDDB6DE033212209872667423B22D9891D77A57C5B766BE0F3D7F6438FA7E4
64BFF671439E45063452EB93453EB4326591833D16F6FDE8749184F48143580E
A1370B34755A331814556FF227356698EAEB075F254AB138314AD90CAAF7A0B9
4495D2CC7FFD160CEEB07A0D656F055641C5D505567C5CF4B01E52AFE1C93175
28BDFF80BF6FA4E3EBDB6896DD0A88B39D49E52BA391969FCDFD0933CE9CCA03
0AA4684F79BEAAFC82FA2F8D93B010C75D586F167D3958F7A67584E37F037419
2D19251113EEC0F1341EA273475C5DA1CD36A28D9E419591B2E0D2B8482F6254
1D1D6C857F8F2867BB8860B336478C35E61015488CDCC940421786DB4AB32DB1
BB2FDA8F2C072AEE5B375E1A07E6C23FBF532ADEE1A6E2444E3377789FDAFC84
3F9BB2466A4A4E267763220B39D43C956761169D95AB892B217BB6B568F3EBAD
15B1E0969A650D7A40E93CD24B2A726AD7840766F1D6BC8C416036D3EDB66C6D
58D538519681AD3DB9AC0D8D2A9155F865B4795821AD55CC326D18BEC2165A5C
A273CF4CA7D11E1A306158996A4F5EB1FB6238D151FD0EEC5E4B29C904EE6AB3
3B8F190353A193DED934857E1F9036DDF2EFE8CBF670B604240D8917C6D7E639
3EC17BD65D08FEC0CC24F9C0D2E9D0553634501346660DC56B578006D63CBBCF
370A06AC57D1149D49E24F9624BAF85B854ABD8268FFD05A089F2CEE01CC705C
62B2D78762E43ED93064D92916A0B97AC70BB33B97ABDD15D431A70FC1CA00F7
B9E8BF2C3DAB0BF069AD47B06D95220CA34E3C531D23DB48C5FFBAA771C254CE
BFCE2B295EF8C0DF568712CFFC44FD6ACED3D30050702826C0166B4F20EA0705
95A778B2B8DA29378FFCC453F5A2BFC9F8592B9F5C3000F0689CAFEB6D7725A8
C667987B5BCC9DA8D6FCD239A9CC0608B841011D1652FF00B9CCDD5F7D5D874D
9C82125C96FE666EF413A901C68042D58E05D42985448D1D7D19FC61B5D86BDE
B86EACE07F3F3C20E9531741A0F2DF658F42D355F702AEF6B50A8BB53400B855
E1847674FA971744DA02F5D4B61C82C28ECDD2D12DC0BC5D02958933DF1D17E3
9A9F40B0C8E10CC566B25D0DFF23A89D5DBBBD6D42C75FBBB76A3628ACDEE383
614D564DCEE7141E0C91DAFDFE0E42B7CCD846DC7EEF377CAEF216A5A40A32F3
7EB11A2598997249656614B25C0509D757789661B804E99FB0175BB60BD4DB7E
E5C2F883659B5379BB5C336ADF1CBD423F1F8DD8B917D1EB9E8EE0F1F6837343
2E636C7AF36AFF0EAA537516A6AE978D29CCA2DF100D5AAFC6FBC6B08DF90EC7
9FFD30936FEA1E94E721489D8C96604A657BDC79310F2F14A2D3B94FE7EE1A18
6A1CCF396581304E36DDABD4292B9CE3355412BE720B3ECD9B620F40FCEC36B7
08606A3BFE5C9522923A87EA6324B41780B866E5FDEE7A525A6C12A76E86F716
E901051C55FEC17032CFDF96CA35AF3CC520E18FC8CD99205AD52FC5F3AF8710
79980D5E8E43008D45A5838FF9636D6B910F7C5D6642CC169CFB46D962B714F3
D5FAC783A83F1EA78D7DD77752E95819D1B279DEC1DCAB8A493431FCB7D70FE9
CEC082BB832839F8DEE1A0D05FF1443EC4C8AD6AD13D32087A2C6878951F24E1
F98F8B49912328320EB3788739350F1E313873299753BB1EED9C435C9C2F1812
DE926D5F5B853070BB58B87CD0844E56167A135E5ABA5B3216B772316E03AFA5
A27E6F5EE3F77F48505D0F606E0FC033379FAFE587DFFCDA03E13DB99D69CFA1
29190020E55306E0646863CAEF9572C6F028527BAD5CBBF03216E61A6D4168FD
4D8141D5BE0D98B561706B36AF33A9B838CC7134846530731828CF9F5A8CF5BC
8BB698BB16B81380E4527A82CFEE9F5EAF7C38ABC27A19A6649DDEA84C5CD73C
9B436EEBCAEED5C928A68EFFBD0C16BFBBCC8D77016EEACAFAE4B8CD7C7A240B
30BB51A903DEDE4BA2E23539CBAFDC35B69741488F906450AD7010084D98E55A
1045C549405EDFD34B6E1055BF62762920B45B3B85F2205B355C03E1A33C7DF4
EAB054DEF34EEF1275F0CEC5CAFAB0F1FDEF80A367B5F9B1D0B5E94B53550558
8F9036573402EABBE778BAB57B3C6C0750EF171539756318A1395B2A694A9F70
EDD1F4F9E765008F90C69BF50D262AF6B83FB0D1B069128F3168953041A419EC
6F7C11C5DF8116C0D633BFFCF777ACFD8E1FE5505A357D6EBC74CC3D95CC5778
5FE13A2C0F34A122D799665F9C1BBDC34F34DA91337EDF64232757DC3BF4E84D
1EE4B2E1B39AEF7D3E933A03418232DF1EDCA1335995707E49C9640FF8960816
002C481A8B54362501282FDDFB2D1A5E5B7113655C47E3A1BCCED81146B9F4E4
CB0E9862ACF5340FB6B2B6ED4575E3EA927CDD0D4A347F6570639EDF2DD713BC
097C73D346E91603CB689C50B5DE5CB26C5C546DEE5401E27C2AE27C86BFD7AE
2B988A390BEB352917E28C85B868ED1EBB3B616D177D65D68A55D48242DC738C
EFA9FF092551A7BD6FC76D541F65FA2CD7FF2AE20A0FB0174DCA732AE54AF725
F4C9435121152FD2C0AE7BB90BEFAEF1BD086106C5886B1171F399CD09FC00D8
87F7CC5522031BCCC59D7177FDE32D967CADBB003EF6D072299960C32646E277
48F2031026378504A8BB67C74162EC4A08A3B2CA714782096261208E77434780
8BDDDA7D4F196D22C8A0D6A4DBD587B6329C1E5A7C65F421C3B812F0A2DD6A04
6F1E7824AD632A4979F27C0F7804AC7C59F19265B84DE87126DDAB1B5FF06992
FAE8F0A4BACA9C3864176B410E1FD753ACF6844AA44B2CEFF2A386A4F13F2D5F
EB5B8AE22A4F37948B63263C11D731F5E07CF2B7AD52EE403110FC151339617B
D0A4D20C13FD248603AC30059F04637AFEC703C8005A82372EE5B315A217EAC2
433900FB6FC74E733F486C002BFB9868AFCD81AB61BEE398C9C34E74DDF7A6DA
4185FDC81F355498677E9AE72AE059C28BA574E5172ABD55FEE6A61BF8F81940
4D130B936CD3992F7D744B10B6C4DB0B7C9A14E7E62B124204E7BD6D032242F4
B52149BE5567FD43B08D323A4BC983120E94108791FB21617A52D7912E526B33
674AF6B4B6EA0D19EBA67970620B2A23C498CEE7B1A9B6F81D7D5FC202D27C95
039DBF41F7C3D98BF39B92556CFDE762356E69F3B8B6A57808AFFB2057749F40
B18516E452AE33258AA5BC1167B3769B36A9C2C56D19B011A11D2BAD1162EF50
A35A4D9519F85B14ACC3A0492F5E5C6C966A6798BF0B806F837D459B6B0183F5
FFBB20F4B7E4458596D010E5D8EC5BBC7CB674ED1C41778AFC9B25DFA0CBDDE5
97F3D3627A73551722C8F4532909348AAE66F1AB4DEAA81051414DB22E8B66FB
D532518874EA70E9B45054A57D9ED41149756E468A85C7DC99C42E0946900A35
7CB9D7FEB56914F525B0DD448092E877E26BCB8F39B64379313F14A6FC2D8F37
5B028342DBC2011D60A37DC4377F765EC78742FEFCE44B7D2341667F718AF3A2
138E2E3DEE0DAC0212425D8A10F2F289DB656A529A101CCCD15EC63E7C7FE186
F6516B64AD3221FDA253DDD046FC88C6F8EDBAE56841F423561B58F110AABD9A
A7EC196E697FAFF98B48D05AA966D1DBF49E490C022AF18B022911B4590F15E9
7A324391FA71DD5F0E7C28E8DA07D3A4C6F97E3F66D53C64E6601515F808C30D
1CED6452BF090767439197DF6C5ADE392B5C3AA221E91A5D182B1529A258667D
6BCF607C65EEECB902FD7695019E586A3A1BF52D9A422F90E77CFE781B4FFBE2
1871FFA61109FC386D4FCE408B095A32847FBCD92436047E9CFDA07EA9167A72
DFAE08E7592F6EECB1610F5794B45D1F1026A613D2488E67133C71E51D9D09F5
4DD261B08CFB8995060FFD2435A541D3E4E2DBEBD253B540A5F597DB9A484A44
7D63B7FC5AF13AC1233793BE56EE90F28C05F1A6485093EB015321CE9C2B5735
F747127CEE9239AD3A2F9B6420560070EBB48C4BA806F71081D0863FCAEC2DAF
F0AC50378F89F53B1E48042AED5851BA6B3D03F6AF290DE59017BA7653191F06
3BEE9A4F4776FB989E5D75343FF0D3285D516D1DEF5EC05414659F7D820C9A47
8FB88C3474B7BCA7684C8DDC39584BC7A6769EC3F886FDEAACB83E7A32BF3242
7312C9988B1E9FC635A97C5E6C985EC40CD882C2D90B883981C8442F5299CD9B
F902E697A2A69C62AADF5D6991194F0F7E49D3292370FB7443068D8DF9CC0B6A
B5E082C9BF1429FC0BD1EDD1988E769050C1CC503EDEAFB75F3F5117E5FD1B6C
B2FEE1A3DC9FAED5468840A7832CBD312ED15DA5FC3C2FC44D8F50E8050E3D5C
8AD90E2EDFAB68A7501AB5CDC85D345FC4BA8F62EF6EAE27199021CB7FB668E8
7E5CD341631C16D2A56E11FE5A0A313F6E8DB2BA0C3B5BFEDE5C927C51F3F740
D61C52561F88EE047FCE456626624FC689B2CC4AB48BF5CEEFFFE8CA8C2983DA
BA4741F36EE98505F18A81DA0BBC618A937C4159C91A453A8C4B0EA6E5CAAB6E
2ACEEDF17D2D7FE4232862C16D1DED415D487ACA2DF345DD18C42150008F76F5
4A817EEF4DE20AFB12DB06411FBB4582D0B916048D10C6698B028783249E2867
6CF0E7BEA107749A49AC1B6D4695A344C48667069EAFDDCD98AE3598D26C2A75
0807E86BAE0720C4BB0CA987636DFFAA035C354838AA0ED6BEE017751F0460FE
438A1312CB70D45EF609F898FB609EF733E742DFC850FB23B8EB21600E9233A5
A92E49B0D28852307455E9C479666A021BC84A2C6CCC9162336B6C47560CA7FC
C00821E6C10B43ED31DF0AE2867319063D2C8824FA57C0BDA3244FE421DA72D2
4C3581F7F1AEC84D10FAA37F52B7E3E586EDD0CCD68CCBD3F0A6D55759E9E2A4
529E9CC7EAC192042268BA800B6AF8B46A5E1C868566A3E5DF65F790B7D62767
9909F5CE6D50AFEA70F904852B9606E8E074B6742A1847C136340CD545E79FB4
B66DC8BDB8552BA01AEE38E1205B077C2F2C646FED96CB980247C2A6074B263D
FBE19135964E6C8F87076BC343EE50583BE34AA67E9255A962A6D64B5FAA4414
4D1AE1DCF209E84FD2FE8DEEEA385798B76D7E03B03B9167F6207EFBDD92A147
206523C249174577A9BC065363CE485D8A1B22152FAD0A33A0B562DB58E01E02
AA098B44C0A422D2A38A73665D048847301906E4D8B4CF419D4E5E8D739464A1
4AF1A3A745549A2C8D8F6C93CCAF12CBC1C779630EA9AA8B6E77856A3C6A7B37
B39E92BBA5C42182D171798DCE5A41816ECDDF97DC2C8DCF5C8BCCCC03EA0973
F065A0E67D3AF7F5940E569F9A7E9A2F510B7BED5BA08270829D8945A5F0E50D
F18C110B1A998A65545496B495C36BFA0E83CCBA41A83B617F4B7CE7389C563D
919882ED636BAA4AD81F5E7A0D087EC68AA559822986C68DB81C1AA1288596B0
4372DA91048B4370BD2D1AC26776C9F97B58A448FC502A8DBF0DD04B90B9474F
C4A738C02D2385A2805707F95831BF9C8B0938F14C0CA41D0EBC56994A39BB7B
F9D62412C9494C1B7A2998510039FEC2A82A7BECAFE8296B3A98AB415E6CB601
4A12AE72ACA29C6F7C694517216F5273D802D625A371A5F8035CD014783F08CE
E5A7E239477CF28D4EEEF7035544EB761916FC42AA85EB045535E44A62B48D9C
7B44C95DE6366E02817002C7504530DD2B89B844ACE08F8DE277528485913A11
E907177CA545CF43CB8D5EF487F3FA077AF8166AE66B65C3178700E56D15B3A1
ABA7BEAFA4514F13F8193B0E25A2589E5DF9D6FAD8C36EA99E22D619822D08CF
5A3E7DF376AF900C4729B4D91C24B7C7C45B3937FF30565A9C3295E7C98FBAE8
DB96C15B184EC9F9F9E5DF53093DA735DB6769C62F85BD9B4B6BCDC693BB69DD
309856476705C7F198CEB491BAD5527D59B6A68BA0752DFDCA4C0C3441D3377D
988627BF757E7EB94A1932C4D6C1ABDAA045DA3C28AB441956C911829EDA9894
8B372809F295F67DC4BF3C6B91C37DC02088BCC1F9A10BDF85BD44CA1B3C8391
059B6E24A3E27A49CE8CE993FF1F3520F40D36C8A49F19ABFC5730E478369E2F
C89F2F28C168E6B988F76C3E2EDA92F22341D7ED9325C5E3AC9790D355444F1E
FA67D92A57657BE4BADBA11C52E735C2C981DD1A51008BF62B3D8DF4024EAD5C
BF3F5EB4F2B352F6A9FC7FBC2D93B26A51567AD17C93C29A9C4516327A2627A5
EF96629ABF6754DB8C3986EDDA40EA97BA46C73AD77C07BA84E2036B627687D3
EE4AB64AA66E7C7B7FE2E7C825292B96F224F40B331D853D2C54E5123E5E2F84
3602DCE3A8CC2CC6CF9935D1EAFD4894A600072ACC70C91B876A4D1FABBBB24B
4044034791B7D7003597C4740A96A9278A6EBC7A94E27270B41AB70586880A7E
EB24A6834CC1E90EF64D3064BADECD2208915F105B9B3BFE688D3C21C653379C
5D4F9B7E17AF42BB22A0CBC0D1FBA7D7963CE979C12FDDE5DC2794707DC72EA3
6F645E4951E3A798A4D269E23994B85131343EAB8C7A11A88576B8430B4A7951
795BAD70526CF070783BC4AB150DD6BA5247D7A252FF7FF962F957C199FC3EEB
1B2CAF8C3E319E894B54BFDD5F193718312FE2FFD0CF3E5BA51AE7C62EF8E81A
E252ACC447DC7250D498E95E04A726AC127F979DC0DF7EE8E51C4BF6C70BC794
C6BBE8A2AF2335BE73C080BA84A84C9BC4093E2151EA61F538857EEF140B9E99
6CD180D9309F26FC26F202B1A6E9EC7880A3B1AA5720F09E2C07F59C7299AF29
48CC148219F05C752E2CD594D0A881C3948F7CB0385DD1318FBE4C650BD6D0D1
AEFC6545F09D8816D5ED80C3BB5B51A817FAC9C6613F60F213CCBECEAB0B6965
DF41A093B769BB09BACC261C014FE3D51108E3306E02301101A81DD94C0DC175
78329DDF8FF64C17B1179CB9B56A01689DAC1AD18370705123053D6E902DF3C0
772DBD33BDBF1ED0549BAD624D9A1762B670A9A506C02981DDD67123F4F6BD72
C6B3158EB82AE67338CCDFCC0B6C535FF348A4B00BF6DA3815B7068A272D1504
F4BAE7BC515C969284191F886F2B2BBDCEB0A04AD8EAEE5761B51B3230A3E3D4
2177830C3B5B440DA51D295CCDAB8AAC408CE85AF7E2981B87B73D560A8E6EE0
BEE3408D38C8E6AA822E173D1578300B5AE51FE74952CDC9D40D9B1A32366871
30FEA535971EECC6EA4C239D51CC54EEE1BA194A3289DEC533A7F9759BF94C66
7916F166A4AD0D7458BBD310CA57AE78AC688EE28C31D597BC0184963FA54A8D
661D8DA3489F03F9BA2DF35DE06DC843B5446A9665CD6E65A14B722CB0A11F39
67BFAC1FBE8B11523BF8412753FE3CB524D6BD1C2CA79CAD7F8CF533A7613E7B
B5E42819E144C77726ABA7DD154573B91877B0B41FF1E552A6435F657CE3FBD3
D0C08B8C7650596893A76225FF88AA2E75E37D05D37E8AA3A7223FE21B0A7830
2026FBE0DB02D15F614B77D0112527C9ADF522C6800B9E158550BE7858F57908
A07931D1774C92B1743E575FF9F2658A27F01F62349F23F1A7FC76EAC634EA21
0BF0CCD3E84F50BFD70BEF021FA259BEEDB86E0EC7B5B9478D015C42AE8DDA94
8DA1E89BEB89B0BE25E70A899D5E759A53B327A585904F8926584360D829E390
5EFAD02980DFC94074893F360FD2D62A59A9E90F31124EB0D96FE5AA9F008035
816433AE1192529032F0356AAFDB6623F25AC206464F3371C597402569B65D4B
1523E3955174081557356A6BF67FC6B4AFD951D3E59E0AD0189B3C78DD5C6F83
C68EBC5127E2BDD8804656A5974371748BD7282E58289CEC6A25F2F903CBBECD
7B59F9FEC6117493B001FFC0B19F219D8C27146AAF4F70BAA33970B0FED08D0D
C03A299DAE4982561595CA3AE05EF4920942E8D6CB90F8D66E81460C463E8C82
46EBF6EC5D93CF879B9E0E67F7DBF2D498D26F8A1369DAA576CD9F503C66C35D
F70F13B32830B2F5BD4B43F25060680DC20DD9168D13A5EDACAF3872CF334161
84EF84F3675A5C04F085E4EDAE9C731B91EC4761ABD7973982DBF8B1450A96B8
4266497D7316BE11D4B49C026AC72B2747822BAD8A2730732E34418F56509DE6
697EBADA4F508178F536F8AA66067A23BF2A58896956333E1616F001A3D1421E
AE4D6B000843A332BD3B9A05416143C5AF417FE9A5BB61DE44748ED15C9F3599
DBCE720AE307CC7405315B5069AF52AE29DFFAE0906C40CB8387218CD94E5D60
861B4199DA16327E26EF08D0F2BE3E0DFE1555B7EEF3830A8797380453267C95
42D1627494B8B72AAD74CBAC808D70C3119A8A56846E6E15E72ABA006A65AA92
CE0747116CC063803E60F6A3E8769F00A50906EB80247A7504461E9D7A305844
7D580601B8B746A92C99E045901DC4E0C0BABBDE07A3F8F12A54B73FDF209BC5
58B4302CF741DC6E796C558AAD05E336641DE56C6DF37FEA09ADCDA484F9BF74
CBC4BCF5E906E976008460441595DB20DC724DA9DE28B2F276187CB2A94938E7
48B57BF8C87BB643AF79E21C0C3711E4C81B652ACE98E180FAEB10364E200073
ABBE15E66B00207E3A213270FFAB4484AC838B3EC6EF990C5A605C871B0C334E
E0528447E51DFD0D4052F8857DF727004C7918E0ACE9DC212B57DC861E3D6761
BE22129027D2936F1D3D51F81C2A2A3D8F479C9C321963843922B91F5688130E
5A320194531AAB7A1AC13907753C9A4BF60A7A08C0A0A38A5987ACF479797CED
D440940BC51BADD06C00C9F63BFAA106D9F0DBAEFDD97BD87B20D746BCFD7D5E
B08CCAF116F2819550BBB14913C74E9B0534571FF61DF671065823BA9B135A4F
FB3BC42D6AA0D8BBCAE5C02C49DC278C926C64BE30A5C3E42940B304131360F4
6FB7EC1883BCEE581AEDB0477CBE590127CE350E2892F201ECA6A6AD115372E4
C0AD8E3684115A340FA5FB002D52E0C6EDE5B818A8BF767964E453010FE02CC4
D513F2D3824ABDE23B177833468A965FFADDE69DFFC546D87229EB0B764BD36C
23E9FB698C66DD000D20CBB691525BFBBE10B13DBCD05AA7487C587FB6ED5196
9EA94D00E1A71E2837BEDFD7EEA77B49FB99F2094A55F417E2C7BF3D5ED9774B
B5B51163BCD742E2152172D60FDAD9CFE01A3547863985C801E1F7C1B01EF4EE
857B0C825F1A99EC00CCEA0BE65E290DBEEC6A53A5C53037022F74F961275B00
D69FF59CE2D2C745AFBF576377A48092B521EAD3008CE1D7343285394475BEC3
D0CFDA4CC7CC9C5A5BE58B59C02027681A84996002B7A0B6231A414732E18845
A77BD05E03F8C075394731067215CF5922E48DD2C72DAEA629B6FE0553F45A14
A45923050845D0C68C6B5B09CC2F5DF4608244E4F902C9824EA429B5229DCD03
FF770FE1BC5BC6741B5E5C18EB8BE06097191D32CFA463AE7688E9365F5C9E3E
9549369125D9F5B33DBD11BE244CDEFFC3D26CDAE32A0FF952AAD52D9F476333
4347E86EEAD7E9031A9D3B10EB279F8690E65ED3DC9877C5EC6794C9E7BB10E3
FF777F06681FF9DCC2326E784B5DF0498785663CBB5A2E1B9C174075A2BA0546
555B483908389D180CA23E1943BE6AF9CCE03B44B090C731EBB82FFE28DF5F66
26A81133AFC18996672B5F97F41898A942E8E0A478831E6A60F817EC3496F8E8
06655ADFD6FB4BE1AB561A9B065333F88F63134FACB749EB473C3BA4B3667265
88477D10ACFAD07A31EB78263E2F4203154A4CEB1B448E79C9F9A54AE29412AA
BB232B536CCB08DAE7FA1C7D6E3EE3DBC0FA16E241F7910E9FC8502C56BC2ACD
E5EED9E42CAC2EBE8F295D7AB97258DFCF3B1FEB60191E9794A2D4A656334D20
EC2DB22241AC795D8FEA5A6E1AA8D351653CCFBFD006189C23B1168C4DC85751
AE44DB72D3F2442711AA240B62DBA572A9F60E7F49388B927DF1C8C434089BAE
696779FD7A6822A9F68F92675FE0DF961A5281ACE5C78B35B57F6FFE02A48432
B9BBBF482EFD5D860501E60457AF39BEC3F17727D7846759C2C83F94D8D3EBCF
5C63DEC4DACAD386EFA7037B7553E547A1CA3D215D2A645BD88250BD0E68CD10
0A7A00FACE8590208B6E2272798FCD23147720202A7964EA6EA961B6116B75D9
F0C454F29BAB9918FFA34E3E701E22033635A9F7B8CC0352C23A620D344551FB
DB8D03DE897B85D6610DCAF32F3998F6762892889AB1D37F7D75BDC174DD4870
A3FD733C612DD0641EDD3A72F13950AF646E72FB8BE4AD0F8B291FBCD7CFD437
E35AE6B825B4190CD2CE784CD70195D82D3043A7FA464A70165F315849DA6CA9
875BD141448864EA0627C63214DDF7242B2AFDE05EAFD5CB0BB51E67C3F0799B
94C30209FE7A32EDE4F90136DE44D1DD0956458BF79C8F8B80803A1BD32BF813
EE5085B01F62A1A52BFE3DFB24004666BA3F5D2A8A9FA976FD464CB9F1256682
DF2BA7EB604B0884706716205C6128EAF71196EBECEC887311A89F8A9D3CA354
095BB6609A27A7C255E59C6AD9B0E482C7F4CFB5E15A281299C5E397BA1C4888
75578912DC8D11B2AA0590DB04EE0C10BA0BD65C1050745CA6A00E000CDBF56D
16A710D9949210F08A15B174186E4955F4B1AB9E9F81B99D4E5F11F3C6C8DD2E
212F0CE0820567583CEB2D34F968D0A873C41EFA85567E511FC918AF87D5282D
A28EC8C01D267A617D0E4A57004CC592365A2D943E22889CB2AD1DA3A35E032B
194C4F3100491CA3F1817567E3DC6DAB0D4316C21C3D4ACAC5793EB1C455C989
3C87CCD1F0EAA829FD87171DD3A5B26729A911BEB808F7211E09FE53FAA4CD9E
8C874F49FDA432C2B3CCE473DEAE979956A99732CE09378F7361F1B26337E37E
CB1DE56570C8E906FF71CE7BA88F2AE49BABE0419792FD96022D2EF9087E2ADB
A8E9535B1CDE70C26D21548AF26ACAFEEB9769AE5FB3B446F7FB9050CADCA035
474D32D9877C99DD63F25FE1158BE68BE28BA163746AB50F6B875A44427CCEF7
3805F37364398690CD13B4DE24ED77B89A92D9265E5CF326B15AC61CDFF0ED45
A701A5A2FA33373CA18C15D792C810A1841AA3CDFDBD744F9457FC1AB3CBDAA2
99201D951426D7DD6871BFCF8679AF54885323FF7BEDBAA642D1938E7E3FBBC5
0FF0B3D86FDB257B21C97105ACBE2B700E6337D47636B73BB34925DC6B5CD3B2
B7C775BB06AA502695E2C9C56621A9DC7387767846DC581173EEE5DE1EDDD06E
B07FC373394EB34B14C6C5AF6282E40A84682BAD2DE64BA852779A44CF1D4D95
37313DADFCC559235BE0B74DF7AAF1832098F17430AE11D1A7AFA7DCFA1C3580
93663EE57484B702143BE59D72DC5C1C69A3A31CB2A38F54E6F1F504F914007D
D492E1882957A83418FE5C55FD32B403412350654FFF2A2B2A183ABC0D8A9043
A119EBA1BC505AED5508FB507E96576F58DFB3E3EDBA39E9F9668ED7B07F8E6A
0BED3591BBB4B383F05256362BEFCE68B6D594D82C74AEA098593324EF3134C5
4EB169F78D7B84055AC44ACB0E0254E8BA62A065DC373EEE03637D8C5AF5FEA8
2A7DDE3549E8BB6351CD0070B542BEAB0940C94D0076ECC0CCA1B91211D060D9
10E8BAE43AF4155A9C83402B78A60CEB0B4D0A4439C5D29411E64FC40DE4F2C1
AB3B124D0239ED841E2A3385439E9C847CB99C3704E57C184A311DA64093C33C
E11E94886EFAB8352EC3D11E5383D7E5B6C926770C3568D46E689C3C2247C71F
1AFCC396176F1B461E3C17FEEB4D2D841966CBCB7AED78A001441A929DAFF3C3
6A21D41CD157D423B84914545079BCA8D47BE4CB5D9008BB3458615B4406635D
F770C5A0E70B5DF9D7BFC7DC1206D3F98C2E4BEC23FBA1642C1AA0DB1AEC5EE6
43DC850E886B177D538B53FB666CB5AED7A5B1A887A8D8AE2B6343EA76CA0644
F56F9881C2F05B6C510ACBA4F75D58DF2874A3A7967DAD24C818A49876F96239
F5CB4DF7630432F6E191C3D7C7BC7E06FAEC7A475C14EE71363CDA1CDD475AAE
D4ACB1FF55B4F509B40FE686C4F27D6346563373CF2CD4C52561C24F69901CB9
5EF275C5966BA046682EFAC28C26AD293AF5FF5D8FEC892A9C7E26F20D8FB4B2
23975F174D2F3C6186D50EB703E99F0C33DB2CF55412E074CD1FF54FF61D7DB9
8F5DD74E3AA508C4170476B17BCDA45CF3D2AA8840780F185389CD22069ED16A
7591AA726E61614B8A4212282BB7BDFC553BDD30D755E1D5A8190860E9D29C06
2F2AE06C9E8A6E9539D1D57BC9F3DD30B17E2C363B260B7F2794DC1FCDF6AE92
BD9AC63D4CAC60AE6F7C768491743488520DCB5A5CB8F1365AAA55E01308D7D5
AD70A3CD38EF986BAE59119B7EF4C95B1E9BCD72F93CB6870B04C3CE03173773
C7B010F6B99565A033676C257C1F33BC7042D8EDF82343E97FCAE37ABC94D39C
9C049F92749C7E1590E1F8322B4CF4DD6FAF08F8D192EC715C5174E595AEDD1F
8E5604C8FD7C301634070A233E59549F7E6B9737B069607E2DF3CBEF9C3F8B23
86F2A3F59E552FF681FFD41DA79A6799DC37741078A8800AE691524E837B435C
7D5F570F0D27BF835D36CD9A656A29FB490B6067523E5C62E46F94681CC9EE88
DCC3786859CB850A36B73E6067309EA88F652ECDFE919299665AA1BE8F6795B6
18E3F6A2639E5A4E00900DD48D37691DDE5504C3A59D0BE4AA666A03ACD545A2
8484881A2DA1A802127A004034C88FD923CA4C48AEDE5AA1C8572F055658D191
A90244929511B3131F7D1283DA2CBB7AE824C752F0552865C36BFC76912C87E3
FBF916C7E19997EE3110F40547C6A4C06C1710BB663867698C308E1BEF6C28C2
4DF9E254F441D1DDCD78F78BD208640BF8AD03E72BD3F5325A00F1C344980052
DA8080278ABCD100E16910ED01AFF369E0E5439BDF916234D121E1B665FE7EA8
0E323BD6C621587CFFB5A930E0A1FEF07AE2D4EE93E220F513CA517837FA380D
0CD730FD30C97081509C5F7051F016B7B27484F6902CE94BBF59D76AEB0A5124
8422291DB87089464DF047D004E09B40687EB23270F67985177C762F645EDFFE
5D19ED65D83DC9A70F9915B234D42CE58A77DC62A8570CEBA3B868D404FE651B
C805B14F96EA1216AAF37A7D2247EFC1A9B127538A05764A6FB4CA7063A49307
96006CF440C0F5F62263B166F54DD8FADFBD72C1EE1F383711B660C067989C99
2830168016962833E615229B1C23E4A5C52D2690D6AA99B524FC519D3ECFAEF1
32C7CAE6D43A2BB16D08CA13E27D7B0A2BACEDF8990E4590F3CF9BCC838A9ADF
DBCC38BAD0F4E108445E8ABF4639338CB8541B3FEC0E315EC28F20FD10648A79
109018B9C36FEED09043826272E7162647B4B00EC84ED761F63DD60C75C82950
4F235EF8A1ADBB5120E89BCA1E4999CF1B12FFF02F3CFE0687D1A1711B6508D7
D34F31D003680E92F0D10FD7CA39DD497F457080A40FDFB8EBA543AC099A938E
6561164883E0694B8D49201AAD848D8636772DB57387DF9A5281EA62FFB74B4A
649FA4F1252B4C6148D272B6422EC5EF95A168F8493E41FA48AC27BF04D90978
8BEEF6A2BA8273CE12945E668206F02A074BF2879A1E1441E38B88454AECDBC5
16B1A7F0346D50C81C276ECC93913E76A1BAEFB5F1760975394F7B6C63DFB3DA
B73275D67FE94F0A08903FE0BB9F669C295212B7AF1BF7E475E536876F413ED2
83557E15E23B77AEE3AA1D75C661613D0115F480A75F3B2D557A965E332D47AA
347F04D36C528B9071F16B44B4D2CCA5BE2D8261829B5214DD93412106CB356B
D9960701FC9B91A3F968D8BED95745FDB537FED193CF61B9635BF696FCEF13DE
B6CA3D627ABF1F94A2D4B8EDCFAACDED85BFAB8261E4A1C35C9EDB968540D97A
5B9792574BB19A9CD4A3485E649BC8605B0AEF02473C92E7EFE70949461203CD
F03BF73028D99724ACB4E105160FE65C449E249B5354F2037176A9C487D218ED
69C6AB5FF10499A3278EF2822FA27EBFA924A38256C777D0689EDC6B005C7BFD
673AFD4060461D4A99711F9FC6A1A2E6EEF05CC05B7D7C7BC0FA417C46156722
1B880D0AB09957C7C901B5ABD72F8AC88096A0D99604EB97F7CB05A4C777526C
8CFAE3B19E7B1A2D52F764451499A145266026907F37C8225442B1A6B9E499A3
350371085F97984857361307E975BB0DE71B1BA84C6AE5AD5FA2D420F9C76362
0F1E648CB4845E41864E311EA0F3BAF1F00251499C8C1FC6F0A7FB0FE00F5C55
2446085489E7D3525830066FD7F08E0E30A5481804AC9EAD36EC62013643198F
899C849EF62D14584A0FB63D7A242BDF304EAE2A4AB41F1BFA6AD62EAA18EB1C
46FD870B3AEEA921B4C6B15C45562F7B2A7BDE5CB423A8224CE871BA7418BB46
95B341EB6D6AD073D9E517DD6FBA6087DD12EAF3A7413B36D8FB582BE1EE335E
7190BD48CCF7CFA30A7E59E4B7725387434DD2472368E9970E155DD86DDB6609
E4CB056E13A487513121609416CB1D2D2E2E5D61D676731C179BDC324DAE721D
520AAC46A7EC001D5A1B0F4A15573B00E167AC44A772F9D583DE359348310E61
77C483D5A326131E622FCC6D25F97D2C4C4044D97D9B053ACBBAD8A3D2FDA9C3
9074846E9E79B94FA86434DE03B63CC7B7DA74CBA61590C1AF2850E60EDDC268
E317535900369D5ACD5F3EA583307660D70B78788373A4D73865BB5BE0490AEC
030FC501B4758F1C0C2323E5FC73F5FE35021D52BE19628F11B64C6BDC818651
9E2081A6F0839A9995D75F14ACEA16FE41C8DCD4F5CBF31D235F8ECF86150F13
E73955A736AB0818E263E7B7672CF3E6CE9ABA32C2B9E378F5B1609C73C9CA45
1FD7C643959F7328483ECE9D24EF814B772990650A7B6E77DCF8C45DF54B3D09
ABF82F0854E4E33B9F2C0994763FCA258B3078445DA79F85908BBD4039A502A0
44E3977AF82D8D10AB50C2FD9856EC07B4301A9CAE58A6A70A9700F5C8BE0EE4
D16CED74EA71B0E81F45CF9FA67E8FD10561A78DC018FF3142AB4E8EDA6B8AAE
40C30BFC33E9C603B4125FF8D6F2FF649AA90FD529BB6B385E3DC25F33513525
C5D2D7209315F9314CCCF1E97DC4546EBAD05DCFAFFB2B30ADB5061F440BEFB1
BE0582D8F52656D847B47D60EA8A48A946E065F1016D9D4B218A39979BC0DED8
93D279F20F49DC705AAC73046B5C9D668E05172839DD25156344E1DA47E14B10
54D0E765E7CDE9441E2A7BC255B4DE8A524ABC44BA383526597E22FF74E63633
71EA7B3110DAEA41650E4C0BF655772E53F4048CE3A06281884E2227A883D214
20323F2B9864D4DDA3B530C93E41DF5297C681
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
cleartomark
%%EndFont 
%%BeginFont: URWPalladioL-Roma
%!PS-AdobeFont-1.0: URWPalladioL-Roma 1.05
%%CreationDate: Wed Dec 22 1999
% Copyright (URW)++,Copyright 1999 by (URW)++ Design & Development
% (URW)++,Copyright 1999 by (URW)++ Design & Development
% See the file COPYING (GNU General Public License) for license conditions.
% As a special exception, permission is granted to include this font
% program in a Postscript or PDF file that consists of a document that
% contains text to be displayed or printed using this font, regardless
% of the conditions or license applying to the document itself.
12 dict begin
/FontInfo 10 dict dup begin
/version (1.05) readonly def
/Notice ((URW)++,Copyright 1999 by (URW)++ Design & Development. See the file COPYING (GNU General Public License) for license conditions. As a special exception, permission is granted to include this font program in a Postscript or PDF file that consists of a document that contains text to be displayed or printed using this font, regardless of the conditions or license applying to the document itself.) readonly def
/Copyright (Copyright (URW)++,Copyright 1999 by (URW)++ Design & Development) readonly def
/FullName (URW Palladio L Roman) readonly def
/FamilyName (URW Palladio L) readonly def
/Weight (Roman) readonly def
/ItalicAngle 0.0 def
/isFixedPitch false def
/UnderlinePosition -100 def
/UnderlineThickness 50 def
end readonly def
/FontName /URWPalladioL-Roma def
/PaintType 0 def
/WMode 0 def
/FontBBox {-166 -283 1021 943} readonly def
/FontType 1 def
/FontMatrix [0.001 0.0 0.0 0.001 0.0 0.0] readonly def
/Encoding StandardEncoding def
currentdict end
currentfile eexec
D9D66F633B846A989B9974B0179FC6CC445BC2C03103C68570A7B354A4A280AE
6FBF7F9888E039AB60FCAF852EB4CE3AFEB979D5EA70FDE44A2AE5C8C0166C27
BF9665EEA11C7D2329C1A211DD26BB372BE5822F5EA70D99EB578C7BEFD44CDF
045A363056E5E1CC51525EA6FC061DCEBB337208EFF729802376A2801424F670
0E7E6397B28F15BC10B40012B0A3EAEB2693E8F7F627C4C9C7C6C5BFF105C1E4
1B2B9E8F09253B76040D268B80719E1B3F5A55AA45ACB756B8E2BF5B37627E46
DAFD4A4F741A859BB5F7D7C77FC7AA96EE6AC93C06CA829B81FE31E32D59C6DE
B1BF3B6CCC5C3C9296DC86D01487F08AB668F656CDD88EB816AEDD1EFA47F014
FF598E78C978DF18F8F66057351BC96B48015AF2E09E3E318053E952E9AD4037
BFC7EEF9CBFD7BC35746565B7EFBF241639793AE357220843147FADB929FBD24
01C88A382F00BF79554D125C543455330002B0FE6D229830470C78541E78DAD5
3E7C1A619B91215AE025F81561441BFC9ADA446035B8EB9C3D69BA746AD0CCAA
049D1FE4D905DF3F48D22900E02A23FB23F6B571DDC8B2CF7008431C1EAD7F6B
D92A2C42CAED94F9714F44E3CE31FBAF23A064AA2A7F13D6E5378E28539F0009
323A0755E58BA7564A408B142C230672A423DA6A6E54ED162AFBF8FADFA75B0B
FC648D5DA6EC31251B62B9F619AD9460876EEFCB8F9D2369CA3055820306533F
3C1D47D5A2EF97619FC2C780BCD9540A820748369FFDAB9D52492F130C0AC3C8
E0C87377DA6C21F1DE429C15AA939877876F84605F6785B5ADEA97321BF29DEF
3692AF535EEFE801975F94645272142128A3FEC8B1BCEB6E57B83520B5C4DD69
36DB8CDEF6E49B8944CA31C59F8790CD3FED58F1182D9AC6DCB2D75B4881B430
C67DB769B4745EA54233CDFD5600BB2A96209A83FD04C13D4AA4AE27DED97D25
93F6FDA5F64711EC7A2899AC98BD8D8879A6A348265832994C3BAD80E1D12291
CB05924302B780443A76A09E1C27E8DCDCD87FFE3BE17DE0421A47733C2BD723
9C876942155834190F65598810AF8CAD9842F8A1E3BBD2AE3348BD8FC9189FE2
ED5643EC4D87148775121702EEB7639ACD80EF4F07542BBBC09F98F81FB91A1C
89C691BF38CE4239B11C1C0D9A6B864753E204C0BCCB093E139F9D6104FE0584
DF022C621F86E5BFE2E047FD560E8A89B3872C87F7811E9EBCA9CF182472841A
88E7C421E5CE69DAD123B88D4E6C0FD85C86C74435BFCAE28C2B5CAD57D91A9B
4473906D044085B5336B066C6D9CE994D2B333F470AD32D3BC28BA2D699B7AE6
2B689CD50CE2D458501EBCD2381F3430C3059EDCA22D9F15CA03CD18CB160E59
C0E960F79010DC1E9EC40BA6914F9FB7951CB4D5AAFAA135C17D5D64CD848A32
C71A5C856CC9C94F24B6C9AF854B83771678C0B0B4C6A4D9C05ADE69E5C04697
8751F11D2AD2CAE993E9604DD48EB28564E5DFDF2DFE0F9AF5A1E173349FAD8A
61D6A972C83553F8A2DA15BDFB2EDF7D680289B34A9A5F22879FB03DB0397ABB
D82DD51B28CDD8CF6890C62DCAE4EE399FF9945C90F492E3DC78A53161CB14A3
967DA998AFAD854F54E593DA4704AEA3390420118BA2E878BEA4BC99CE5648F0
21CE2020C10D7F4F38ECC398D6ADDF1C82FCAB5E8784146D2C2A26230C8909B1
597C83699B6D7DC3DBFB464844F955E0D39F3F695FA687B4C0BCC2AAE1F4870B
7D2FF9093CBD67882453AE6610B2CF4626600B114DE6155785DC7B085956E230
FB8AF38EFB91F4750946A9A742CF5073AAF79CB35C887EC0494AE7680BC389C1
3D32575B1C20030280F11AAE2151F781B071F94059228E5889B6F2335A6D5FD5
20C434477CDEA80482B8668ABD387B1C1CEBC0EAB19876CACD926DDEBB4E87E2
E79D5EDDF1A25D8F4A4280D03E4F597C77AFE2EFA045577F0205AC524D67AE09
AAC0F0073C217C900374F3D913FFE5430495754A5A8D9E2D0EF284E463B4DEBF
ABAA6C8B418817340149FB8A4AA625ACC2DD6712305382294BD8F029444F74DA
5685B6916A6B69E64CA0E96359EE9D23C7E67D223A52A656B1A57D8BDB3D7B62
537DA149152588215D8BE44233E4E54C8C0255CA77AAA035608BB2F6861587C9
9E4022E675866CC877C5732124456C891C94EC4B3D758F2C2368FAFCBC926D56
60E96B9741B75D8E2EA52E4183F35ABDF05D23A0031FF418499B3D75EA1D7CE4
898094BCA694C00877E6BC65EC82F5187B0C34B0DF36A8825B776FAAEF162FA2
4EB17C99F0EF578B354E369E7AD534BDAE57A86ED294AB6E39795C820D3A4C28
76F092EA5477430693F2C076AB623059BB4F31114F6BB6EB3FD64AA40D1E8975
0D1C3DFFA8E13E5092E2695EA58DD57A4EFA1A9B602A6820F83789E3FAA8AD72
5CFCC84AA3BB820A654E2172ADDEDDE7F51DD5C45AF9CB8A6362CD7F38CC43C3
54FB48EA741C41A0BDB45D751F6641FDAD6065A36614A68038AB25ED807D5E58
831A67F652CFD689513F0589C57F05FEC6942E2E9BF905FE17CAFB30A6B5EEDE
3F67508C22ABBE28057ED4EF2267B1E8AF36064294E48ACFC2AAC5D3B298BDCB
F4C369D71E53F0A961F9F6E6D5C7E7B2EE025B0BCB3D539EC3FCCC0BEAD0A912
74A3FB77DBB152595A023CE6F974DB5ADB42C2967707A00A8A68E88EE24ED429
AFEAA8FF3304518C35E55502546E62683AA3563664AF1AB2204F03427D0C1ED0
637971CB7D602B2269FD6FD8B6980D032F02ABD4FC3B3A928FF040BFD4CD3B9F
FA9F79D4E6B51858DD85490DBD5D484EE3AF5505DB8C30F3DC27EC4BD87036A2
47571DD40BA2A50523F0D10738F28419760020B6F1A044C7B302FADB1FD83F05
6774CCFF97258248848194EBAD0E6D3DB90214F1CB9EF1056098A29364102112
0E490E3CD9760065FD3B854FD7920E3CB6AEA73071D2F24D460DB6E4392AAA67
473CDF75579CD24CCB5A039CFD14C9EB1E8ECFE025FAFCE3105A8B4F4680EB81
B4D0479DD49AB5117798840CFC6915DB80347BB1AB0EFFB0B53C6C8DB47D37EF
1490C3C4CC034494A842B310CF1905FEDE5B860395FF99BE56B0891CCE58D48C
54883D4C5288003D4A5E24D9A9265B365E34D4AD57D3D5D55DC1DB1E750E4779
D03373DD9385A5CC5B56D21EED4751CB58F78D769C44D770955109FAD4D9573E
2D3554A74913183FED049B152C538A2F56DA739A43EA7BEA86974440AF3AA88A
F7E8956B86F9B706370A44FC6AF840312068D7236450304AB114D07ABDE4F832
0E6ADBDBF5191C52544D395FABD080DA0CD80D8DF76B1DC3859F76124D4B55AA
B3A04EF82AA679030CA8F4562F321D00892FE29E95A2093BFB23ADD7E58713D7
B1C372ACBDCDFEFC8B7BD2CAA5ABAE6DD561E9B3F312F1EEA3FCD1E369FBC299
44270D46850888E2F90A04419D3B9999699044BD0C5CCF5EC97CB96B093D917F
B52DB7A96366192D27BA26234F2E2DFCE4532296FDA1DBEC1D41334E61AFA692
EB09DFB0B95604CD5EAF791A3D2F6562B1449BAE0F5161E86924B99BAD152747
3CCA3C23D5865B84F5DD7495C047669C32F9A9D08558621EE4E71878A233B4D2
7FB5B9D4527F737E7B139A1A9A2F9768741D105B491EA9CDC85D2A8ADD04C472
7A3E542AF6E3DF14785CC9A34F69725B6974DC24E74F7FB0985D17BD4F4A20CF
F41054734615E8428FEF245299DD6FC7C9AE95E7482CE726F2820BDFF5AF0C85
FACA989DB9060D842191503AA7AF46C677BA820423CD5889D397D2355F996D84
4E2A6B17635A291E5FE61148536837D1367E3863F7544DF8ADBA0B5D9AC551B5
67EA2D75CD45B27E1170ED121528AF7E1C16875287CF374C51E2A6067F3EC18B
C6AC862769FC84F80392986CC918F0139932876FF7567D31B488B661F8C45EBD
2FB0F0EE1D4A21068A4EE61213F8168F3DFF482FB7C9109DF46D02E2D3439749
70968D38AA667EB01597AD234A19054D3AC99B8ED288A6743B653E336231A46C
9B5B2153B097CC1993903F20572AAAB15FEF7E933381144E36214A3F58E40C88
8DCC638FFDCE2100BBBEDDA180F771C0B0B27E60FE31D24E54317EDE680D4849
0CF09AB0E74CB5E38D102A351BABEA7C7AB559BD2D98AD6BFEF985FAAB1F3471
4E65B0EE9C55F98CB9E7E35C91C5F30CBC8A02880CD3D8364AEE64023F8EB577
C1748CC0B4C30704F2FB4014B567B1E8CEC4054EAFC778FC05A1FA0A300A022A
C8175ED597000ACBDF2C247D5F3F5DB074F8FA57783F706A17202C40CB7231CC
BD7CD426272314EA226DAFAD36DA47328715E65AC465A693A5260568334E34AF
897017BAF00719C4CC6D4207E4C6ECDE2866307BD6A8119EF99E4EF382082B46
F42D4E16F1ADF92786254C4637EF9F1EEFAA61A240D726B4CC88363A08AC7AD4
E9217E2FD44B735A2C9916A35865B057F75A4448286ED8DE314808FB86362FF7
6FB25BAAD46E724B27AFEB868602598664EB2A58C54D8AB7580E637C41078792
F96EF1C1E549C514E228B06B357F2B0AA28C92496CA956615060B60F8F528F6D
326F09C7BA2C4AC2E8E760854ED8AF3330DD198F8C11E8E0190E11311E8BB74B
F68912F4D36C7A64160327BDC1E1E75F16A32B97A435D0A884EE009210F0AEDE
FB064969AFAD7B4A5BF316058A0D8ED2ECB70F44FD2643BC97554D08F54200A2
1BEAEE003B83CC929683EA64F9EDA520D92CC9099C90F2D54CAD49693B577FE0
762D011085E1184C2837691E0FF8D53E86621421E2B0DE3AB5ACFFF87D6B1CA7
6AC74C34163D2BF81F593DE79466007C7BAED25232A36AF6FCC21E2D7C451B03
9202CB0FE8DD1843189C395E9C340B632D05710B707A4693E254921B8DE1ED98
4884DEC6C4F8EF454A0AC1DEAB11F0F67CEFC5B4FEE53950271383AC09A94287
5264A25B278EEC2AE375C6E90B45851BCDBB7A1AB3C057CF4F7ECC460CA73B4C
39E08CB12C7F95E5A7B6E9046E521A97BDFAD49233DB174BEF4B2969252984DE
D1CA82661FED50440577F8373CC7A116FD853A7390BF24D3E883B15FDA409BBC
D18DD33CEC7D36148C9FB58197AAF4986F05C970A11DB6CE5F031AFE598D5B5F
6BB8F341FBA2130762F10B8C676090F93D6A7C13ECA74C793B3917C4EB4339F5
9776D65F0A6D9E5088AD245098A9CFAE5B40F04E13847E4C92240A17C42177D4
3D2D5BE085E6E35B12C3BB902236F8DE5374A7A8532937F78A7CCB8E4EDFC64B
537A92354D53FFDB087E58C488C06355C623059713C5A157736C4CDB79029416
47A63E796BCBCA6043C4ECFF5E1401B3CEEADAED78CA68F6A947F79B9E751E23
C654F39EEB7488101CF42642F42164E5E2ED9528EA699B480FD4120D936CE26B
378F76D4DF8AAFDB8B7D98C25C533F96EE0615F75BA81C87E95CF1B46EB3A6B1
8272BCB691C6CE97931486EB61B7198045FEBAAA5D07C45EEF6C6FB2E8F9CBF5
BC3FA644BC9DB8106AC97F3751C5BB5EEEF8B84D9737E957B6B333F0A241B6CA
9E056F166A81E2A8374440A86B424C60416F41247E83CA9ACB584B394A63CF52
FFE8D10ACC58ECF8DF5BB77DD35458B69EB66B5423468DEDB3497B8DFB4CB74F
D8C0003E6F232E20CEF3BF6AE1658A5516E42B0C7CC102EB25D956BB8A095D12
8CABE6D47B505B0AABC0B3E5995BAAFCCBA83796ADD1690A375452B3404327F9
D03ED8E27A0ADBBB13157113B982BC7DDD93D7C71F81817EE1E40576E5058A2C
52D99BBF3EE4C46858AC7236A130C5BAA5744ECED5515C36F2798B584508DB9F
3E3FBE084A2D6FE99D5D36961361BDA669D683F7B01B3D58482A0CC9897B033E
541CA963B239C132D15609648103263FCD6BEA5B3E4EC70B61444F8DB281B69B
E841C9FBECE72BCC5F54B5A041EEF61A6987348E76D28AC0F06DD1F83FA50975
7C5F3CD1EE3D88940F645C4BB0C1A0B175587DCDAE311429282C6C2FE22FE565
9ECF5C5945D7D271E9E629110F0EC14B6D564A468E5996FDC86DB1E64C8257C7
F43FF8B56B2ECFF8E401E4DE64BC7A5BEE943CD837CF7A2CA2EE6E3744D7A34B
5D6FE1A17F9273B157D4B16FBD93B5FA4E8A73D05C9855CA0E873EBCCA0D28FC
02C1B8CE4AACDDD26A69F8BC0AF1CD0327906499B76F16B850FEC7BCB27798B9
21A96BB746FE0CF34F516D8A6CBEDC9FD3296AA5469555E14FD48B153991D728
B3CBF9E6E2ACC443B66EE8A742DED6C8E35CD1B09C5CDFD229487E4339899CC2
CD7691080C8214533615CC8C140AE62BA5C3AC6C1ED4141B604664192C7DA6EB
D18FEA282BB8F7280A8423BDEE08DB686ED1832272C7300CC7587925398E93FD
5C40F432E44EC94DE5521F5D722B7DAA51918726BFE4457B29FD174E7217FABD
0BE6272D2854B7325456268EE459CBFB2869B1BC790940ABB31D5E51339D704E
54C3325F4211296FFBCB33C517CB6497F674F2BF93F3FCA2249E8C9ED1AF3048
8219EF55549BB1D06543E90965E604E594982871D4F79892F2307C054B63B1D2
248F6BB2929837CC7D3C08DE5991B64A5BC13767B73179B53134740452F91C5B
E3E903B4A25C0D00CF99D25C9F08B229242993CD3032C43B33A4B20882896266
6F1889FA7BF8821BDCBB9B9F763329AC6BFB29A7E7069E55D1C1721A027CC695
CC9995F970D18BD3733CEBF21724EE8B8A2AF40EDA07278DA5408D0F5F9246A0
B2A0E257CEC9B08B97CD51575DE8C3CAFACE71975E7513D0156EDA28B0B2DA94
75D34528238F36A2022278580B720CA3F1783DC42D721434B1692ECEE5118D86
CD0D4BF98678A59803CE3221497DED3013A69E651121CAE148B7F7B334E90E19
96E43097B170B1BAD7DC26C0040477F7C98288AFEAAB26BDB5286981B17F89C0
17D89CFD94A0FEB9410AD33B1E67AF433455D96FEECF460CF82F0336C7CFE8DE
EC80524B933968133AC8D20F5D85C0D8C484F01CD52E27B685C5D651AA7EF6F3
B2BB9397386B7304DC9809900E961D056EEF9D1D01CE27D0E0652A398BFF57FF
F40F38AF77F99A187F687E692E6AA98D05B757101EE3287CD34EC8C2D8671110
0D8190256ACEB834C802A62ACD3925B9798F9FEF0F3E8A5ECEFBCD2A34B680C1
27A63484B8BEE74414C7AD04D541EC9C1CC2FE51B08E058D758B9436750A1500
063C9A7BE70966117EEF248B2152EF137C17122134D8D770D062E189072DBCA8
8DFB5C78CF8577D3760333DE663D70F04DACB53B40E1C694FC87AD58DE7DA9FF
EDA6025C559ED128F6FF56261B6FBDAC0E612010FF6AF70D58A4D72660B5C36F
0D84B1AABE459B42ED07F09C0F7D604CB84CBA6A52C4FBB39DE2D2A4C48E0D0C
DE205F2E3F22A10EACBF9CFD4949BBC37AF6DB795D0EFD21193FEE21B3C351CB
E1DF134E3ABE0839B89537514B3CB54FEAFC1F58CE7A62D64B61DB6F6509FED4
BAF55990D09C3C4111898E1189AB2B032B8CEF0601E5157B58F6944D4EF955C6
FBA63475F80F39BA0D6BAE00817BC64FC0F8DEB29832D53AFCF58115AE75D0A8
E317EB4EA159E151899FEFE59FA506F8812F8DA2BE72F0827246FCA44E445531
ACDFF47EA3BF4C901BEE4B08759E95A8672CC666EBCE127F142339F566E12D07
B1944DBCAAE4DAEBA25DD63DAB617CA8B941DA69A928EBE46A46B2BF9CE5FE30
E2A69EF059754C9D3C65045928E89D218F17DB0CD573E9BC4B9FB3639875028E
065F9997AC886E4535371F2AA523BA4ADE325CE7E648920DF308FF97BE8740A8
16C9CC7B59EEB58335FCDB592821C77973D7AE65E37513CF5C9EE13CB67BB0E7
6B366370BA051B7AD4C4556A6C66B986A873AFB901376427AC06A97A5C245A4C
CB9D4320925A3BDEEEC5D09AA10EC89BD2208282ADF04ED5C2264211DAD90707
4BE3AB54501FCF0EC79C14FF5AFD4DEAE3A5330BC8A57E29AE4FD9940CF1788B
15868B905E535C3073F81D368B45A06E261C5579799B6BD986A2913E3B917EDF
3D43F47C6F505F302F7368911F6BABF3E4989AC38D1EA3503922CBD0EE4804DC
BB1C1FF12E5BFED5253156E3A76B45CE938622D3382ABDC14DAEA66002AAC1DD
B131A2410F8CED6F51ACE77F2EC02FFCA16E51B80A519D24B1E2A27877199629
24B0E14E99C1DB82AC245BD24F1FAD00F96E1079013A159A4D5B672158A7A534
CC099A59CC512679E6F1BEE715168B8E06FFADFC82AD06E6ED68D88540FA56F8
17D5C1365899044BC7CBB77CE9232E76BD8CC4C5663BBEA54A31A20B53D4B46D
C4CE9B1F356222823A89CE24488F510E909A9F0C0BBAD260789647311A16C782
FEF3BB25A188ABB77A8D8A93CE85FDA146A8BA55A18E4CAC6FED9AFA6D7739EB
2E6DD3F98C8A994174CD06C9EC8507DD76E61C4535D42C2E8447DD39ECDB8AE7
68BBC018133D431291D0502999F70186D02F594CFE19A1AA1C9C4875AACA3C8C
835AFEAA94D703E5A4FA23A95AEA1FBB2B9368E4B18DBF81D8FE216E3C2EA142
506D382F960313ECDF75B63CF09027AFFF588B609A4371D357C984BCAE07C64C
B56DB19F1FB6C2BC8957947FD320BE5EEFC83FB2D1683AE18E8A9E1237F0B508
DDD3D07A6AB1759164D2F6F3B363ACF909ACE29EAF9F2A30760407EF8BB7665D
349B37578BE9E971D9592AFE1D6488FB64A024CC33F093D691999445715C2503
CD22C38A0AAB135DEDA70A37F7C830DDD99DF6FCC667A5B810B665511E884998
0820699F9B02B7DEE673E177D62798DCC7AADE4A37DA34744818D236CFD0D36D
63C46B50EDF127EF0B78B7BD6E3F72660ABA564BFC3DC06802FFC00814F797D3
CCF89664F99D34646164551E1E2491729B34256E7F84589EF41C9B6EB5D7DA81
F99F3B847CBDCC7353E53B6F6736F72CC1AEC0EDFE1504B6C2C94EC87F51E0CB
FD1D5666A7517E44F37198657BFC08C2000B9BCC1A5F6A552FA9365E8F09BABB
0B9F21D3829512DC963AAE185141E9166F9DBA1991833B940C8DAA38A8F46A5D
E2F5E3E026CBC21C3C3602113306112BECD400899E7BF14CD63DA1AB7C907E2F
C41361863E56929E4DDD9225361F6C63536BE5441120C15D38C7C0215D345E94
206009C34295C6E4677E7B9C335167EF7528F38861F2C51F5CF7EFA83774870E
99EED3D74C0EDC41BDA6D8EB06A20E3F70344E0F6220F6063DD3A44072F1D24E
EBD0E9D5EDAAA10D60D93E9099CD8C0CE8B3BF58E971F0775CE085DD45A285A8
5AF350AE717A8EE630761C9167994D589C2BEE924397085B1317D50229D50FDA
BAEA021D86D68B06B537830400478600592C2FF2A519E5ACA10F637832A48EA9
712CAF7F3009025CDF190E9C4738695EED42E02CEEA81922FCB9A6BA94EC1680
2DB8ED8C15960B4579F104C3250F5205F9E44D43DBC6D9B820F706BFB7420356
7C34FFB5F7B1FF17874AA7CC620939F3BA8AA5ABC545828C237C3338EDC66E14
A05F7429969E4E7A93AA015C71A33B9D2135B92AAF2399D059DEA52769871787
CD959884B3FD8695CC7E4D624573A635B65951DC366F76F81C745F36FB252F03
35FB50B3370C94D0AAFC1CEE5C142E7ECC7824C639AD06CDE0AF594B54741D1F
A1D7300A50CDE80970D2C0207AFE2AC43522F946522883036E4DD5B96BE9F4D5
016AAF1D12025BD4E084BDD651A058F994334529DA1EC89BA20D38749587A5C5
51BAABA73EECE052D7CB229A02957DC2B05369FCE1CD45115C3FE3DA67AB86E9
E332F5CE4965766675F98B589547D1E51004042A4CF29E1667ACFB568F5B11D0
B946D6F167A57E16AF9F300C455AEEB30CDD6E6108747FD778A0042C6E3C0CB2
328F16E3ED3B060EA6EEA5C357DCF649EE55A3ED88BC72667404620735C9C7C1
1C21678D5BF2976B8489770DB1E2867B471954DC9532C3662DEE6786088867E9
C17D5235D3DFF1CAA67AC1C969BA6ED87406A69B37B121C455AF738AC04F961E
0315EF234C519D4B280567E8D5B9EA0DF2EBE6BFFCC4E0D974E111E78EE7E862
E8A0D30FAA8BD52E7209B2CCDFC5C765AB9E07DAF70AB37067E1673C50145F1F
D662DAE00DB612487797C6E9D663C5F21C125165FEB7EE8057AA533FDB384796
C7F99FABD43852BE23A3E92129B0153994A4B5733CFF1C36065893EC5F18F4BF
FF7170130A8B5E6DB7E73CBB959922A2806704926D5EC312AEC7DC0987509964
D5C732825A3A4FC1BA11BB577CB8E659E0EE37F2D9EDD3E6C1AE51B09D450B69
BBF840A587F733558787712405476EA9C24F54D423E73C63EE41F5EF03454D5E
40D3032220ADEA373E66DBE27CDBFE46F50EFCB08CABFCB2105332F688E1B40F
069AA0A9A2A8432AE0E716BD9E6597924B9FD04AFC3342DA818FEA5201F90243
594636DC4D65285656B511DEB7826B77563C32B62C492BD8F7DA28DE0D4E7085
6BE2930D3B469DE9F408D778E57338E8A29AFC2A6A5CC5F7D9DCA52F5EE2C9CB
AE64B19AEA6D54092C71CE93DC6C1B1D2707BAB7710BDA7EEC14471309B4A28E
F445353F1303BBCDFA83E822BCF544443E145483EDD35F9E03D4FE34D4D99505
5EBEF7CBA99F61492F09F6B9ACEBA429158C59D11B6AA0C0BFD2331DCF080A66
9EF6E7FA7E651D6328D80B0468925B32E18BE633F0B49F5D37BFF217BA82E332
EF6755E5F95E99DB242EB1ADB8E291B92D984F4CB632ED0C2C1FB31D3A72F988
9F590D1F3502940D2EF6CA5D687455A5C06FA9FE64CCECB61D0BC5145755D5B3
4A7CF8698089669AE570D193CD5E50B5CAE72E19C9AB27A302E7159AB9C7DDAA
73222169C7140201809D85E0B3DC6883D107F8583F81C5ACE52EE14B5FE74A5E
54BB141654D461B2681AAC16999C8BB46ACEE08323447854B27BDE7BAF5F328A
5968EE7A32DB18676BA82CE43EB7786B148456ACCE89DA8292A4A501CA706D9E
83570A0152736A1BA2E17DA49FB39892D4E91C6B7B73B86F9EA8007917ADC793
89C728714A54D09BCB9900E221FD8682462AF96BB149E7E68CFF114412E6D9B1
C4A1CD8C389EE5B4AACC1F8241EBF820FEC3A0206648F2162734B370712F8268
D61253F15893AF75E40815CBC71EF57DC8FB48B6DEBDF0BD78C190896D26B759
0913425E4E05E3B0B506897174E6A2F13C0CA0714935570F4D4A6DC08F2D282F
53A7D3300AEBDFC79918FC186F5705E79DFEE3B2F3195966037CD18A8BED4BE2
0E52767C0D6B1BF5505C418CA6212C307C30A8876F17C91274D91D281E17418E
306FDFA21E3A4DF4BA9C167DF53F62AD140D8F7565B8873BD1A3B79D176AD475
30BAF8A6F0F131C0874E3C88C97818E42CBDCF311CDFF05C37F2EB54F2D6237B
716170C5EA7DB77612DF679C0906D77AB2144E81027924A3FF370EEFBCD54039
208ED7DA3A6C181536F2E527B13748C9FB4580135B616405F42758BDD2C8CC2A
8C94C6E4B4BB39726EC682E85BA7C7B988B0CFA983FE0C9AF0DCF6CA9C06832E
0BCDBD641B9E673F20AFE5D04C43B36ECD96CEB82DB4F150E0826E153180D394
B56F97133D54B875B02A026097A3A165328322752746417F8A09B46EBFD5E662
5286B9FAAFADFF8458994798F6A9BC8286884E2083D636409679984282CC412D
0F131CCB72B7906959350AAA08318765F17BC2B023A0EF0EA44F1974ABA413D5
B589CE32114A8A07D01FED1C41AF6F418DA9E81BC105D1C9AB15C0130C8CE2E9
63F9079A1B18B0768F2742579AF5270B065493480FDA1C53F89E72E7DB128248
57DE02F4E28A3F99380852A6F09532E89E7E16CB236D5D5686FCEF075F74E98A
5AEFCAF4ED13ECED0E4C9565F68B3756FFAB8FFB6752F63CC9C177BD2A19737B
856FC37570E7D8923AEA4094BADB9A1AA446C28EC4A721C0F90E60731B8A633C
4BDB00A449ACCC3C2DD6DAC687BBD57FF9766E6FCEE89DE5C3F2A05C77BFB7CC
0E8E861BF4B3A4BDD20B79ECB178811064C22DAE0946FA06A0A045D56CDE8EB8
6CA98E5FD25359A10F84AD19649A05E116C742F972A6EF73F2988EDE5A80C4C8
B98874E887A00B9974CA6F28A5541A45BA4EB5D52C3E93439981CE3915D070BD
D212BBF5C833C4E458E6B489ADF40503BD7F3E8569FB67AF8A0EFD0567EF5253
C4FC094C977F01F094E0732E173BDD0A4632BB5BF42A3FD65CA438C6852533F8
397EDAFD6E9D833942F2D0D292301B30841C114A889F2AB9A0EC37CD7D7F483C
FCB5FC6D6B1267FC7CD06234FF03D923FEBCCD04862BF7EC52DDAE70BA98D081
496BD56211EA9925A68B5F5932BC40DBBE83B7183357BAF2EEBC0D86EA640031
B5C534EDD806E6668047D0A684BDC78ED467155C56F137B5484386FD16ECA153
122CC07E288292177A18995E7D8153831425048D01E044E1136E499133B2EC21
34DF9E4F8D980CFF69D9114E3657CBBBB180B252BE9E4EBFE9FC9DCDC5BFEDB8
A9C5496EDAFD87420A2D4F81D0530F7383E3B9EE0B76CF7987656DDB6902D338
87B41AD70DBA3F35EFB019FD5087B407031B9D7580B45EE76FDCD22B34AAAAF2
4E31E4033FC090F67CA7A61EB9D742E8655A74C6F8BB4CC88E5D29C7276B02A9
9A54699C48E5FD6F5A47B69D8FAF556D176515AE31306C49F3798B698E9879D9
06CCE3DD6D2642911FB5137597F9697B34FBFDCAE806BCE53AD1E9C1EA0ABC81
3067B8E30127B2A638465533F260122831B2835890DAF09D18C3EBD628027033
1BFBD1DD3B14B69236DA0B2F8210F3110239048BE848173FD6C22BE81942D107
EA3330BAF8A6F0F131C085DAEA328B5C7E080127212E2F2DDDC953E65A9CFF5F
730BB0E0DF3AA6D9428960F116A82E401A42DF1363F887A465FD807A889C7677
E22FFBCEEC1603AF931217A9ED440181EE90E87E1C729F903F9FAC55DC785A6C
5173E46E32CB710ECDF21166AA7BC8EA0AC732E711C6686C97A9ECAD96FCA4DF
94F332A6C8BFC920E557BB8B14BE68C23B1DFC2106E329D3FFC3C07745F205FA
AB686CD8D9E0D8A6C3F95CC3C3D89DAE81DCE80EB555A9DD737F2069BAA3B2CA
B8CB7782FB069AA69C73983345FA21A66473463B73F68D1372E6F54FB243BC6C
65B43BD6A1FE5615A35253D968BEBD7417133D5B16F4AE651EF9E8E09ADEFD47
1CD75FE1CA6196F4F1C1B762DD12E14061762970BEF0DF2CEA32BF751A2855D0
06138CEA62A5A47904BA03EBB78AED5BEFAE55BEFF1AC6AEDD87EF766B644286
BC4801E650988168A2086E60EFE619598C6FB61C68969E41A8E7EB6B05661823
88053BE2B8A48565DCA318392F9E2DE90B615B7B9B251D760137E094B88D31A3
CD93A0AD93EB41144CD3075901934F48A017E490F2E893D021DCE6D04BF213B0
8FA1325B505BDB7C83E7F5AD2C879CDACC0A5745A9D1923A85FA01626C1B585B
C673484695FD9C5F3D3615D8B41216C53E81F0970D9DF846CEEAB0F72479ACD9
EBE68622562A0713C05DF5F69DCD8FB92B332FB6509FC3FA395199FAEC03C4FD
DEB11CB8C655A723541664465FAB11692748D4F5BD7BBB326161B7589A49A381
C62843B4E011BD669C86A433E8D8C92F7A6446BEA35A82629055443916CBBDCA
4BA9F9015CF574EB625EF04E8CB7A963B6829FD0EBCB11FE64E204CAD8911846
826BCFF7BD8D25399D25BE5BE4F4A269AB6139F5587A8BA678F4AA5C96E60423
FD35F20C7BDC027A34721ECBF8E9DB1C1AF16E4FF27F29650ECECE342A66A4C2
7C0A43786F107BEBBC9E01AA7172A87502B5BCE286DF49CB961C8B485BE2CFB3
AF841EB6FDE2D077266A39B34F4B3F00567121DDF6C3C04700985205A6E77500
B272223B0CA7FC0229068FC2081EF9BCFF602CBF4D382FA2483BAC15C7B0F337
7F3CA067AD83133AF9B9A07F8F3CF0681E5072125E569334C444E7473213679A
A5E82B1CEA048D73435DBC66A7895AA7906EED016F901524EE605C2E6B539505
7A2439ED8C85EF034E6070C3E40A14598E8E00F475999E8F9AE357BFEB680F90
21C40E6A8472FB8005002185A9D082BFC7D9354EC9A9A5C1EE7C4752DC9040B9
EC12EFBB3B3E5D3CA1CABBE7515F96CDE39CD61D9FD52ED5283440E495560E43
19A507DB4EFFC20A737C44CBFCDE101AAB6913B9819B3642F426637B88F0B424
AA60711B28231EF6845232CC89433E1309897C4C68E2826AEF5567D53F5FECE2
43E2D1C09E72ADC0554EDE4D2E6C0470348BFE2371FE9E72B9D27DDF17DE690B
1E20F14B94082E7DD94CDD3B52B9E0EFFF7168BE6134E1DDD4709AAC6110CC5E
AD252C7EA4E170E8E16EBAFD89D6485DCF0BEA586A9A239F7778D68D75E3BBD1
89AE5CFCEE59FCECFFC91EB3ECAEF27E5ECBBA7E7F732C45DAF02BD21394DE13
62E9DD50A7482D8AC50D8F562F2D76D0F92D620B827D8D1E1764F65ADA91D270
1CB7A4AA406AC1BEB75B53E1B9BDC776BF3D2E803279995B7A4B3AE05A12F0D2
3368C177B84F8082DD9282BBCE5E50BDA63C2493CF1748613BE68F221360C03F
EB118AE510267DF541AAFFBAFD9547DFB53628B8588E3CD6B827A8DB1F43AE03
C88767C911D294B473A2A3B05FF42163889F1266F35A1DD5B152D2B7F1B8201E
8036C537E8F6B9C7CBA1EE6E6DD3CFDDFA6526E6A197F78676A66DAAAA4BE879
52E81110EA32384586E2457814D36D516A54357981FDABFA25230CF1C25457BC
240B07399AB96B8ECB5E88B1ADEEF75FC0B34542674CCCD17D5E0745F4A75001
F2E9DB7C7CF5E546F34CA42852397B9A9852EAB0E1C9F7328E496683C2CB3E47
16F48CE05507447E290E5C9AA8696D0BCB656DF4B213F43E7E565C737532B16B
0C2B1D11EE9968A71466748187222315252264773FDAD954D1140F89D80DCF02
DECFD422DAB156ABDF73CBA7DE351875F51AEE408EF5E45ECDB7329F90BB8581
BA8BE650B533E736D2E15CBE3E66E333DCF23EFE2FC361E1EA45B24007478144
8B408D5DAB41EA92DAD7D9B002F5AE1EF7FD23C8AF7B4395CE6D12CF7DF6BCED
CE7A3AF35587FE085FC7B80A81973105F3E12F9138674CCB8E886D0C1D801AE1
CA542205D2145DE41847A2C431ED3D278574CD5E1CE3CE7FD85E2AB97E13BB50
F4C90F8E99CAD0A6AFACB4A540BF9FDCCB2AC51C7B693539C50D907BD5E428DE
C844E83BEDA62E14E5ED0651D1A168D2E671503B6801968AA62694B431373543
F54C6E57B8BA286BDA26BEADB2DD8A73F41D0F568CD83ABE19752BED36B7F620
5B5A42AA5BF156D9CAF9620F09EAB0EA4B4B68C381E3C034F5D341E56B2FB543
746F3B3CE69F746B0E473263618AF3B0E69614C2E386FBB4B47EC80423384A0E
6F1E593D734DD7CB5C9B7DBCAFD9B53928CB0BB9346C6FD34058E37FC7799900
976DC6FA56F51BFE1969E63ACFC3E42AF88FA2A7B54BF0E68323C210385FD72F
DE4D540F5D15EE7C54377780B0FDBE164EB7200CEB625A2FD1449128DAF4CEC0
98942A57659130CE0C8CB226F1BC715DD80FE8A7B6C80DFEDBA2A03212B688B3
7BAF7CAEAD0C178A07F4A84C5DD989C47288DEB2DE91E7A5A4CA9924557041F8
215E8ED4A289CC7ED928B3E2A2253047CC819D8644BB874493329A8428D73100
45F962208FA3685BA1BA65C8D2D47CED154B7B57B74A05545B974F452C31BE22
55F7962A85DC3988648C7F7EE1FBEC467D089738DFB16755C7D0A038B6BA98B6
070FBF9B00CCD632B007BDD3BDC7E5E7BC0A2B16D5EBC947AAD8B00581324CFA
01A300387176D4DADFDF0574A34FF5A7F47A236AA41FD789ABB5E6428AD036B2
1EA633B049B862B72FFA7E7B56989CD41D61FC2B996D405D14FD429D7F5600D2
2E6C0CEDB7DBDCDA7445BFC34ED8D81DD9CD07C85CE28C027D58F63613494EF7
8A93B8E8451F37B600BB33844A8AFC99172FF1B8E7308C65A696275DD4BB32D0
3DB1D131F46628FCE80FD44B49B886E814C52587EA7C9C8B8A04CFA89B4CB2EC
F89C99000BFA64BB8AE5D67726F75030712FE2637D6A2BD7B5C158C66B525C35
64D5F142900353EFC3A756650EC4153F5DAD64E94A987ACC9C083DC6CCE35701
CDDDA2CE68DDAC0DB497B04EDF4539D429AED90CB0C35A61084D2F066F4EA86D
1C8E6E3F09C25C0D146C3A76223216CAC3FBF4A8831E362D378B61D75A81D027
D4FFC05484B0011D8D72A4EE981B54B03BFBB05D94BCB27DB2FB1A30B42B2B78
E1DF26D9B605F7DA46E584627E03FE76B2B0F087D6450C3DF1DC82E66426E66A
7E76F15431A1A33F9A3D8C9DE6856D289B90F3893CB2E0B4C75AF1F94557FEE8
4A8446AF589D887C2344393FAF7A64D50E2D969EB0B7E169D0A36F6FBE81004E
9DAD6FA6893AB09D8ABD4197907A32E802E47E2507EDD79BF25B6DD9DD38A0C7
160D44CA9AF3BB71F5DDB909B8C8DA97B59104AFCB278FB21D390AEBCAF194EC
9A3ECDEA7AF7DFEE2B5E981A506B03CA1C5260E40E3249E6694A24DA005C04AE
C7050C0D45130CD61909E3CA5CF0DF52B6685A9061C47904DE9A4F6B520C9D0B
0EB397B1E3B8F42C332B8918E8357808EECFCD77FAC71FD55A5490C89142F284
4CB7E6352B01A1218B4FD7D591A617EC7403730DC7FDC3F6298C4728CAF93D14
3E1A5295BB56A33C5F907828FABB6144AE88642C0F6D0FACC20C8DEDDE1923AA
FFB416FB3029ADCFE6F279F352DE28FB8FEA0015CC28BA9335A593116461960B
D66AE2154B9227AB5D9DB4B7284FA0E58F65127073A3DC5D6F37D2BDE9E18C4A
49EE7BBC8F82D8EBA66BA5057158C39E13BFB45C117A3C3ECDDD3470C4954208
0C0A9DBD22DCB24CA9CFECAB9938F99A2394F2B5338FB62342839AF3D5F4DA9A
0824C92C7757BAD964F6AE9BD7C7E5665B54CFCA5BBE96B39E69D388D9229C1E
361D6C401807FDF834395B17DF67193ED3CBEC072A1A2280681255B5B1268A66
5A68223DF9E80FAA8933AF4199D0A8686E42F87C10FF7BDD24B7579343DA5E55
47E88021B02A5EC0E53963712A6EAD0F218DAD2781926594A4119F428855B760
5AB38637ED07E35BF8FA4A27354C1D5E7E3A095D2A5099C0FF489438BE89DA50
BFAC7999BE4A23642F67A6EC207C1DA42B88E2A7EB07FEBF15C0A15C0769F779
C2A6B60DFAD490E35D8D07C0A1D1E80A91B1966122DACDAD6DA564240DBB4946
70FC1804D241E14CEBF0665194EC9D21C4CE14300E0582551D09E5F84F91396F
A3049517C3A95D471EAE9D83E664D7CEF78D51D427D6FACC12C6089DF41522A1
772D82F92392B9224C232CA3A86FD0A1E1A553A05978A4FBFF7D591254A5E3A2
67B2293BB4337BD48BF04D0244DC6843B8FAA2BA68EBD241CFF5E0A2217FFC8F
1476909062CA39FF12A6C27A36427E5A18EB88F4804462ED7EE4BF10830F1776
D0CBFCE603260A277AEFACD2662EE21929A553000FFCB8BDE529DE5C56C84DC4
396659677CBF68EEB227D438124D42870603D2AD96124A6E023146F80A900092
20F45B2E98C37EC1F598785EA53290B348F1657F327DEAF864E2C4DD3B9A7B08
F9457AA1D0F6F72F92B61A915C27B0C4742C11440F024431328D16AB5AB1AE2F
5FF1982C170CAB7938D921D339F057413CA1F683F07CFCE2B47063765D5CA523
DB0544A6224429C737C96FDA3AD6350EB8C07689BEF7171135278BED55DA9CA9
E34526DE0C1F84E8AE202EEC5695BBFDE1D7EAE5F2AB5F1EC0977B30D76B06B5
4F1E1C9A0AD41F8D7F06B64843B6C8F0AEAB91B33E05CA7B26560B0193778B7B
42FF93BF7EAFF1EA97211C13D02F8FB9DC6726F526434CC2FDC35A4FDC789223
E2171077FA36BF4A2C23B411F9194284DC7263DFB82B2B92DBE2D806668FF731
A43F7E857686C12EFC4A5C51CDA632355D8080BD40E6ECE778CE28F9684E303C
2FA271BEA80089061080C74F32F47782CE20F5FD61C8A56D1B423E95D102DEC1
6E24B30C4BBD86314072572E95531C63613F07C868897CF13B4E4EBABA19E4E5
7DD7DE2478A2B157E284DF51485E52C2815090CAB8AA47B4969C26716FC2C9EA
964EBDF396DFCC48962614614373B33356219BCE678CD0084F1DFA0E42F71185
C1082ED92956B143C57E65CE2EFBA1C6F5C0EA12CB176584227E9165B5363270
38DE78EB2EEBDFF45FE65138636A21B4AF3107510557EAA9071AFC474CA8C3A7
79C60649618BE2D942BA4781673607BA8687FB4E59790218BEBCF9B8DA5DE012
2239D547A68A965B7BB003D7FE898782D4F4287A9558368B0791C542505F3BD5
D3CDACE8242A39CF5F41585C9E0AF4F434B0DE04BC46D5AC2D496F5B7B61DC92
F358DFDD195F0EDA6D0F3DE97C76C16514FE4734F63FF6F394F00E79594F1CA1
463426443F3A777EDE774B4792EF2F03615E94F787E3E726E23A768EC82814EE
A06C4D3BE4D8520F7676B2EB1444E570E4FA739807741B87D4136A050694B090
A0EFCD867CF27A8222DB20414F1D22F91926361763B8EF21CCDCFDA14B561E74
EE1A9983EF1CF8DB5AA29D60B224C9B8872CD9E55B2E3AE3B0135BBA0DDA3F3F
7061C15460E3C1BC8E20988FBC465C61534E0C331CAAD340B7375427190D9ED5
D06C044ACF5A89C3EFB5381856F76E79BE7F42723C95CCA984D99A87BDF1F544
9C2169315824D0A6BB0AD8D5662A85EDB2648D931C372B3188E10E4515476765
6838EBC4A3150A8245D635D327775EC86682E5ED5A50C4FD908EF3624DC664BB
CEBDBC0C99138A50E5C0F57977D929DC9CC20446E0BE6E4DD3C751E3FD6AA8BB
509B5085445A66B75B9F9966FBDE2B55A8B0031DE455BEB83DF8971CCC369E41
F8647BE25173D9C0204EE6BB408D004F25CA8ED1E1DBDE6260F4B0C4032A9800
E5888A245527E79C94D5C6C671BB6CCB2BF3DE8FCCEC8F095F164208E827A9C6
0662EAB46B72FFD337D62DEA0EECDAC0ACC8C1B258E39CAE44F53C24F832DA90
B09507D70105B72416469B681D9ED8932A026D57E5E0A4FB5A0D5D33B7C86B99
50BAFE0D810CFB3949E44D955DD3AC4EB137B63982514CE4049186559D16D4F0
807DE5D708744767B33767C30A8247A32855A2BA8EEF33AFD9620EF954759255
87E7F5A5E0008711046B4273C4BF2D389770ACB70187BF79113FBEE75E1C89CE
F2DF75A0B2A6AAA7D8189F35B18BD19C54C0028330F91062E414C20B136B93BB
70A7AC9B2905BAC1D0E0F6E9249B70E2C61D74A141ABBB1B88E0641343BC11A9
85F3D4D1A0DF6DD22AEA01009D756B443099DC8C82C779EC123B4526BF5AF341
A28D42293545F332E174498113AF3AFAD2EA79AAB983A45610E544C76ACD1DBA
92E2FA7B1B2326F31CAF13F8837BF0BD3555B302ACB4D205B6AB533A5CD92C4D
45EE68C04B6AFB688358F195BD4E349943BDF078310CA4E909B77D25D16D5EE8
DE6DCE41B8F5CC1F697487C3F64E52F280D21ACEAE6F4E4B0F7428C51760E7B2
BD1AB594E30D797581F5A0E81AB0F7ADA0E699366BAA2EB284777A24DD129026
E160A6453D3EFA786FF82303C2CC1B26C78B74DA6A52A4DE356AEE02D78D696C
70C17BFA087FEE62CA0FD73307E9D91134BD4B1AD9AD0AB05C576853FED0FD74
C459D1F1662445F14CCAFE8DDAB38514AC894FFC699EF8552C982CBF908C1639
6253CDCB9CBB023A2DE59EDEF3B19FCE4C0848B672EA3364503743824DE186FE
85E4DDCC87B684F825E8BB70F615B86F0F94CBA2373312241B16051FF0F28B70
75378860594607A944ECB7649E334703D76B5439549933DA59FEF19EAAC423A4
B40357DE015B6C01EAA67EEF8FB207ACB06F8D465CAACB60003A0525271A691B
7535D781043CED8B0FD4CF74EF492C720ADBC23EE20233763CBE5F89CF59F4CE
C7B0D57EE9674CD283018EB513BB4AFCF13AA32B5EB6D2DC10C1B4C0649E58F0
DC905F7E13555656242DE62A4E990DEA11091F0DD6C57D339CD519AB58EC0CF6
629EF00280B94C659530D29617D1737D4A6E9159F207742D31C0B69D5D85EA44
61393BD85DEB50C782BA8102126AB0585242A0053DA361F37D082698BF03627C
6DD6BE703D6BFCB8CB8E80280A4F1F935E5559562B64D95C9CB834D9079E1122
56C7F478ADCEDDDBC500C305EE0A6EF848E437B5068823228EFB88BD07B27CCB
F0F0EAEFDC97D103B20F96993D1A99518BAED16FF35C3D8F5FD307C4253D177A
8F08519979552F158A3221AE9CE1E7A23640236B97F29081A7E0DFCE422739C0
C58B4ADD86BF54E9F4C4CAEFC15D5D7BA5444EB942582DB27E6C1A558845057E
7F1FC03853CE5EA4DBA6728946C135BFA75A9EF1A3E0C57869537D67C3B3C432
B24A043124FE60C9C2ADACA32A4C5D3EF840B9639CB10B78508923FB4AF9CCF3
695A011A3611548561CE7D6B0FF36D01D3EB5752CE97C71C4811B87B71B83887
423C8EC095EF9E428F95684C84164996CD000671173E48D4A90A7DB5437D587E
DE4B8F6AF0FC76BC1B1FD420957905FA6172F75BC7865E8137CBFD3BE97D9FD7
76E8BD0C85430AD13990FFCDB564764C4627CB1675AD8F922E6C8CB669074E47
393EB1910C38D6DD68CCFB5D5B1A9049ACF2C3568466C9030814A7A4B9F62144
65171F3AF111E2722605554A462718CCE54FD31DBEEC75234E4ABD28D403F75C
C1E5A6817EF7A21E75AD0820BB68EDCC2143F284391BBA9910455E7D8788C044
D049E9EDA646051AF86E03D22C944CF66D45C355B8679004B35D754A18A615A3
D23ACD78645D8F21728A6ED721F201166F975A39E6DD50A266D0935A3934B76B
4F01707D16191026A9BEA0984E9325DCE27933A562A33416D7984F69B0C95D4F
B1255AD1F1215A69C26EF6419C4C129B5AFD085BBB233CDB334F258B4D4432BD
E4DEEA72890221F1C1B19AC7CB804C24DE55FCD80B15A0764CB9512DBF7D7088
81326827107CF6AF6B26045F0FBACA72E1A52D295DCFEA471C6908E70467AADD
4655B097356463BBB66622786485A2C2BD6042CC83F88D414BDF942D8B488177
A8C8F976CF4DFFDD78242B8E0153D56F4BA4E510D6374411A8BC13754BFA82C7
B080BC02CD35E3901195B8C022026EE7832B66F8863929E5A82DD2F1857DF270
222EE018628D676C7052BBBBD7DD1C7C4905CCB95AAFDD26684C7FB8E3CD7F00
4464887521FF07364E2B3AF550B585A22850DE0D03C620B4684629A9F8EF3F70
B6D4FE2E16F9608596B17543A4C8DBE77CA489DE95EE1BB6B3BF960BBE3EA160
43E0B9F1B13CBFF73979FB65E0E17D028C151FE105AE60176EC2ED00D3F7904B
C1667E0FD820BC0CEFA06A0ADB73B654AA51CABC6B64E516B240025DDE0F7EE0
19823415D687B07529D845A845F8070A152D0E2AC7D0CB09027C0193ECC893EF
67A03104AB18BB16999975B2E5FAEF674FEEA06FD885F526F1AD5487D53DC9EB
8AF6D8424C4DA1EDFB238EE50E65031B050BA5DB82E42DBC90DA0EF1C70025E1
5B198A548B808E2AB0BB26745C4C727F2EC763A95F2A46501CA52FDCB634318C
06B19AB5EB9589BAAD384D0A91E6C19E3B052F32930B8F7BF8682C988BBBE9A3
26C99513F738A36D653EE25BB64647C2C4819B80AEB8B28CE20A5DC3BBB8DD2B
1595691AE6B028768D4819E6DD3F5B2E81C4ADEB78C668D50C3BBBE7DAA698D6
00E4725E62B93532F8B63C032B7A001FB997F9EB26689DBE2A176ED654A4A8DA
7DCDB6D5552D9363C81D81C6A993558851FA51397101800F1B92239789E8BBC2
FCC830E508351A5180BF67067F903B773EEE1534801B13B295524A7673F18F2E
D46E019B2E543D95B34E532F3B8EA6600F43849C8EF72B17F37037B5E5BBE917
F26CD618989DFCC0240459400103040DA10C28DAACD4B5AC78CDC6BCEAACDE00
77EA8F9686FB8077131EC3E95A6995C28CCC39D262246A5434CC1564BCE72693
C026BA7E0A1A32A27E91FA346A437CF0066E8F6A602DD04AF95D2980364750D4
42AB59FBBBAD78770637457456663A40E4F0266A4223D459F27FDF2A289F9EB3
4AB2E68A9EB33E7C40B19D1F365D4E5F89950BFB11E1F1D9FB1F9375D8F393C9
D87E83D9CA83971C6B4940087FFCF146258A5A71728135A04F38AF0D29598B58
A82531DA539462B2F56117523C624AD89C5716A59B9C3D3B7E38C99F44F5C5FE
38D61840C61B566E453836AD573DFA799FC840D200824879928B66CC36043374
92A76F179B4DC7E6D3502A2689C5588F63FFEADE2776086D0A2EC334F9F1545C
D5226826731EE3A55870A38D649FD4A80EE5E7BC5AA4EA15A3C7D804F250E3F3
CDDCC4702762963FC3CA839D28A8520B76E3B2EF7DC8CC1EE01EF5EA9A359570
4FE9DEB7A5388DD4C6910B2E37B54DA644991ECCC07DED2405EE4902944A4A89
E0A2059C2D948B8AAC3976DACA06042804930C4D148E7AF8F1D14B074B805B48
C29C763B608AD4F2BB436DF0DF9EF5C22DCEC7490AF71BB6460BAB6BDCFD1A9F
E07BF56FD90D40175D46DCFA40952128C57D0DA53143D229AA167FD6BC7E6A06
91E01A8612E31696C8959ABDD50514B0B32FF894E5748F2B0BC88A455F2C2845
16888FB43F7AAEA9CFB7278FB0858FF28DE68BA82EF3E6491E7667C9D6A7A896
168E7CBA23A4A758B689F4E5BAA209BB443F50D137180EB9FE54CF466FDACF29
4383CA795F6D133BBF87DCE0443A230ED24D131932299319134AA816226991A6
6B7B1A1ADCFE8E9DCD558F7E1217348E17382A446F701AB84D0D8E8D9EC93C6D
F7E39321221359869013AA4148A7C129A6FB1F634383D75FB3FDC9045821A28A
238F43BA6BCFE3E4F4F3E4B649F50DCCF0E7300F78B7B0A3D98BA694011E4467
3A80097658150A60FDBA8210B214AC44EC50556025C9384D93546A29395A5B4C
610440A853007241787551650CEFEFD7BB6919756785B7D6CA5327DB81FA549F
BD059A2D13757757D3E94B55C927898F3F432BD16E9962D43B2921B9D20F5933
1A6DA44D3343818AC9E6ACAFEB4A5BC991C64A1E3DD3DEA41E353977134D2BC5
3168202F1D38AC26B450F82682FE0352B8372D211AF778C36F3DFBD3DE9A7191
414B98A4ED4925C5097C536EC8958F6D445E64079A78CE8688AF5D7940E8A8C5
6C88AEEC682D1188214496314F12B086345A0CBABCD78B8B84E82EB165CF63B7
576CA67E2E3C8E801EEE25E118B49E3CEC3D596ABB23D3193AB0786C7530B5D8
AB559E2EA4E4996D5543591CD842CC98BC3CB83B62372FE843423B04AB21A481
0A7C7AB3672FFE00DD1222D469B24BE2CAA08D402F232034B7BC7B455B1E005A
F8E050CE85011ABC2E0946F97161CE16C2C8C582E13D3963D740645A8E16E8B5
6B1F786A855F19630FA2E83C4919EEC13ADF5D5249AC0B5A9B097AB53368B616
8E2F81363D54759EA66AE78668C48E0C2018C61C6AB834C5BD81DB04E1772652
62D2F8CAF737DCE4D109E57BA2C697C53CF8D44C5D9BBCAE81301827B6B19851
9A323BEB30985DFC11D07EC23BF3288879325CF596D42A558398DDCB6A995B00
A01F8A6B1BD2CD12E6277BDD717202E7AD34FEA4D604A7FBC4C21502D99CEB47
FF503081462DFBB6F6A0D35D23B9189F2E2CC5D15D47E5854CAB0932AC0EE8DC
810672EBE57676CF262B6DA8C8915850913BC37CA9A739A72732926DC8CB4A36
322EBB29A8F4CB89201D8B91E425586BF3C9A10FCA408C0D77DEF709BF436BF4
21CF0068889411F245223E0171E16C4C2EDA25CD5108F1F39DEF5ED68483965E
CBD55595B41820D0F26D624661777B83AD34C27B565EDE236C1EC89D6223A0C0
323CD4B17D3FCA04BAA6A8B7B594DBAAA2046F29998ED8DC14646730A7EF2FA4
BA571D2C7B196CC134D99EB113B1E3D3D10FD5DEE3F7950C87D7DDB7B81CA91B
9ADCA617B8D813FC292A572B4E951D6ED86338F3B0F5D9F44A6C5EB753D9227E
7804F6DBF763441C51E317A1C27E5B4896E3366E2BD6AC2DBFD8852E0A618380
DDEFACBF1CDC65A2C15849DD2CE7EB9954E6A910CEF4EB82253FBC5D2602EE6B
B0D5C4251DBCE5E54724E1FDEC1575F2FCF768AF31D193A5171E2E02506E45D5
94280FB9C31F7C1EC3329667E6240342873FE0BAF781F43CBE11B86DF37D80FC
F91D5A880139BE5FDB2CEACAA446C780302E019A865722D8B5A64E92E3925484
E3FAEBD135E7A52165BC23F411BEC01077894624357557AF06AA37BF555A0E2E
8EA5C4355FBBD3D5C58112ABE47B798D09582FAE350307589C4D452AD02996E7
91CE28EB309DC30B5DFAAD3C7C2BE9DDB673012B356B367CDA09D3F178B531BA
45171892CA2ACA528A331F114764871065DA3C57F3DA581CFED268E5D4EB8417
E993482EB2ADEF709042DE0DAC68CFAF53AE423ED0515B325EE08A5C8821BE12
FD31D4C81354341003DA1623D1724F7C9D7081499590A0DD045D85AE80E79653
65B27D14125372EDECA164BBC3AFB80B1238B1822C8CE7EDC51C116F485C75B1
3E21BFAC42B518A02D264448BE66CA62F60659C7A2CB4CFEC588C47D90D3E148
9973BE779290CFA70339ABC09BDFB60B9DB3DE60F5ABEB947985A3D5CE37E2F6
3D1B34FB8457255B8B761B205365A728B50A37C8B902BF3DD17FCD0E401A58BB
68168FC25779515E121243466535B3823CB5DF95BB32847CF73FB3B914D0DFDE
75DDAE69A4DCA44838154EF08F9084059430D060A8BED49BCCF3637CD9680FC0
7C175C7D368DEE8CAEF1DF4B3F7758C6B1021255F6799F7D61A79BECA5D8F6A3
5FDCA657F3CB330EBAAB012C64F6BA45F16CDA574D355D5458D46DA2421566E5
93728C35C45B44F345696D9129F8E36FDA7BD237E8EF94FAF2863BFC908522AB
397156839E10B3B382C7B577AB775D905C43D689A1DCF1315DC5878D10B8173A
FAB99FF701230A83ED514C921FBF3D339D7B01C1FA3E2941BF2D50120E68627D
559FE4FB43DEEE11A51ABB6C65835B026E1E30FB6AB7A6BFF802054B9D2D28A2
3D580D4BFA86478EAF9BA86CF9D8A648C5EAE38E5C6740541521E3A44C015348
65544B867C6BF67FD09FF6F631C2F6EBCA4172899A42F6387E331E218D5F330A
317D4F425225D3E215D8DEE42DF304438147C8320B79119F429FEF1CD762C7F7
987D70476A536E1FF126D86420324FD93091F84795D1594DE61733290E99CBB4
B36BC978DE5634F437A1329979525097033855EBF43FBB7B5747F1A8EF2E4B44
A7C93607A987800FE2571A7E6BB666D6FF0B0F804E4C0648F4CEE1725DB8F4E7
3D1BA708653BEC6FD148130810D587A086AF6AF3A7A04612809390739880F602
785FC4D548C25FFC5AF7CAE9569F53D6F24A8AE6920F3B6FE66ED6B9841874F6
59C90D99E1000D9B4B18E79848C8826B6B522D981C3728528823D15A33353DEC
1AB4DD289577FF0D085F8245424D10DDA80B2E79F554A44E604E201935CC04FF
CF0FFE7E331F60CEFCE1298E6CF411C2B523BD8466E502DE939EA212D836C36D
5F0D3CB92E164666D927B1EE339FC3CD5C991EABB19560229A337C0E99DCC7E4
8199B21DEC003BBB5720BF9318740AC08D0CE3AC9B39AA0655ECBE82C9955E99
81F22E0FDABA884F9791BF6A7C936096DC29613B67D17CD1D04217545CE1E068
74F06AACF88FE6997575E89BB13E2D4F9D2DF7FC59F0074F95D49A2573CDCF8D
7E83E0C6F571FB7F140681E075EDE7D6258D27BC133C46EC4A1A296652C3DEBE
4F08558422DE5B41A77EE090B5076D15E567B8372D515AD1E7CA05BBA0470547
44B5F65CE9925ED99C509459C53C54B6F6851BD2FD9BD4F350EE471EFC6FEF97
656BE1850A34D673727FFD61E4BF43C66210F2BEDFF93295537C700DE0E0D47C
E69BBF70F3E8F14DB832CD337FC1AE4EA3188304E6BB481AC554588C8F04698E
6BA5016F7DA50C75B22B58B14800560B1E1E92AA546B280787354E29D1B91C45
2D114C21D06886A492B7299D13F6520DAFF318E3D92331B3B915C7886F36851D
33DC7D61F591EF77EED5FE3D8596425AD99E3026AFFD9397EBC0F05721C85099
F3455E3AA41BDA71865336B6543F51B5BC24CB01F064293833F4AE0793B818CF
0B9A398B6A8FF6524851D49F18AC7CD270B2AD58328E4FF7118C37AA186CEC4C
E81A1DC18F03A7098CF3953A5E7BAB2461FE98BFA9D08818AF6DCE2744DB5D4C
33F929FDFCEBFDE9DC9B375BB00FCDB893CB32A97CA8FC1AA874015367AAC4E9
2929998E1C557A3CA01BED33ADB36B184DD5B379017AE06F807C160C12B431E5
4672F31D484370FDE6022FAC090DE582928C5C8747650D0D723F59EE96AEEE69
DE9EFEE1AA3D496685EDB4AA982B5B6CB6B2091CD1F1BB711C258E031E0D678F
8BC14F17A8D8BC65DDE53CF933EEAE04671999668750D966EFE719113D57DE29
794D11003478FA5F3EF565FD675A6A49847CA1DA77F18005DE1664A8347261E4
DBDA0C10E62BF91E5F195D62710B4B9ED57D82E0A8AAF33F977D16CDA4A031BB
F018D0F503064F1C78C70CAB0366986A069AED3E4C58EAD4B3A977EADF7350F1
45B58D828722F0FA753683B88FE84B46FD7594EBAF1F521AEB91BF786FB32035
064D85C73135133A1C845C75E5974615F2C5E224B4545A4CA0A94E81D41D78A7
D8F875D3730932BF5FDB1A05E861549C863B8F1FB298C2EC2F7BB8739475BDAE
AD71675DF4B29B48B2A06662D228B3002D7000DC10866CAE75AE3B1B2E797B94
A82C9F065DD5E506F2FBFEFA38D9590A38A6EAB6DDEB1488A16B74F0029F87DE
823019F1B1FC91C4BD54CF4007BE6A8E88B74BA3A9AC69B6AC10398029174286
6F4AC60B650D0B4FEC2C567D5D498A8329C5E2978236330DFED5C1170AB00103
34AE7F7BAB2728D70F0B2846B8A20553C77CD25BC135BAA70326A20DDAE6DA9E
757E129630D3D07A3166EBB21E4164017C5F69A01ECF41698D9E9AEEEE4B83D7
FBFABDD9DBA48772FD9CE51B0E9EBE7F2D08CD74A79C5FD1FB0746CBAEDDB911
57AC76D1B32DF719C2064815A75B58B8B67FD349543B8AC006A7EDC14750E819
FF9621B8479E717E8C23A71A709D07BCEE074D21ECEC6545765F769E8C4A5796
2934141B9CE005C1289A6F3BE025CD63701C3C4909B75DC7A8DBFE1DFA967AE4
3CB56ADB92C44C0780B4159EC82E35FA214C0CC0A5AD91E922EE8DABD424DEF6
89F2AAE8A1BE8B46117C8802F77C658D3BB9C24FE7AB040E132E7948F45FE88D
BF1FBE32EF8C470A601430BACE7BC57F297C8826174C84E8AA30493352FE36E5
9F3BFD198B14633BE62BCF26169B7652509C0385809C34FDA8C76D381B83750A
4B32C70960D322A08A5E24A42D6507C53476F19F0E85FCB8235B8A975E61C08E
F62E1C5E103D21BCC84349339CB4ED15921D43FE32E61BC0B97F59AF195C1A26
32E9DDD7EDEA59C1387BA2F7D54C60DF4328F6B7D37773E57C2224C09350BD94
04BED91639A97C7E287E05F38B6BD0498DAA1B6F5A74A54DF2E1D492AE57A1B8
6BC3DF5CC35CC58CA0D1BBA6E2EE592D10C96E1D5359C6FCB5B6D505ED51E033
2F41CEC89D76FDF8610A487D69B93905AB8E1F7EA0F08A55FA881A1AB3998264
3D37723711D8C278CC091ED9D992F1CC770BCDE3ECC8A7E921A97C1E00E3D3A9
C07E10664C851F70496FCFDC47D7EABAED798B8D26A68FC91D71DF793DCA0AFA
C4CDDD2B8B875F0D1C280B56121EB14E73B66EC2AF65591075FDB18ECD8D4D2B
02E3E189E00DD71E619841053F3EBA6E7FB378781AA1353B040CF38063B80CA3
39C48E8B2D3CC346F31D0162AD0D4CDBB2520930D4C0FB17964026840FB39475
D3BF03DFB930F03D2DAE51B12302C50DD3FA6510B001F5E63108B69438036A9F
B7368D1BA5FBDF408493569F5A17FF7ACEB22FCFEA4A2824C99D9494540F72A7
AA528BB0A05AECE1F9700D21E37A22814A47406A8A61406CC125914F3528A647
66E546CC46BEACD1EADBDFC311336A74A9F9AAC640A3F76D20C6FC2209A16367
C8780391CECDE932C6E087081B7D443F8F390D28DF8AAC5940B48C5BEAAAD775
69A62B04817F5B15F7BEC588BD3C13A0CC0E44811A49DC3E85A2958AE8E10EF9
8B891428EE7AAF032268683161A2D29B278C50C09905139F7CD870FA36DFE506
7CEA42C6F672FD6CBF99ED3FC0645E5627086AC629F786703D6ED070EE10B4F7
D4820CECDBCF8C0E843DCAE8B86EFFE2750EAFA0C43372440CB24EB009C7834F
BC0E6DACA8D258E877A9E7E7FB0AFE349EBA44705D8AF160EF5A3DE144D44BB6
43549CCD751AD28213AE1F93B0644DFFA5C24ACE92E0B1CAA8F117BFD2E360FB
04481C4B7E674F94EA0520E8F66E45B55C1F41A8704338BB9D67D94F3F789F2F
A264E1718FFA43E9A4D9F826E45A43DF691737AF5EF0BA0FFB26FF74DE972443
4E8287F2C1FFCB99D867502BC152C395FCB448112B1FB80117FEC3E7E27B7151
04DFF4CC0E308094DC6D255D10DFAC386D5EE78EFECA7DC27E2B5A3A2D60E300
4CD3BE3CAD3604E3EE97D144977EF68DAB9A6C46707AF00759A59BC28D28FCCF
C74302370599182A66EB20669AA33B26E1F4B5C808128299DF3F6B3EF49869C0
5BDB831FDC8C8E282B3A337B2608FA27F217E8A9D925F31E65C4D1E9BB8B0EDE
8EC49D007A02F5715FB5D9D47748B17779008CEB41C8AABF5A03794408ED3310
2EAB871EC3E6BA195DA7E4649EAA6B17BCEA4DE26F8A894759AD849BD6F6AAE2
C3E80AE0A85C6F730CE987534D35451E8659CD1662FC040BA4A148A8279BE9D0
B087C2EE6AEBAECF4A8E91C4836850A769D11F7014907C46837588BFAECFD1B5
AF17202C953BDC1C3E720A90A195491823089316C4151A96B3334DCCC8F358D3
9011E903EDFE2BC03F836710D5414CD64558C1F3C04DF78731F6012C94183919
05FC98B9397C6E02CB1AADC0E7150E1F7E0E700473959BA3763E416E5E034E36
D9C57AA8BAE6A3312A8C8856D897655F3968DC3D6E32A3954241001AFF7FD718
5219EA795D909E63C11732C86758604D952358400E3E04EA7A9FC906FDD832A4
E942BC24E8C7749798C6885BE06A44359FFE27E7875F7B5EEDC36899EB0C2FBF
919D2D138EB6490C8AE11D9FDADC3A75D139BEA6D8B46BEBC1DC9AA7912C94BF
016BA2D0872D2236DF2D005AFB90393A372FDE53C21E7190F48FF66ADB7F06B8
6095774BE78F6A7B7C1E845C2C55EDC3171FC41410CBA6746361C6E15991F709
AF2A35858B0A510C08C45321316D8677BF08D6AA6454AC0E21987C7BA8A5981C
FF6A6BFCCA2C426F2B3B0F6F5548B70042A2AD3DD4AE20D655FB64D670140C8F
548958A7C2FA7AA76B94AC6BC824F9E89859D03CBA736C084618BC6ABB82D663
D8C221632ECEAAE5C87A7B508EF8E2FBA7EE71CD58BD04253BB357A398224B0D
11385AE3F9BD83F083BEC1D3183680C67E58AB7F8DE6156B5ADAE73C0C67F580
CEB62FF4D383EB6F388B35DB4280B39A1C6989C89DC68E7EB6B5034634DE4F7B
8EDD055796D485271C299E5F90C027CB36FF298A162D60CD2FADA3AEA6ED9D9C
299125BE9A9AE4301A81E3E0DFAD321364C2AC02D9D2846C4CB21A6127B881D3
69C87191FFA8753DDE4C5975277E3D7257139DA1A99A3FAA3A59A2F426C22533
5818FCAA6FA28A2B5FB96587861EA87C4DEE1C8AEE02C828E7860532E4D0DCB4
3DBF17D47C5BF08D48D09CA4D0958545CF7ADC7D158A34E3423334FAD7EA15B5
3C1790870F0A41F225543EB339A543EBA43DD4D10B2015DA8002631C850F17A8
D6C1E82B3DCBD6FD4282E48675E691CE6435547F263C9029E7CDD5BF4D51C503
C801305420E4D72E476F2254E04B89EC68F432891612BC371E61118EAEF16216
BC395BA39168ED90DFDB1C3C95200FC6B917CC8987FD1199DF1A53E37D2DFFF0
89661E5984C3B606E4E2F491E4BC1E1AECEB1A434769D4D109AD80D20E93B391
C4D40666BAE80D864289C244431E8A7C54F8A876C182B762326001360B6D7B51
274D886A3A9011BFEA171F325876D38249CB522C7C8DB5C40F7C5C7EA4742D29
D52349C8418F37A0BDD007B480D87CF60D2F90E4748665C4E1656797579BF3C5
D06BB24E13E824D06C6F7EF7760C0B265E690985E5BA82D1C1370EBB74DC6BC5
DE46ADA92C8D9B31DFD1EE1B966C11D71EAD3DB57DFD15D373233192751EC386
C03DF2F7B3BA62D6FC74CB877897C69BCC0194CC2041CF755AEDB7A998E4161D
C63DC6A0550DE8F82FC378FB920484A0496C9FFF055CD9B8ECB6EF814F8CB612
86AF9D3DE63B3ED92B2F30FBF09FFDAC2072253828F8784685B523515EC15888
EDF5F27B636C8F7B0C7B4D5E913D133C45020E76B2F9249D66D9E4F9C4F87CCB
B6C90E2552F32B9F5DA37682725D7203C95C9FCEBA341055CFC45101AEFFBE50
DCD12D48B4CF6CF1F10ECE0991091DEF11DDF6E4ED03029DF9EE274B9B85BE2A
1ACB2855C562708050A9AC16CC84825B058DA3654ED430D5FCF0A6F561E0D411
E88CB5059C31C037FC946876EDFD2EAE6E4900FD213324A30C35B9714A598263
1047678177B546B43F199B113D6D65CCFB4EBE156BB7A42ED09E080027FCCA5B
24F2235045CEE745A97D319A4DDD38CF0B9ECA539609B7773CCD842A9CAA3099
99C95728386016899A996B9570CB138755819967C7CEA6C1EB541C1D7DA6CF70
8C7CC62730291C0631D0438F60207A81DE36D2425756AE2069C2D8B3F98FFBF8
C61E09BC59069F73201D32197132E5B696C46E305DFD67E209F71A57F4FE800B
E6C56E6B68E39FA0AE5B69CD44966A47D14308A49BD69E7E6736A12A6102F990
88C8FF6995C00913BA1ACE8B15D2CA4340E3574333C84DFF325244C59A349C01
AAFDC68952053F144C89C4FF35EF018A0E006ACEB8F86F19B4A02DD5D948B9F0
81029EEDB04D5674C7D8BB45F4DBF174256C1D2BB1301EE091D9F7A41FEC98FF
809B3D58C5654040BFE08D06F435005EDD31A1BB2D35B981C885865EC47C77B2
B01D3DB206FF49965734DACC3F746E734C4BC059590BD347C04A6DC4FBD1F710
F20770D6C26A64070DB5F9169C460C7853E16F1CE88AFD668F97C05F88DAF02B
B5EEDB0905FD4986DA85A560BADD59EE3611726A7A3991E51AB6B5A08570F830
1B583B41CF4152C43529E6704009AFDE43927497A23F7F8C612CB730A6183F43
801294F0C59FE8C880B21C635D25A253569C1E3A4FD0C722C4B3E44B0EB8C957
B60AE08D77249F47137528310A2744C6AA82A7F7F5BCF7C9E7B717BC77A812C8
8923E68377F0B513BBF1F662BB303B948CA6337FA9DDC694EB958D8E139872BF
53B876C2A7C8A11555249779BDCFFBAEA6C26D7C65AB8FC42C1DDB68A5FACDBB
C551BB3A8326C00246019F8A2A91AB8223052A868AB467E1C795D2A10512B474
78661C6610B539D6380AE5AFFF90A50C24D8B09F7C51AACDD3D9B814C8BB48D4
4E4D915CC8378C26EC62594C2162A54E3D77F781BB2F85B330D05FFFD6533D5D
DE4E69F406E06487B6EE84D3F5B3C1A238D89382780103B8DFDE900A44A33D24
002560A94100E95991EBF039C290C2B6AB7616456759E04CE8AFEA95912BC890
489C66E5B0921F65FF0F9AE8255240239E6CAB8E3E1316673D73C38F5262AE32
AFF22574E4FB1BA0B038BF76FA7D8DD172D2A95E53F972152717C9BE2EEDC6C6
DDD0D7C9358A5C51CEF619576BE17316B59320428E7771D7B5928A4AB4316D66
5BBC7F9846911C6779A481F1DA82ED96DDB57FE882DBC33F830BDF0B61F32212
D3FABB92151BCCF911541C725B50356BDF00250B44D45B048A1C8DA6E7C7DC6B
210B59389557563C531FF9AB1CEBC893D3E096ACD9736A3F8A78C45BB44488D7
15C1F56885B3C29CB5DB0F44A754DD69F38F550299645DFA8A3AE4FAB0C6E10C
A94E14D3C487E938CD902427464089330F57D4AC986A5D1B556221E8C577247D
CBF6825427410593672248A885BB81C81CA0F36218870582C946EF6DFEE18DC4
536BDD8F09579C26DC1EF4845D967D066F7F54F6F8CC1F5657C20541FE2E1ED5
6D2981CA14FEA2277F366A064239525E71EE6EBEE88B307339E3C7F8AD296656
119B88CE36C2A44D843141B4A78B49A0DD639EA479CD3561A94756F1099CAFEE
FE416E9631489E4F1876DFE922FA05444DF46010591DF98E29AF1DF21B1E57BB
C1255E3616EEF1A8CE1063028FC6EF4DD1AD5D54156059E3F43EEAA70B3EAD39
1485F222167C8B160D443E10159F26601C06414D6441404AC18D7798ADEA7C92
9A14C66383814009D1EAB94F6E47FAAF231B68F7C9CA9D5AE17D5066012C554D
96E226F386A0BDAE10E5742A2DF2454997FD71CAD27B9EB2020C908E22FA20D2
7B0A205E90AC62748C3FE4B3FF6893207398A9060AFE0C86A772B488690FAB13
A91D0217BFD16F44319B5B4C36C5958B9EA548F76423A7DB7ABF71E7B90DB80C
3B6CF7275740AB144EB4294E373C8A418B15DFEC8675D3EEBC947A1DE66AF1AA
B3320BC3424D3149973914666F1627EC36F2CC2B720699A464C211AE755CD3D4
B1726F7F0E180C9E69E3437421A5B565E71BE8C61C163F1145C644AD75551BA1
A92C4B021FF07E
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
cleartomark
%%EndFont 
%%BeginFont: URWPalladioL-Bold
%!PS-AdobeFont-1.0: URWPalladioL-Bold 1.05
%%CreationDate: Wed Dec 22 1999
% Copyright (URW)++,Copyright 1999 by (URW)++ Design & Development
% (URW)++,Copyright 1999 by (URW)++ Design & Development
% See the file COPYING (GNU General Public License) for license conditions.
% As a special exception, permission is granted to include this font
% program in a Postscript or PDF file that consists of a document that
% contains text to be displayed or printed using this font, regardless
% of the conditions or license applying to the document itself.
12 dict begin
/FontInfo 10 dict dup begin
/version (1.05) readonly def
/Notice ((URW)++,Copyright 1999 by (URW)++ Design & Development. See the file COPYING (GNU General Public License) for license conditions. As a special exception, permission is granted to include this font program in a Postscript or PDF file that consists of a document that contains text to be displayed or printed using this font, regardless of the conditions or license applying to the document itself.) readonly def
/Copyright (Copyright (URW)++,Copyright 1999 by (URW)++ Design & Development) readonly def
/FullName (URW Palladio L Bold) readonly def
/FamilyName (URW Palladio L) readonly def
/Weight (Bold) readonly def
/ItalicAngle 0.0 def
/isFixedPitch false def
/UnderlinePosition -100 def
/UnderlineThickness 50 def
end readonly def
/FontName /URWPalladioL-Bold def
/PaintType 0 def
/WMode 0 def
/FontBBox {-152 -301 1000 935} readonly def
/FontType 1 def
/FontMatrix [0.001 0.0 0.0 0.001 0.0 0.0] readonly def
/Encoding StandardEncoding def
currentdict end
currentfile eexec
D9D66F633B846A989B9974B0179FC6CC445BC2C03103C68570A7B354A4A280AE
6FBF7F9888E039AB60FCAF852EB4CE3AFEB979D5EA70FDE44A2AE5C8C0166C27
BF9665EEA11C7D2329C1A211DD26BB372BE5822F5EA70D99EB578C7BEFD44CDF
045A363056E5E1CC51525EA6FC061DCEBB337208EFF729802376A2801424F670
0E7E6397B28F15BC10B40012B0A3EAEB2693E8F7F627C4C9C7C6C5BFF105C1E4
1B2B9E8F09253B76040D268B80719E1B3F5A55AA45ACB42B05EEB99F8B643CE3
F4B6449ED5A733594F70CCCD7BDB073E630C93A502476CEBA5741BEEE5938FCE
3E77996A2C56EBAE52B2701DEBC95E363E995ACEEDFD1CF8EDC72768951885B9
84F82225B3BB8E9522E784197B8AF13D70B2CD113F7501CD9333EB9A28CD9D56
824E9A3A689741D4577777676015723D17033D2815122B32062451E15DD271BA
6831FBB953F03DB40513901CE59ACCFD6C2D6F05E2B6C8AAC7EE97D4C56B8F52
BCADC9DC83D5C7C45F5C6E60DF9F9471D42B1D6F45EF98EBE41997BEF7D56981
8F9AE898AFA16089A91654ADB0AE2631539262C43BC5206D6CB73867B19EDFF9
024F9C3C7D790946F34742A688BFD183A1307649A36F782DAEAA2D8E581C911C
B42485441FCE5FFBF911F1D9988FC5C601D09514633B415378648CA65F2D6F40
F7CC23901787522154CC33941615849C4E5F2600BE11CE10B78AE007EC0E5137
4C66EF207977C2C2CE5FD8E70A74DA9968C71790516F1489FB5A2585DF9F5E06
9552F391999992E23975398FA0F539A299EF090B9CA16E940104614A4FA8C6D3
495975F6ADCA90522557B3F02FACDAB68EBFFBB8579876F09895D723E482DDF4
FDAE645CD275F3A8DE44AAD1D4C2987B6CD35FBB18312851D858E2F382FC606E
41B7B9393EA57A7FB9903CE835BF1F8E67C15EC8AF980D14FAB1A56EF1A62E14
5433A36160111440DE43D4C8F28013504ABFA5BE40DFA52D34AF251629A70368
73B22EC87849070CC52FE3B74D259E603996AAF50D77304A8B6631C652E482D4
C36A5EA242B3F6A979331BB593EDF29F2D9DC6B35BB39A5876E5378E71CF09BD
151E4B759D53762BB109DE5D452919DE87197C14A816E6970C6476C8A4F1BE28
E6FBCDD677D4379E9D96A978EDA97A0F256534A641017C46F0637A6886CF10E1
EBD75689D3CAD47F1ED6096F825036BFE59A50A550F0FCC978EFE560113A6231
60AE7DFF1BEB6846A97F44BA6196DFF0E9AAAB0F3F34EA25A98ABC50DE2C1812
47CD8A7E2F2BFB159544B845133FCD3B9F46D1C48462A806E9E614D5EB37B65F
BDE52075686731382196CAC3AE3161EBF89944F88A19A5CDCCA280C5A47CEDDE
B826B08AC1581B76BE95036D3797DF9D68406C79A4B51ADF64776AE9BCAA6D51
1362E7A00FDF2C9A6D40F64DDA4B706FAB728B6F6FA9302B4455661480719E97
CFB7A10536081E4E417984862DAD762591F1E352EB919871CFB4FEDF2D37D006
A7D7607348DAA1C6F67333C87A1B4699D58D1CFB2764E513E6716C45B649C739
AE2E22CCC185021D70816ED400EFD37352B030BC26EC540629204632C7F9AF09
9AF1EAB3652298661DB3B1CCF3E7A28CD7E943952E826C1BB1FB0AFB847E1B74
7F9D607B30F8A7EFF092AEB20C9A785CBEBAC7352F57C70ED2E462A148B91BFB
72FA938A8960413EE329553FE07A791A5FEE14044962F0B4269F80FD7B5E55DC
55BA956BE348681CF88CE442026AA09F828E59584BF2C83D91A39EA1E3B673DC
2BF79331E978B15B5319D49535C58B915E7A0F7CBF0C84EA4C5D588BADEA3617
D518A5849CB4888A353080A6446C0D86A6F09F1E07C0F6DB1FD83F056774CC7F
2283B249B075479604CEBB928EDBF84BC2F29B7ECECE6266769BB9A4F91F4258
3C00360A382EF21A8DD920396F7F52B7D55F17E08F3348CB30D76BDAA84D2E93
3C94C99D13E74F199A8A4ECC0DE847ABED596854D54DC3CF3DE605BCDEB62136
9386E40207B269AB40CC83DAF836ED4B747AEFDDBA2549852043B5A93B8C7DA6
D16F64C3CF84D27035973291DF8304FAB487AA4B4CA279CA5CCDC91B6740A2F0
8D727FA2AEFCBE4AC82DAFEEF86EB672AA048A64683C37CDDDA453154EF41FEA
71E4E811982E4ECBC123E41D496A78F5CFB472230CDA008F37FBD309A2A61D75
C661613D01155E2002BAE8B740656A0448BA53E11A43ECB11D072C68D2131BE1
C7C43CB9D97189A5CB1C34B70A65BC238AF4A8E0F7466729AAF0217ED7BA6583
A6C2EB5F2781310B9F71EF1D05A876C0B1C926563979CAD433B91341797AC8D4
E9842A2027E8D5C45AC7D42782421D7028420F0A116296B88223795969C30221
5684E0A2A8A1CFFAB24939D4C910429811F3515CC01B842228D954C8279B7C45
C8E09683E858B3FCA768B1748F63604885E6E3173C865CA81EA20093B619E519
42C0292D48C76344A84198F452D33121547AA7528316AEEB13219DA6C56D6DE1
46AAE9F76D27C19D65B3BB2B33DA3FA441A239A35712BC8478B4A1B2D58C5844
2527FD1B230401A550980BF6C9E75EF02F7E3F51D6E7D60A9C421889066A22AB
0399A95FB6020B097082E73509B70F0C64694B73BFF79C84BE687E7A805F13CF
0EB2428C5D5CA1F39BCD75166A0B047CCC1069527F86804DA275D8C6F885EA23
1EDA30E866859BF0F2368F5DFD963BF8FFA5642F9420861AD4EDD4FBEB504050
FD0E50AF70AAB831F5C62811238F2315A9E94E8D31831EC6E569358F9DCE277B
8098BE634FD17B2A2F4306AC9C0E2C687D1D9ACBDDA602C8687473C07F467120
6794D6EAD1708AEE4F5A948BA3817DE8E54F71FAC584426F531F4A3F9C4A74E5
65A2B8163CBA42B126909DEF1519A72244F9643B01FF403643F1D606FEE10691
D19ED84FE52EA9624FE1606C7A7611C1CB836D64F1E7B0AFF653300EEF14D754
133A2722778B45B63E3700A128E7BDDFFC2E7286D91C9FA2FE4F84BD87FBB390
B65362AD2B23E0A53BCCE2C44B2C415BEA7B5EAC41CC092D15E2CAD1D316D5DF
926C4455FE7FCBE124CB47C28D01A91B6D47370FED9E0F297D698CCA8215BA27
1A098F840FEA95C9144800C3756DB044E20D49152A88334556AA35018A64DBD1
1D7A52FDFFE8A2AB92BED886B0533C7E662E0AC6E2DE0E5F9094E55F65DD77E8
263B96774698F86A71F96165AA3EFB39B7B13C5FCC011F38E34F42317366D9AD
A698082680809E2BB7409C559024F341AEB4AFAF1AC8FC2CC8723542D52151B2
F874A2E692CF24D571EF958527CC1DF6AB5C1ABD2BB2058BEF8AC58BB4C207F5
E12E9A87FF6ED8E4AE72E7FB4BF784CAAC6DFFA20748F95FDDC8F878D7655957
F1D1D3FA940714204D06B4D6749FC4B0B5C900A42D124B698511C0CA001BE9D4
6BB30653430174D252E3FA2070B5D6881629DFA901540377563F21C861B8A930
35C2019198D8F05901C897288256E71AD9A18A5544EC348CC6EC2B214AA99E17
41F6262F917B629295DA2E830435A2259A0B74B311F18C11CC63026D8847FEBB
EC78041939F7243D600CF7EE179BBD3BA15C58FC473338457C149A25CE9F8E3F
4F73415A620F8F1D9563FE9CCE9254093C4BA6941CBD4259C58851C3B015F871
AC62A6F0B3867EDE0A050EF258A7F49F5081F1FE098B1A0CE811E0CA2E52A0EB
B9F4998D40FD7B001C606DB7383E97F32358CE522B711037CC8FFC175CFBED48
54CCA4F97038266A4F21190000CEA2845E755D24260EF27A5C409A3F6AE1F1D3
BE143CEC0C46F4BEF902ED2B999CB46D339DDD22319BC0732326C35A3B1D3CD1
5E1346BBE8940C2F9BE4BDDA2E4322C0528517241F4A466D3936DBF7D6E0C043
CD6D918C8C6732094251926CF3F0DC1CE20D4262847EB62ABE8AF75C23A680F1
F4FFFF093DD4F978024FB2968A4727E02882B40584F68B6894B08FDBB5212B3B
F054EC7AE555243627F8C9D7F9F6934B3D8E7C4719D0C3B184E474341E464C6B
20242E8CD67888F92E655BA87F5EB2D255BF7787BFAFFD9A066C4CEAE0ED581B
C5A9037A4D18193CCD63701C3C4909B75D5369025324B818204AD1EE2CA52C24
2507921E828D5EC28B1D352911A8E50B22656A3FF51D2DC26313FA7D4D05D8E9
A9F4E7560ED5A52947D5A7B66B496DFD1B3429F99F87076955CC5E8F0D577DF2
2473C89EDB9F444EA9DA277A0ABCD2AE98ED0DF3B9E77AA94B712F5743176D24
9871734885840DEBB6211CE96439F8BC222F59724B115086B3288E30DE59B505
22C8AEFA5451F931870F2A99727558F04842802CD6A52B8964407D1DDBE9AFC8
1FF9373C233A044E8AAEE91E1C8A867E2D2A25DBBC9A1CF74384FF171362B355
1FF7356C84CF0F2434A53A3878D60C060CAB8A06F6E369D3D200565F58DF9C93
B7DDFEA911E18E85658A1BB7A447448D77F9FE1356B8537D111E11236D9752D9
686B08933405DBB607CF1A0C7F7ADC7CA9998BE79DBBC7E1738945BA0F664F19
C2ABF6E768E0601144B6E3AF224B6029ED2F2A0D5809CA5A3AE1B23EBD4E3C80
2D8BEA7EEBE241E7C7DA1E413CA849AA4227182ACF455865CA526CD0C3AF1F22
BD3E3A998AA7A74DA77525E729101943FB1073125C8E145DB5DBBE437F1CA3F6
20E8BDA5924EDD97DBB2126D6285F4B96FE28D4059507EF2E015E8D9C0F64025
C76E0550BE3897476870168A1F78B39184438CE528180EB98040FBA46377C72D
E1210BFE3CE7DEE4C16D48C9152A95B64812A2B7490556C59FF1D9066D38BA81
90707725C13B839810593E76EFF0223DB9ACA607BC3B849C4C417FF9AF1C792A
E36932B1C53EA335483605847F13D50934419AD702A813D9B83BA91C2B1EA4B1
02EC16763EE0F5092E03FA385DB4489EA39B1945336E0989E393012334DB179E
D6E8052818FF280C63B8E6429A8646C167002FBE2D6DC72A2614E905203DB858
BCF75E95321A7131547E0C81138AC0357BCA2054BA19904BE3D91A86226A3B6A
C655DF539FDBA5BBE370D4E9AC027A5042D9D52A21096FE5F420675765573824
EE24E9191AA563B6D8D882C097B422FA8755702DF94F34D4071E65B199141933
5CF5D62572D80141CFC69B62A9EA6B300D08E8929D70140986BF3AFA62F8BBA3
20A942EDBB45A07A97A220217A2575ACA0A59F2827C6787EB8B9090095E25706
9A47979A18742F3D31DE5E0367B7006F757508FCB5D653DAD14A81083AE8D15A
5B5960F824BD17A8455F537A947B9726C84C7818013CF71A53C9B51115B53355
9B56FB9D2DC3F649DC31F7AE1F58AE1F5CC02281429B33760498C875EAE7E3CD
DBFCD51A4E1260CFFE758ECD59EAE9ED878D047D3900553818527039AC74088A
194CB25BA1A334F4E50FAE5B69095B123C4AA01E29BBCDF2E57B26A5D0246B57
7B8FE7ADDEE2A72866497FBBF49B8FDA5FF5956B71CEA44427572EEE2EA522F9
BB9A0BA183AE7EB5185BCD0502717FC200F6039D043FB5759B9FDFCCEF0A928C
3ED4075878A91B20D4919792C03CA93AFC986C34C0835DA8E7EF04A2B4D3084E
86BE8B45B2158D284F2D0E9F0093C39C3C1CD422C605740A8939487E26BB9233
D4CDEFC7496A3D61AB9D446CF0D54C7E7AEC55224601E8C86DD0A7B3216CEEDB
1DC252214E944F88E39023E2C046ACCBFB7D6B89CA8103F7C53355A5E7C09E21
1F59083D494BB1F0B7928D3BFD35645B530C49140EA4499885CD944493DEADFA
DFC8BCE85D2A7E4CF939DDC479252D94554BAA5D766B378FE86691BB1283618D
234ECFE8B485CD7F5BCF6211D6F89B3F9D78E0A2FD3FA71C28EDFC157F6A00EB
DD7A96133B2E41002B812F8E1AE5C8B8A9DDBFF450F4BE860A2B46225D178469
8203C4F0EBA2C58BA25271F38D9A45A973757BC16CC50504033125D2A68A1C93
850FF765CB849F8CECD243BB1A43DBC273DB1BE1C6E906C1053090C526CA1A8F
1197FCE0E63BE2711921CBB39CC88042C30A58B2473A333E603F36F68AEFEF88
D98D670FCE72F40947889ED65C9A6EF5A6CC38CA58646117B4D93D59072ABA18
C0FDBF3675ABF732FB41F87A650369AB1E859F477973507027EE3270D95EC7BB
9535B0E805C1180D34075214ACA3756263FEF0111D389D94D4EFF795A8A78B27
ED20C2D7A33C1DCBD8AA217A5B8C18DF30F3CA55BE5D1F91FFBA4A232B68F807
9219AA89F303ECA77D4B05540EDA577F3759A940D23E73451C9675BD1466ED90
4CD82CC3FA28DA344B632A658418710D3427303E22F493A53C3C1B37341F96F2
F8FB4CD2BE21FC12D69F64736B5A4D69E43D6DE841A6618D702007937E3136BC
28CFDC81E41B8AB1123729DF3D047F8C04BFBE2F3B56338A6DDE916F06560FCF
1A2F982FC8A95F7898832371A15130E0812C23E0851E4D2218F93467C904661A
C68C2F9B079ED3CF9C315BA95779D124604AA59F972B353F0722046046DC94B5
017D456E865FB2E416C4ECB9B306E5A38D29974F68EE1962448F7A9FD83C7F10
7F9810860F6F26C51D0AD9C7ED1DD3C552753211F538CCA5D0CAC22606923294
723552421EBA746E16221DA38E1DD048A067225C8E17CF1B43A482C44FE52E57
AF48D671A410ED791CB407A7959F6668F66D3D48597A0D1D2C30F2FE6D22E975
678C98EC8A9069AEC8E237722DBA50B1145FCE4783729578878D2C9CC4DECF24
6DFCBBD6E4460C4F8017BB4FF779B615A46518B256B2C43B27E28B9CC6F394CD
7FA1132EEB0C7442A63B99930B70AF8F8016740291A079E3A0399BD4D5CA41D3
ECC3F6F96B20F9DBBC67F4B69774AB6AC34E2B77039483471E0CCB5A9784A268
ED4178CC13DD87BE8C21EB3A9ABF13F7A9C468C15F4485E59DF38F5D6FF092E1
498F8AAA6846B39BEFD317F690C7CF1CD8CF6D0E1335A4058E25F6D9619B9960
1BE573C039463C85D6D80D2E3F6E3D9B0F29434DB5A7EDB4D2014548B232CF00
A760D92BF4B537D15C66B51C6384F6AC47CB3022D3751E6B7123FB71403E1541
50F106D12E824D1F9E7004CAED6DBA20F6A900EC119A9094F8D3B10BF7FE4019
611CC67279792C59C002037F10916231D4EA5649814A1753EC6EBE9419D16612
B3EACE39B78BB720CBE08D7F586D9484EFF2E090F2B7B8349DED79EAB0B483D2
22394299B2E316A364801A09F2A1A3BD36A91A1CB9421DE1DD7BC5D109B52B70
93D785F43D704F91222775300DDF7F463EA60EDCE62116ECCD472791C5C90C93
B34EE07C1F1B354CC7B6A68856A2E0FEAB56093A88CA14BE086F8D4E32234B96
BF37BA75E6159C317628340AE04616F5F1B3D1F087D2EBF1380AA0744A0547D9
845455F4F39629920D97C36F4AF1E5E72A5E713410C33E05D53C5F042E512B2E
4AF08B012316E7524ACA4BDFDA94B1438B4AEB72DD3680CDFCE4008A7DC06E00
B20E725D99A55B6543C2AFACBAFD2D9DAAF0AFF6DAF61981258E0B7CA284D2D5
316999D9BB1FDBB75BC2AAD315BB3BF446C9FAF0EE7EE51BE13F6E5753A07954
4C1052FBD32AE761D29E7A2E61CECCBB294DA4B303547DAD59CD2B4FE22AE09D
F3F3600FE89631FCCFA1C86D5594909966FBDE2B55A8B0031DE455BEB83DF897
1CCC35E02E3804BCD6CF66E574064E2B0AEEF95960D1149905259E1D1B799730
2B451F10650B9C1473622C6324425D54A5249AD64F922526C352765C2A041BD4
C5BA15A448252B24B0727ED9A42949C0DB281F577FEB3FA5D85CB637E984A9DC
E4EFC789DC62ADB82B0A55BD56905DEEB992B0B50E5204E612A84E61DA20F004
DDB1EA743DEAB70912DD913ABEE28BFA1EE081811FEA1AE3C2AA46C5A881D37B
D7BCE91BB83992C45710ED1D59C50642A0CC16DA7B04BFD025325A2DEC8E6975
1384DC7263DFB82B2B95622000FCF17756073A09ABFA792C31C37AC9C62DC43B
2A4DFB53F6FC0A5BC9192DA91A270938270A0BA4B685CC06CC4E7CAA58228247
DBA2B741188B73332A47C4035453B2285CB5F6566613FC427B31144927ACE6A3
106DDD65998C53F28426E5E4E2EF70665FA751137683D06F8A01300D51C912BE
7CBA6297E68387A161F72C87504FE1ADBE1EB035C42C067B09C7EF4FB3B136FE
6D181151BA530330233066FCBA83EE6C45350AA213AD5635DFD16835CC33F093
D691999445F23012B797542CDDFAA58267E6FD488F2C81DDBB1ED0D13FD4BAF2
6C1556CA24241211116C45649029E8664B1EF5856534B80E1124ADBCDA441DAB
9EA47FFE2D1A17D780BD338B7A205499F8AFB43F6F857EF419616A0D2E3D6461
43431C318824FDE9D5E03261159C7F50054928B9493CFB72DA0F5B5B73CB951E
AEB8C5516B4205E2419B5EA3CBEFFCF06FE0F6A0B7FF6D21CD197B4C7B75948D
E075B321B73A951B849DAC63876608B8B2D7D71C4B2B59DA484A1F42A8444F08
CCE758B49BA91CDD5B32B1DC5E7C2ED1A7ED75698DDEC98E7EF2198C005568E9
DB85B2A0D87AA2DC2639355DC68DB2E6D5109FDE9B405E97ED9527026AFD8C09
AB08C7FBF267D24F99D24AC9D5C68EF6AFA266D0935A380348DFC0FAAD37018C
CA129A4897876302C02AD8911B368195716F72FD4F80E77DFD7E01E9FB8CB1F2
B59713BAAD0E789DBA81CB4DDE7D4A970A3162D903EDE2880C241A298DE96A38
DFB1DB4E2202A85718270018A852D516BBEECBD9D75C25B1DE870FB547D657B9
1139CE999842945F427B31F18A672D31DA3CFAA35DB22ADE1210277CBF2465D0
EB9DD78B492300150429545A75C369FE5C42D2A6BEB040F7F20C718260B7F356
A87A209787E66103C7E1F85F85012157E885ECE99C5F2947375222A66AE78AC5
F6D8FE4194FEB6C80B02CB53E12CE148077DA8181377A50542DEBFE49BE6CC43
8036AED93D9AFE101A25B3132800EECF73E62E6B46F76D950132B8B91CC2359B
F3125B49D7D326F49D00B17CD9434FCD4D15ACF07AFF6D7F2029FE2439769D67
DEBDC8AD8C861E90E5322A0C4A6E26BE56E8D48A62D3F86B78875F838DCF959C
9D7310A849E99BE97280ED370D6909828DE61CA45D557E55F3BD2B87F56AFBC9
98A8BFF455DBD4F8C7D91BE31D2CBB608634070BF82CE46109C332BC95B250DD
D47CA3E68E0462D2BE053128E0AA631D4E99EE0680E1FC189374E7B5543169B9
884A1CABC178B46CB6CED21DA7797C92738CD50C61C96344FCC44005ABF73738
C40C1D18D832C1F43BB36F021C5282E0A1CF93AD9EE5E71EBBD2284A8268A5E9
86B3C401AEC31AE98C6CBF5DB8F608C049C4894D6D18C1AE70D7F50490A4FC1A
C4A25038A17FA0873D5BBD0F42D0CBEE87AE6D68A4C0336BE904ECD31176E219
E08383B6A269D928DD94CE748AC1F0E99EB86CDDB8E3D61836E7D79DE62BCBF0
8F883DC5E7C0AE5E255617DE24BE0003908E91DFF2043E53242B1D8E6D235498
D7E8B5EE021FEF16B633D789B5AD9912A0DA5568694A54D3278B573694ABD67F
6FF81F6450D2E63358399577D835E5084E8F8E2DAB2C25D461E2DBAFA96610EA
EDC61B7921AE3383BB89F311F38E8043FA363DCA07A106C692D1AF215890547E
B22A1FB22654555F8CA81A98F8A81F47D767D4558876E85ABB0B8396FEE0C332
7CFFED7E9D5E8DD698B46FB83704ECCFD2A6E34496A866D0C9EA9A6410F723F1
27142D07719494F1402183EB49EBA4D89B3F88B9E7E3262FB036E1F51B26BFCA
C3915932AAF16DC043DE844726A222F8E7690F4294AFE8B5E7C492689F28F67F
64AA534A2AF512C1F2BC5BEE9F21801513841E1B1646488C2FC5C5C44DB357C7
DE9B455DCB92AF4DF97F02A3ACA687FBB3F42A7704BBD690823BB001813F9EB3
2F938FC52C0AEA6475261702FAA0ED37FED655297BB9D9B3D5003D79CDA613B8
B4263412C0CF0B61476C792584F36B0027977D6B37B2827E64FF0CA96215E57F
E36D584AF3FD6733CCCB73CDACDD126F221BA9AD098A094940EDD811F9173B6F
38EE9682307719C216B789CE09F8D6639843D08FBCAFE02A4FABFE9E13B8BC0F
498C695EC5CDA47D5C15974B7EDF6D7FDB24D5F390F6D936F7B87FDC6F26F129
B23CA3D345E26F3F7182BDDAA2703A9B795551B076A423CD9C7AF68881B70D4C
066379984D44690024FD13CDE6D313A06587E6329F6CC3FF588D86560E9C7404
46C3D311F71C48ADE52E536208334E6FD2113C97DEFFE1AED9B3D93703DA04B6
16B9EDA1AAABAE7B23E481E1A7294BC241E15FEDD736C018E10B33280F9882A8
FDE5AA396EBD58CD1FC98261FE9546C44C7ADD01232775857EDEBD007AA9E1BE
E3F6605B45B2B437A52B38BBE71D4A8624F7E5A2AC0BA9E61AEB6C096200EEF5
17E8BE682D617EE310A79C945126847769D6DE346BDA26F8D27A46C3059A2B09
811BA35FEA5AF6530E333153547C266FCC8764025ABD321F25418074615F70E0
0E7BC3256B10D6B9C3A06D1EF18C898E8F37C0832C4B9B2FE50C8A915F9509A8
22FB278023E56BEEA38DB0632B9B60BE3D172E2F03F5649A65663454A8FAACC1
856F6192B5571B13D28E585CA2C81E20639F0DA069B55F108FBEB88A9459F59B
D20669FCDE45812CED19CFAC2A5BEF1B3F3CC28EE10BE6610B8820C212630C2D
9D32E9A5B4CBC71F9DA6B570B4451375B9EAEDEA1115846E0E9C8545074B1F2C
00C537A79FFCBB1A784959B43E5890B7EEC6A58776AEF1D0799F33FEC6EDF59F
573E7EE66E73ABA6F1ECD10284A8D126A68FC8E8810CCF5AFC45FCAD7FEBC7A9
D5DCB31F5F16053743FBEBBC9927ADAF8EDED9020468EA77EE29E32F04AA6678
579818D3B7D3B6FED6390E6ACE54B7E7A9CF3D32E278603FDD8C754C669B65C5
65191C7E2EF94BEC9B9AC2148619921DE10E91745240A4E18F5416F58A9AD099
5062D6F5239C0DF3455E4863616218D2CA3FF86982B47E0C853EBD237F5F58BD
D8E629EEEE0114B91756AD1171ED3E33906805507012568991AFC0C3579BE2FD
9C3CF6F138D3BE6ED6DABA6011F09F579DC110AB3BC4F61C2FADFA1D666BEAB6
A1C4689441BBA5DC0008736A49D1F8C73D42672C06AC34A1963C88483E072E3B
45E4383C9C7C0F43FFE81AE2EE6C98ED603F796F10790ED79E24089C3D2EED6D
D37DFC61E3BCB1812046E3D43C5863361232BB3E0ABBA87A0BE2D1DCE182B612
02274B04D8C3E9046F7D96739A844D53C5EC6580776636522E3AE71E04B710E2
A8A49F428AD81E430ABE66FAC004ADA6A1BC6B4222CB046EA40A9E168858CFF4
6A4DA79FB41D70C1DA6358E56ECF14EBA7C3925AFD3EC81797D1009FD65267B7
D87793CDC5A000113D768526AE515205076D1A6847E603BD97E3AAAFAA57D9FD
78F501BDECED4A7740846376EAED354B4DF948948DB17095E10A1F7D93668486
77FA19E4C239794A4121B079F72621B2167C901E4DFFDF9AF7671CCF8BEF9262
160661286D382BE391BDAA29218A0D18658BAF52AABB169D6C26F0DA07E2727F
345F2E016EF128D9B47CF782364E61A91502BB3554919FA827986EE8AF57EBB1
2F518A107A7BF4D713CAD5D839718DAD4384116FEFF68DCD1E2132C25E1E9983
3E2806011D1D30F8A5E76E25DEFD5530F9AD8A9C5465D91E343E30492CC0AE25
941E175244791C20D7141652DD8FE96684BFB78BD035C849C7489B126E850B3A
13C60BAC613345B271905D97BBFB6983432725D69757165C60BD22E01ADA6DF9
D208854DCA51E4F56A7627316B6424706A2A0E571BCD7CEC876EA9CA04A48314
AECA5CF4C60B52C56AC720DED09C17286C719CDF3E7A4071DA752FCD3BF80079
F0B7C9A5B71C7BB85A16238325AF8A25A23791D41E2A740848931359E4328ADF
D121C612098552B8C8F13F895073D05E005A6069558F3C3593F3BA0D235CD5B7
D8C8234B8620A78AD0FFB3B10F566FDB3B1B50D6DDDAB3E7A9072EAFFA008494
4F8938BCE1F7D40E71CA4C2139C43E5FC10FF48FF521506BD23F9081D07346F6
2A609FBA45D9F031AFB5C02A6A97CDBF63B48B09BE325781786A936547A04C29
36D26F48F029259E19B8F57C6866F1538B4E9571E7
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
cleartomark
%%EndFont 
%%BeginFont: NimbusSanL-Bold
%!PS-AdobeFont-1.0: NimbusSanL-Bold 1.05
%%CreationDate: Wed Dec 22 1999
% Copyright (URW)++,Copyright 1999 by (URW)++ Design & Development
% (URW)++,Copyright 1999 by (URW)++ Design & Development
% See the file COPYING (GNU General Public License) for license conditions.
% As a special exception, permission is granted to include this font
% program in a Postscript or PDF file that consists of a document that
% contains text to be displayed or printed using this font, regardless
% of the conditions or license applying to the document itself.
12 dict begin
/FontInfo 10 dict dup begin
/version (1.05) readonly def
/Notice ((URW)++,Copyright 1999 by (URW)++ Design & Development. See the file COPYING (GNU General Public License) for license conditions. As a special exception, permission is granted to include this font program in a Postscript or PDF file that consists of a document that contains text to be displayed or printed using this font, regardless of the conditions or license applying to the document itself.) readonly def
/Copyright (Copyright (URW)++,Copyright 1999 by (URW)++ Design & Development) readonly def
/FullName (Nimbus Sans L Bold) readonly def
/FamilyName (Nimbus Sans L) readonly def
/Weight (Bold) readonly def
/ItalicAngle 0.0 def
/isFixedPitch false def
/UnderlinePosition -155 def
/UnderlineThickness 69 def
end readonly def
/FontName /NimbusSanL-Bold def
/PaintType 0 def
/WMode 0 def
/FontBBox {-173 -307 1003 949} readonly def
/FontType 1 def
/FontMatrix [0.001 0.0 0.0 0.001 0.0 0.0] readonly def
/Encoding StandardEncoding def
currentdict end
currentfile eexec
D9D66F633B846A989B9974B0179FC6CC445BC2C03103C68570A7B354A4A280AE
6FBF7F9888E039AB60FCAF852EB4CE3AFEB979D5EA70FDE44A2AE5C8C0166C27
BF9665EEA11C7D2329C1A211DD26BB372BE5822F5EA70D99EB578C7BEFD44CDF
045A363056E5E1CC51525EA6FC061DCEBB337208EFF729802376A2801424F670
0E7E6397B28F15BC10B40012B0A3EAEB2693E8F7F627C4C9C7C6C5BFF105C1E4
1B2B9E8F09253B76040D268B80719E1B3F5A55AB7B8D62A63193C4AE94C086C1
552833DDD8F116B5DF33205AE709B3AA63DA7BEBB165B67281827B48FB5EDBED
02A1A5C0784FC57D3487DAA59520BADA1BE3FB9795669924321CE4F466CD8E3F
7E8EC2494AEE80E2DD7A48A6861AF5B9F0CCAA4A2FE2B03498EACACD6B9C39C6
A8F2E39E06BBB061CF2EC380A32EFAD0B790974BB5CC3DAF0992471456967362
77DE34813F27ABE99302F86BB4D293A37F84667E7F3DFEE4CFE9D1A676A5728C
AEB5222FF50DA97E74B2CDEBF725FBCA7015A188891C8A376B9DD8A642C4B184
B1BBF3F376A6D6E31EF1C8354DDF8039CB20FAABCB34D4749B3C8C8D6972CEB1
06B8A5AAE3AE40A91F1F2B1155681A9CC933F87528C99A2B0268B43A3E829E7F
3BD863CB52950773BD9B0731DC4992541D7DE7A055CA65DDD2317F1705C20D1F
93291BCC254CBABA425C032B3B15050D41DA14FFE1B3D684EEA428095A01E931
98D4F849B239AD9D79F4502F0271AFFB0C297F2F347BFB9C137782646F648F77
0076B85F5A929FCDEA2703333F6918B8F125627F8B505C688E30F258DED1AECF
2C86EDCD88C29249A8081731737195FAB7ADBB54743BD66511194DEE2516959B
A20701E2D97342248297425491F6C9471EC9A98E630D734DAC19721F0B324432
C8D7A0B751453F89F7008BA37BC48E0831EE3ECBD8A0A292D63CFC890B28F695
9E29AC3B4DDB78A6883B9272CE34A012A82ADEC0B6B641E3940A438A098CCFBF
C50544B94FACFD9D7AE09AD0632015F81D2F77FC6D80A42EC11D67D8A91C376C
13C8E3444CDFDE4D2A1ED021410F4D6A4E97804AE949BD913094D23108C9D384
56F11025E2D24939114B6BCF579A0315C52F3CA1BCC2860FC1A0B9FB8A37AE2F
C20C0FD44D215FC2AF737FD0339B070D54E664021240071C665DE4170DFA182D
4E385685FB41A2D85888B1149E9A766CB4F309B4E2BAA28CF1F8CC12C1051F17
7F2E8FB0269F00A8A4C9F61FC3EA50B8009493921D920566ABE35A041D01F286
5E2B3E574A9E9A78E86BB5B788713FB8001C0435A2AF29BEAF8B3559A6C72748
CA7C539201BEE06477DC22B9FACB1CBD29E5647531F694BFF0ED77A7847F7C74
1A9C3C1FFEF085A5A87B2B8DB8234F076977B28129676DFED92BF005A132A12B
0D5D3B9A4AA4A2C04E1AFDF8A6B5866B606CC19287478BFD6B8B213C19B39853
2835F26AF7F37F7F99E30BFB9F66A8A8833F7D42174025AAD93953C9F599E8AA
5B732D60633B59C2DC5C080E7881848222220A63605F00205C205B35DEFCEDB3
2E261F8BAE46654CF523D136CCE8B52E83BC623D906EC7632CB075B9D013C926
6B223C04EE5CD63D144DE465DD11AA26F59E2B12CA1CD88BD95ADF73CC036BA1
DC8D789B86226E38B0DB3AFD1891643DF69770905D11D3022EEEE058F0316E77
0CE494F5D25F4667FFDEE2AF8A30E836B33CCA7986436F2250BA687F453D4A5C
F4E61DA5C2E238FAC478170AB546E2F49FC971F94007E7CCFE301062DB793BF0
C98D73A11770D4FAD1B1B8D4D0F6BBFD2C717646CFED93889EB779D89DC56574
6F129EEAC3CDF33EC8821B502104FF31590F567D1D45E3E92FA14AE1F634F3FF
687E1FA14432BFB817DA2C19F0C868A3487600CB5DC8C1C1417C3167002ACA1C
42FD6A3D4358B8623588E7D3EE02742930F99516B2597A022D0A53242609EFE2
6FAC8DD9F8B47025E7F7382C9A9E7F700F306AF2E28A1E1E66A349D53C5A5004
547D9E93E0A89BC49059B8112CA0DE3C6E33CD720EC4BC07E03072267E8ABE97
69AB6F8A4D5C2A8B0ABF3FD27F2823662C07A80565D4311B23CEE3EA3747DB06
6241C94302FBF237C39454C67E01F68736F187FA748D79F84B7CB450A9C45FCC
932A106B5B2AC85293A25872078E4CAEA2436B0A872F31A131A36FC8FCD291FC
EC5A6398F275C8CE4CDA5E898889277F0155E365B518E36D76BA889C4BB94D6A
F4BCCF762EFA3343D9C71DCEBA2CE212711445CB7F88B44D610E558EEEDAC38C
BEE1908987F62A68AA0133ADD133473E155533410E7973C55758853247CD330A
6B61E039648CF6E58A173FC3D7E1FC670322A4E259A6A165FA1558FE561A784F
A50039F200BEDCE7F57392C3D41C5698C9C8F8333B9CF307E9154793EDAE22FB
A40092AF1492C9BAD7095BFE6125C188A53FA2D0813AB238367A14F0ED1EAC26
E444B6BDA89CA11FF988ABB796B6595823707D1A37CD0C8A8B3F7C3284ADD469
2AC17DF0F50CE04DB21BB8B276691749E2E6F9BB3074DA40AFF782CB25E02AC3
566126F3605C5D91AC7F8E69FF15FE9F998D6BDCCF481FA69BB6B02740E8E674
BBF93E87F057BC472913D788E66AD436C8C5EB667A9E200B11C78F1226D5941E
BF08A7D237E81E39B47A6F25B2EC9290B2883555ED7DC703B3EB5C0F679227B6
E811F2C38700DC5D6EEC5223F0FDBF80711A377649E17BE3301FB1AB1AE47128
7800936B812CBED8EC4E0A114FF329C5D7372EF249FA82D2745ED89D47EB2E62
91A6066F1FE1971379E043F280BC4E314A0EDBBCCEB0029773C9574297BF4E64
D19DE34E73FE10D63BED7FDE25317440E34D4258502F4F01C52AFEA66570BE7C
7BA8361C07E06C4962417A31D0EF695F8C92EB33721D2363555F9F5034CD2955
B664FE75192F33BB8359030780CCE9A99B4C2FEDD3E39F711F63E15A82F4D4AC
55BFB5357D5AEE55D7062DD9A9AF99461B1F89B3CCB0149CE5F85208AA40009D
0682CAF5DB0821AA0F1378369902C813DEFB1A46426E7E895A9862CA1C8E10A4
8D3BA9DCE374762E175D3F06009092F23B871D14D3A3FA6A803B2DEE2684523C
FDDBC23B89F2A60DB25A27CDFAEFA66D2F0B1E5CA6EC76D9F6DDAD37B32EE662
AF7460953FC0A9A530058532E346F581AA85779C962E6F13E571E159A42E429F
A897523203F60ED4A87309FF8BCAF803D7FAD72A7AF7BDBED08049B0A868E226
23CD452F23ED427E439F0BFB8E51935CDAB083DD0F237B28825580C2306494BE
4FB721E4FB04F7B5D6B669502D0EF1B69371902CE4CF8AD84A8282A03C237DA5
78C6008FF67D6ED281BE7B396928F948E31B89CEA0D44B1E9FD3E9E8CFBC339B
8622C5288E99872B907D5A35C31A9064C3E522C63FCC1C69DEA3873E2A39B27A
9B7920B10E6C7E03FEA1BCF17D34264BC6DFB07D15896EB030D2ED4C12111379
7CC3D98833B67E38262680EB4AB9A4D92F1BA39865285CFF7DCBFC096FF9F878
5CFDBAE4B752D854D86A959AB5CE42952C956BAD194A222B76E5C01FD5C08F27
B2244E1A7579BC8B321BBF4E89CEE48E539E691F9563A45FF67FE0970DA66609
24EB00426703B781A4692BF21909880CFD73B51A92E3E71ECE7A5A78D48AD4A1
03B97A4AD2883802EA9123BBFC76EAE353656AE61C931C27705BADFB258D56DD
54397BC47A4FA41BBCE36197BD8EC41D02C86D0A246F40D007715DAAC213B3E5
ECC8E4815EA573573B64BFF8B6251FFE5B2B7E39C1EE2023EA55F8870E7AB26F
14CAC642917E47027D2FFF3622B08C61085C4C58A91BBFC23E9BFB77430B8E5D
C464877BA684728D00ADFBC1468216B87B7A86AA4110030E18F7DDF321AF4A93
69AC60D04886D106B7365E7E1622968858D0D7D1F81A5758FF302C10135DDE74
E372502F535B2564F43A689D9DA1043D288DEAA0061901488C87D0064DF99B96
25EAB93115FE5106981F87662E3180E51F1800FFB0CE77176E348715DABCCFE4
A1BA3732D46BBDB1B9A5AAFB7FB9483184C8E7FC7E2B72320948A93683B55DFF
EF1A246FE9E198553C18DB4B3F6B3C575BCCCC55AAADEB397E6727F9367D0AEA
C3F2C9BBC7FDE177F8F7E7478790F27A0E3FFEFC4576A763849C3605BB812C8E
C9EDCF022E149A1BD8A9C104A30527189E5A991AB73787C54A613C51A72E83D8
AD3CD8850A47546AF9323403EC4D0AEA6D7A36C57727F97F8FFC392D50CB34CD
15859EB9C126180EADD527919765B2CB6B1EFFA358EE448BBB24E1B44CE0BB47
4DFA01B0F4C8DC7322B6D8D15EBFFC5673FBD1F0E09303F8F6B66003854D19E0
1AF0301997B8F6DF9DA616F6D521685AC47D24E2CDE66BC6BA989EBB3EC8E443
63ED00547A2696E416D4F3B55BFBF76FD52217FB7A494737C74C14A43BEB612E
6FC3DCF522EE4380B6F4759A563EF8CA853F8CB1123A12157DE158E7C4D35511
9CEE108FDD1CFF024F3F3BABEDAEDDA743974254191383E77E963D71AC5332E9
6F8E51F39A9EC5CA16F36F2CF89EB3FC8BF94132096946893BBDBC68884F12D9
D16F762B335A957E016A4C72A6A63521E8EAE4443993EE94A4B47E41C9B782CC
5086756B1B5466848022AAF967BFE82A1E6D7F3FE94AE00753B0571439E5AF3F
9C52773B387BEE37E5C0DBC783414C5697FC16FB054BAFE3A68E16F4D992A7D6
DFBE5ADFFD0E5626BF607B6878D62977D154A30351995E0724FF1B76ED641413
544AE903F8B299D432B7F3BF6D44A7D114723C22DD535E4B5B15648E1F45B7AB
67FF03DF3862F933140F943A71DE340F813F9AF942190314A4D79BE32BA1463F
0E9975B733F6797489236880AAFE8311E955631DB6480CE2CCADE0F132943AEE
55FFEBCA79F4D0CFB5F9C44E2C537CC0AF4C48C199E97FF467E4972D6BC1206A
E144FDA6C03120F6891A4FFEF44E17D7E788181EEDD08D432C97B7CF7BAF9833
CC86560A2465A0565E91E89D1335338DDC277E410106AFF4AC63E36C288D37E6
AC05331D22A0AEE3CC6E06946CAB50A0E70CD5AD69A8E0A853C02606DCF3DCCD
F89711F44C1487A8A062B0E7D307423CF2852AD0525AFA4F5EA4FF63763A313D
33638C065EF056061AF8A23AA415AC887257D37EECC71576A752939BD09C7254
EBC222CB1270F3A107F54189426BE04FEC25758CCA22A28B895148E53F8ACE7C
DA3877D7DAEFFD706258EABF0EA6EC704BF556C274C0C815503DB16E32DB9D81
0F7246F2DD3777FA4061CFF9D9C1A82925C7E24F14EFAE04EC52C52383F18AC6
3FA2FBEA7BB5AC230C9071253183FB057FAC50C2582E5BCE6C82D2549556E7AD
87ACBC87542C1FFFE3D6A6B986DA71B23B0A9CF1F1FB0D1DD2433C61C17FD895
9E4B9D79FE6F3701674A43D0B0807CDB0CBED6AE2E4DB7E7F7A41B72A9C79DD7
7CC7EA36B741FDB750B7560C8983F7B211B79F18981BAB514C80C63C2D855D46
F32DE17AB47CBD5840EF7B3457F381362AE29CA13ED2AE02BE914B2CB6DAD323
811A946008743118F5F98526141D7574C2F610A11E46A75CE560AEA4C017EBF9
6D173F050CC252B957DFC1A97D522C07B0F972DB969DB77B3E1065724C6F5679
589C83053D4C8C9B53912E21771DA0372E799AF99DEB62F1FB386855F555961A
4769ADCDB5133E5A5D0B5019F9E1D426843264201C49BE3FC78BB32742316AED
9FB75942C9699A2519D59B1F345CCD9327F84018CAC0A2ACCF03FBCF06FE08AE
BA8A4C770479712E2A5A618FF3F138947E9552402C3E8375B8B18D8D9B9D2227
C7649133EC6A81002AE7A9EC5D9A010ADDBDAD28D36FCAADE15A574DE45CCD5C
4D6FEA7C1D4EAD89507E04EFB96476A3B4A2511E2A4E7763A3E714F7C2A423A6
835071464F3057FB80214AB72169496F57C21467F2E268E3F2AB0C62F99D6EFA
BA1E6EAE926F436C0800A832B20378D221A48DF7C69865F8697ADC8391728B5D
0DAEC2FFBDF432F8A83538135BC312D0784932BE8D96BF2009528DDF1BCC7378
863DBAACFDE460906281D5BA5ACCD188EDB29ACB7E19F74D596AF4348A6DB3E1
0FEFFD5C307A7C88F64FD29BC0E0DF1429FDA949FE1F364C2F744079F20ACE13
720D3C291A3211D91902B1B47F21FA1BEBF910E32F8180DADA2F10655BBF7564
E8581E65A89F851C4B57A07F142195363B9409C8A791E3E80E10D8241E8E8201
3A90F6D505E8FA521F1FA1E6CF176560A55F02528ABF0F912021CA15D6A2F997
BD7E32DF8E4EF5950145233A58EBE880C30EE66110F3235673E465523DC02CC2
16783CC4F106FE6EA4718D253E235930A60846248B1C79A4BAFBA2CCA5E81B3F
11C98F02F2C16168E4445B67E59F1CD264B284C7E9FD120AEBB3A71ECED11E9D
B32577247A7FB25237AD77A13E24D6892BFD2B0D73ABDA4E519B1B2A73FC722B
D5C5667C85412322620978113173006EA63B17814C32B3CCA399DDE7FB996A46
E5539390D1C902409E2D391EADAB2DCA7DAB37A785D3B1916D7D6A11574F3C56
DA25420C779C376DE407FA4543D3D9D95259862A9FD5271BC6D30AC8EB713C79
B22FC7B82285B867D67029D93C41EAB5F561717A85864DED4F56DFB4575F7188
1CAD39AAB1E108BBB5C77D8B653FF3994DE9FFE8FB927D54BE5F97C1C279B550
208269EEDE25A0C58C9F0B37E57541A9C9A4CE8482AD4BE58057CB7DDF52D82F
649236EB3FD38729F6E87567247A57B89115DB90A7C7902B502AA77285A073A8
183732282E662FE25639832AC2C90768836ECFD4A813D3CFBAEF223B361C97C9
25E515EB0FE97C11CDF161D26CF0408FD1BEB5FA8300B2AF24A46751E14E2028
C0A186A5796D894289813B731BC1C57E2F4F307F110271231413E3C0A21FC667
143E210996CA6D433E064CF168DB1E5CD0A7D66352341072AD8DF51679CB3AF1
65B19E278ED874F8E46362D3AF04926275AAE8D8CBE9ACD7740ECA4A47A985E2
E16052A9F5FE99AD7ADAD0922C1BEAAAD9B337968A02FCA0132688A7745256DC
9C88264BA9CE0CB845C83C0C2348529F15E6808D98937A7AF5F2E15801E07086
87B05220470D02240ED2B4513467DD2E9F214E625FA0CD4248B159E2532220B7
A63C6DBB9532ACA7C461BF0BA086CED7A5B18A01318EAEBDD3869ED813FEBC6F
E2F8D20EDED86526D6A2F8327642DBA85B9D06F421C94770B315658DDC9648EC
5E5FE4C6E3956DFB2E008F22E3792513C2AEC3A133661632CE15CAD67EA78AB7
E80316B269223DAD35873AE05F76B3DC275C95EE5FAF3A6D876536B55707F5D0
2134F0EEE8420CF6B478F7B17982BECED5C3866927C099EE56276CB5C7A58634
00BBD725BB08927B936A17F7FA3A7ABCDB26BC852F5DE03B3D0A4233EE942AB4
8C7C41430BFFA26066C7CD27258773D747DED2B68D227691A127CA175059B26D
C2CC164A385FBCA376332D27BE0B136AA65EE3A1298A8BB5A1E6ED5C525EAA1D
903FB1381C372ABEFDEF19D1BFB8391B8AC5B93984C5F9BE4F7754EC2767CAE7
2563F58C453F45C231219FC9727D5D4C50488C0CCCA1A38CAF956D3F0D09489F
6A4D4BC37ECE886A2AB5FA0A2EC21595C4A03DF7B68E47AC5051953BED82FF3A
D805AA74F65566957680618C923BABB06434D21DE023EFEC3EAB42278DA9E391
EA173B346DD97504DCDD4B660B0241841E2F7BF40CAA5DE3A730486724079B6A
6DF1F5EF6D8677E667934F7A0BABC81D7499B68D9CA8A382972E086F827FF937
42EB700043207D07C1B8C95B2297BAB78DB580E5FAD0ECB93786E1FD810214D7
DCFA54ED2EF42A988D72A4FFE87447EAF45A2D42689F0605595400D89642FD87
4209635F566ECD661D7DB340BC0BBD19FECDF86A5980B9B83F8BFEBC6C8FDD70
515040A6F5EAF3867D0BA21009BDCFE0D7F5BCFA2F2B9675DA39E1D47F152AF5
83CAE41F7F7FE0AA3F1F7DDD69C1A0C6CF7962A86B26F3AB70A8D25526BAD00D
4DAC934D4DAB0687C2E3254A4529520AA0E828A1025966B7846A74CA6EC92FA9
101102BAEEAE5C1875DBE42C23E5642825C12B7FAFB9D8C0238645C253E713E1
AABDD1CCD5B4FBC93FD42447B49C723F43F3A8E113ED7AE479D21A808E03ED4E
13B10FBC49549701D11DD0F209FAD8DF411583DDD68969EFB6C828775EAEDA73
D25296691FB075C516092B6F42B859B9EB3AC650F53CE6D7FD5B5047D5FD4C82
D67B7DB268D848B3593F6CB32A3B344012C52448092381F986133B62E1B0C8E3
043C4038FC9EFF58A2E5E6ABC78B442C2D7826F49D90FE46EC6260A016800872
8334C96B8D0917792113F5434D6C6E8761A9DD26FE70A69B58F4E9203EE2B61C
FB53D5F6B46C5A87AD2E8DFC5CEEB1750D221A457E0EF8D3835BA8C436C95546
C69AAB2BA6DEE7069716B4A4CF3ABC86C9A6F2F04C6224858079539D72BFC34F
BFFE3D56B2647CE0483EF194C524458044D3164D3D0591ED90B8D42C1E5030BD
6C8015BE94F9F8E5B653D4ECD683896175B7857E5906E315DB92487C02A6F458
5A173C7A457F53266FE3ED09DB447265B06E3C668B0368241F085209F70AE8EE
8F1510D323B1CE7A47721C490D650FF6FE140A6AE50E4802E180E3C183037811
6FEBCAB3E414B02A799E665F0B996E051E193806375B73E632CDFDF02B03BB06
55C337CF566F37F42C696BE159F8418C6FFDF33AC5FD3B4025C85B695BB9FBD2
3A626DD1F614023F405FFF1FE06D86BBC9731FF2CBD1B578828D0F0BB3688E06
20E8B58FCC6940967105F6059390E144DCA871035DF8E80FC1F45211DB404A4E
3A5A90141467A712078A5306487AF0361B2B02FA19837AE483BE71B8F84DD63F
2CA0FF6BE3B8CCCF2A1915D718C8CE5498E7FE1AACE967C63572F04F040BAC74
E448412AABAACC23B27AFD7C8DB496A65158CC192AB86ED422840A382719A4E8
26B0D0ADC5A5A299FC06F4539AC279FAD6FD1056485BC9317CC1CD2DE0E6E80C
AF158895A4854870F93856A3185CA29D0CE65135F6D03C056620C288A3774E40
C9ABD7417C6823C3FD0F68D944D4FDEC714BFA82C7B080BC02BF4CA2813BC741
3B35C51E5B8124F28B7B45593E8F065E862AAFF1C5AF5A96884C8D45095727CC
307F450380401C01C95B3C5CBF6B78438EB3DB28CB37BA2D0E5B5234BF5FA3AD
B029CB2FA214A0C9A86735B23A46055CFF43E438072C9B0E5AE6942E44DDE35E
0971BD11132BFA84A36B504CF3131372B86BCFDBA2D4C328CE5B9AB053BBFDE4
534F9BF05D16054CD1617AE97C9EFA8BE3570207CCA57FF6C52E18B1C43E995C
AA711821D0E5DAE05475F60E3ED94362133645DFB0F9CD6AB29E5D9ADBBC8E32
9D49C548DA8558E06639FCDDD8331AC24D04BF6B57758A92B5535935A1D96DD6
1F927DA8387B28B6385EAAF22FD416DC8EF9BB6E7C049BE6E4E9FAF61510EF94
204EB58AD25D950C486B56486721814B5984A2FCFA33F4D3F499AA05307C790A
C4BC506EDC50AA197AD18E43156C122C5C0640B7E7C5F750E7ED3531E13D7CEE
FFCDEC6BEF5E2ADDAC4883F517B5B012CA1E425DB46E3F718592F5D0463B875F
E679DE7009E014F82B805C37066E6FC5121F86B3E69CC7E9C6AFD2A7CB3ADD5A
8CA9DA18D95C39020F19DC2605B5068375D5AFD374AC22B668DEFD810F853A17
6D8387CA420AD7235F121F83394FFB5286B3F90E6246F43DC61944DAE90A5B2E
ECBBB671C00232EE9AEF6A5BBFBD7F4D2CABF3BA9FF17186F9C7E514E290D0CB
259FA0234676788AC3B544B75730C8BF7140C63F2B9EA92EAEE204D048C419F1
13439A12F34B88591C39F9BDBA8EE13D370A76BCC52CFB7BA45A7ABBA64A41B1
13986C965FFE79EB9ADFB7E3C5048CFE944B2BDBE7B81150883475C18419B00C
FBBA22F6A474BC95D164B0848FD575BFB4B07D67047DFED11A93890FE44EB547
5A4AF3FD6733CCCB7361A794E5162E8581B06534050491C9C15214D8A78A4348
4684C9394BA931F26C491A52B460937085EA7324A209E3028086A0CAEC6C5CCF
2EC856429B29B594C418A72B7C013BD718996ACEE21691BE05589EF5AC6821F8
E87B56DE3FB47ABA906C6F2954B09B093328EF1EBC3E9AD212E49B41E926E49C
908D7339A1943D1570D778014742AF353860275ABDAB3AA0CF7D9AE0D0933C62
716105688668DB5CE229BB0AD7DCA22BD9777874D5D591A617EC740373CCD456
3B6E8E464A12AAA088B8FAC847715670B46E54C6BF79126C436FEF6AF0E86EC7
7D064AB2BA6CCD713411742EF47A94A2496A1D611D5D428AF1F7E2E4A1F345FD
BCA48B40E5FD05BC298AFE02A6C3CB48E2ABB04F4036B0208B867B84A474C720
F1A3F97C8E7381602E9342AE7ECA693CCF092B4AB6CBC160683EFDCCBCB2734C
7A8CD923A313540BC2E88F250D42399F46A27F8E97AB14DAA2A552E0198CBB1E
D2E73E83901A259D9F318B3402854AF59864E1F15DDEAEA5B6E701452C9DCB23
48FB0632142AF2C967EDE86ADB0C15FF7D865B7CE3309B17D1FF060BB4302160
075DB417B9A06D27800A368920486529CFDDBD52AF54B2BEC65416DD289EE2AE
964309549A5CAD9A734D66CD3DD128179D7783DE00EE589E6740BE62F13C1CE2
3C866139D18A29CC218A2D05D9B0966FAE2271413DA172C2021E78462A6C7033
57E185E2CE8D80D8F992B8EB10DF3F8DC25DCB657AD55A65986B4463E3F89EC7
0151CDFADF7B22D5511AA816D464B7A06BB53D6DE1E0E0C5B3CED43E4ED800B4
0ECB03C83249E8CB6DF64AC1A73DFDB6639CF96297A19F6DE4F0B68949492880
CBB4A522BA29D32C5F0742E10D5965845B48444847FF70C26407383B4485687C
85ADC9BD339E9A96BDBC0C039D7197B1E9F4FB1FAC3151B46D6A38A255BCF021
8F299D0CFF7A10102EAC5192CCB8283E2E81CAB40A4472E049022995B3D51A09
83A82D31113E319AE8172CC0EDD35663FFF3E61A914D84DCA81C47F9E14945A4
7410CC5FFCACF8951599726DE2CDDDAFE6A5CD8115A4EC28D64E431F49C066D1
33AB355E2F473E73899F54CA693C764FDA21DDC010CF3137610AFA859D4464AF
01F885D67340FC30D91580E48D1769F883F26467E2C9CFB55B0E11B43A9F457F
DA6638FDA8BDD4DE1FB0A3F4839997A232D38C1C0A35A4BDD2143D55D2B4E498
5926EE147EFB78720590CC14B33DE34040D303092FF128EB628E0A3FE613EC93
E36B2A53EC4D84699266A974768F1FBFDA759E0281CC6BED6EB8E2B76FFE6AFA
9A9D45564F0CDBFF470C3E235D3B7DD342F9D57401AB8DC4D15B2E232ED819E2
BC4CDCE3080176212672CCA21981FC219814CE143E621A1956A6D444A3315AFA
7C0990653E5276D0F5393DAF1D8ADAAE6B282A79F6C5DA086AE8C291E7FCD353
FF4098EEFFAA934FD913C96B427EED8F3995A03D4D8F8BA15F41BABD4A10679F
3017C929E2211F5AFA4FC2107A7122C89F95074ECEBF2B09EC01BA12C163AC74
33ECBC9D010D56AD795CF1E037669AF33EF08EECAAB74DD16C9B27166B7F0163
5B46197626C177CE1445D9E4CBD193A190123621B1B1DDB9A179BB67B14A29A7
7D88D0886184F1C6E827DE52D1B22E8FAFD7AC34CED06DA82683650661F3CAAA
E5888A323A08E627C291
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
cleartomark
%%EndFont 
%%BeginFont: NimbusSanL-Regu
%!PS-AdobeFont-1.0: NimbusSanL-Regu 1.05a
%%Title: NimbusSanL-Regu
%%CreationDate: Thu Mar 20 10:08:51 2003
%%Creator: Primoz Peterlin
%%DocumentSuppliedResources: font NimbusSanL-Regu
% Copyright (URW)++,Copyright 1999 by (URW)++ Design & Development
% Generated by PfaEdit 1.0 (http://pfaedit.sf.net/)
%%EndComments
FontDirectory/NimbusSanL-Regu known{/NimbusSanL-Regu findfont dup/UniqueID known{dup
/UniqueID get 5020902 eq exch/FontType get 1 eq and}{pop false}ifelse
{save true}{false}ifelse}{false}ifelse
11 dict begin
/FontType 1 def
/FontMatrix [0.001 0 0 0.001 0 0 ]readonly def
/FontName /NimbusSanL-Regu def
/FontBBox [-174 -285 1001 953 ]readonly def
/PaintType 0 def
/FontInfo 9 dict dup begin
/version (1.05a) readonly def
/Notice (Copyright \050URW\051++,Copyright 1999 by \050URW\051++ Design & Development) readonly def
/FullName (Nimbus Sans L Regular) readonly def
/FamilyName (Nimbus Sans L) readonly def
/Weight (Regular) readonly def
/ItalicAngle 0 def
/isFixedPitch false def
/UnderlinePosition -151 def
/UnderlineThickness 50 def
end readonly def
/Encoding StandardEncoding def
currentdict end
currentfile eexec
D9D66F633B846AB284BCF8B0411B772DE5CE33C33655F6FF751F340A8D6C01E3
2E02C24E186BA91B34A1F538959D4450CB683EAE5B034D030186901B458D3777
6B3942BD2E07121385120248891AEC2EB33C4E3A0CF00828D0F130C31A918C18
979FE94379C648EF21ABF659253E43CD1253866F157F1DF85AE7E8714F061B1E
ABA3AD094FE8D6293916FA82EE4F486C7E513A06D4C9BE44306A8287970B4ABF
B6D1F9274A5A0BB6ECF713ADBD1260D5D6C4420D357FD486470A74B2F0621B59
A9373ABECDBF32FA68AABB66FAB0C970A3354A335D70DB2CC5A3208BB6D768E7
B58CD9BC2B6B7E110693C5A88D680B7290DB121996E3B7C8AE3C23147280F8BF
D8C60B415552700FF0E44C2257B467ADD5D550F61EC34A76143393E0B34D55C0
8B64B48E5F1FD16E16B967511AE15434B7F755BDF2574191E3C3DC528B69B5BA
7DDBBD3C7878FA69ADE75011A2C0F02F5707E86FA632D1269281D3C265B31F3B
F3145052467647AFE18B9D763FAEE4BA72CB9C385568EE5BBF5854C278F1E3CC
475C6234E83ED33345268BE52F0931B58F302EDA0D5751348E7B7E53D4882FB6
9343BDAAE87E48F6E82024D8EC1FACBBA36582092CCD76553B0449A5090774EA
7242123C53B80F2E927B98DF2B36C403D1FA1E9F8439F3964DC9F89A0CAB5AE2
C907309460F097AA87BD156575D6C73EDB2B40C015E67734397ED14395C43394
7A0201C6B0F652B035FD7BB82ED236D0F7C20048AFD83A56925C7A2898B46270
B440913E4714FD89697B3E59F5BDD5A2AACF6630257957ABE1A63502A3081B6E
307A534A9E238F986D4C866AFBAB7A0B1B5A6E99AA0A56DC1FD7E8A39CC45147
259AC7033A0C58192CA82FB12E09F309F75690043646193AD92D2368F345771F
01CFD21236BA52F74E36CF4B94259CDBA2EF1D61AD93A2B942A9896B0819D20C
59E440851CB99E89C887FC62FD9E7F88F54E5BC157D81A5FBC70699820C51BC6
27D7755B195C0BAD8225A6F3EAE0A5A674E8AF6B11BCC69DCF5FB89D8BE0E2E5
FE7E2588F93F583E4E2F6ED5457E90B902B02F51D54B9F0BA54291E687F4A7A2
08CA5FCE0C9F3B954247312EDA3C532D3DCDFDCB56FFE03B36DB7D549D4203C6
7DA8772A2F732A15DE675D3212C28DC755E3D0156A777BF514112ABBE4372ACB
97D7834813E1850F90CEE543B4C09BE1E93742EA98B8CACC09FCC4D2595EECD4
46C942EEA60211FA7DBC11CE869D55BF0C7EC6AA747EB2AE2CB3CC2DBEC936C9
540CE2E08291323B36F6549CDB97BBF9F0DA429CA9C863B629410885540DA6C4
9AAADB30C39051C993CB547BCD573D6448DC09BF7FF2D1B108ABEC2AAEE4060D
182ABDB3100AC627E5C883E8F42D90D699C8028D4123472F211C8FBB744D7E3D
C626ED03D8517D69E1ACD26BE4F83FAE31122294816736827D138E4F4CAB1681
236C1654E01231EA7F08AD0E73BBE1BE19A7AD6DA63AE0C7F5A360A53BB35268
CC90125C7545D9D59F5127F0AD964AA66DF020F639832FAF9C2CCA82C01120BA
6469960C350D3AF786666EC14158728E0BA2DD8A639C28E0A7EA8BBF608FD7DF
79C7B5DDEA05C8C3D6FC70177D1A9EA9AD056F0CE31AB535A22FF7EB33748071
6B28CA5465E87196191BE975E7C827B443B92E15342609FB93598571C63AE16F
CB7CCF15B8921F38FDB6F24403EBD6D6BB66AB49962AD578E93B235E6180B4FD
4920794B3F976477A04AD21728815D3185C74C8A1DF224DD3EE5110C18BF691A
987AEFB1DA55E4EF631C48E3B2431BF959A66D710C206B8AE5E988B7929BEFDB
CAA93FCD07341EAB622A755FF5608562153DD6A09E462ADBE677E6F550F93921
299E8A99B0B72E990A1D84831236FB6E9D0A187FD36BFA9D85C9CB0414FA7B15
EC02E8C08C8A4F71226A952C5164E68A44344BC4E6810FAD9BFD3532A9A515AC
5D6B5F8B5A1402C2C4DC011B043066ED02AF0030ED0D0769FFA19112C97076BF
F950438DC37B172FADA65DBF0C00EBA9A358B189F80CAB3A55341E4AB391F7C7
C03F47494A607BAF90BBFE31BE2A5E1FBDB07D5BCEE30EC3FE52FF996A595DB1
2AECFA9F05D26DCBE562B2A1AA7A2EB7727816C25E40F84CD33FAD87D5051181
315AEF884EABB76C5B134E7E0185E7D59A2DA456CEDC82C054F197229990E895
ABB45C025940C558D4C98C6764B00D6917766CABAAEE890025CF7C0B1A6BD5BF
1F8E62D380C7849CDF06492BEC78C972A98021D66F223A6ED2EAE1534A139466
F7F62EFEBAF59A172E7C399C813547B1174FD1466D192A347B619FE60CDF648F
9677A2701944FEE0E51FD5BEB50150988EBDD1C6675850CA8195A4F9FA9C539B
62C9F3019C78B37BCD3ABDE1B6311841D1AE49B25DC4E08F2A682C242228AFA6
1AF0CD189032F366A8DCB1D7AD693800291BCB34E32BCC992E344325F1757BA5
312E5193CAEA8F49830D02D190D9DF976A61A562F9404F57C0C4C88BD64C4E27
19B656775EDB72638D3F81F7C273201A866536E455994F1CF33D6E9A491BDE96
E9C52149EB408963A405CAD6534045E522B942AEAF82C8980B58AEEA6438FDFB
F844D3F3DAEE8993C4BBFF2A38AAD0B9883B4F934921208A8E3BB6AB8E46CC64
67E39C0E07DD9D43B97980B06BBC57317F747D285E167F2312DA7F2B295D6888
2DD8426855E172DE269EEA7C226DBD273E948BEC01D41F85EEFE7F70FCABFB8A
49B81F882216DC13BBE956F2AA445D381257D2860D53F7EF2B2761689179F56B
FD37897D8542A37C38154A30290176B3A407F798FDFCA99114160AFA65C41591
8E38C7687BB5AB5A7B64FB9DB341259AE8360CD75E9763A4FE7D782502CF1785
9EADF98F93C6D3E02E763B16D297EC0EF689DDCB6281B4932A4DFB0BDDFC4421
64A9C2C34416C3E10DD4A10AD1941B5126E0DC86B790B23DF75782AF6603E7BE
FE4A26BDF0B1D764E57ABBCD79E61E60698242C7566FBFF98510EC6F1A44EF78
B9B7E406CB75B3105C75D53DA021FF8E3FB5B4C7E86616C303181A9F3221F95D
6D71D741A086664042811515896D10CC8A000085910CF5CC9590B7D68964B149
B6AC7F417CAEC447BDC40D7C2578E98F57B682FA38D405BC9AE7F55536B5718E
007BAE00E114BF24A21F8303E52D6EEF2AED87FDFBB5305FEBA8DA8811C66B83
5D6E6D690FF8A67BA2985CFC80928B6C1ED130619062EA897FE4F68518F6C1E5
34B8EC0B21FCBCD7AE49F5FDFCA8ED809D93A6E526C07DF9B494896AF95E7174
9EC715B354BD34D8F13EC9BCC734BDC13ADDA1A5F44B940D61489BB216103E72
09293B1159EE8EE49B504D12C63137101EB400D071958E1407EE1458557BD00C
2EA2F9EAF193D1848C165AB0A640FE46DCBAC6E9346DCB37B1EFDF278821D019
8491D9757B1D4C6302EFA77B5A91EF886ABE0D91EBD6C4AB8D576727839D7501
6EF0C829765F8F50FC707DF03C38B7DDE8F9E582F8476E3D86BE8D374A194FD2
691ED95934BDDDD7E1A4EB7B613C17C0923D5733F721AA3D26C764AC90C945E7
820EF66D058093C3CB7A175611BB2ADC78BA12A84DC7ADEF12ABDA0E3503349B
20936EA24CDEC1EF7C769C4F9502BC47224176E0B78F273B26E6B5D94FCB4C57
15EF98D4EEC966F2E7995B0A9351C67C615FBE46073E7CEF4A6B46EB2E0E320A
0D2F12F37ED374B9EC1016C9809AFFE938F6A90652DCE7524C19320500745B80
F8EE2C4965F5C4FF93F09F2864C90C4483A3536DB2DC1F96B13AAC64226B691B
957ECCB9101C01C949D235BB5F3180B7BD7817DBA332FE97E69F1286B3169AEC
C97D77DA0E3EDD40B6C1B60DD3A24C1C0CAB2B7A323CC29ABE9D7CA1C6CB2842
FB96F452E4611BED0C5EA407D6160B4A22D82C80C378A8CA59627B3F71677353
0A15FAA08946585CF56E686D7F3AE679A5CD36210BA367D571F6C4E31AB1802F
8AA547048B2B17D3471B46BE9404A8DB95CEAB4F6A5FB35037065550652122CD
C2953966F3246A5ABF548AB583663ED7D1E8C75A512B763CE864FF27BFEDFD28
AB9AF7AFE47B0EB2FB65B5898F9022BD6C7B1125DBABFF28D8A5608DF925935C
54484F789AC6ACA2BB0D2684A740ED5B3B63DA5A843A588933C68A280AABA9BA
8A7040A9491BCCEF65BC1EA8D544B0622522B1956C6BFD054E5FD7AF56ECBE57
91D1B1E270D7AFA999A0EF623DC605749D3C45F586BF5A5D2335F6F0D22ADDB4
A0DBA458B3DDB77CF75ABBDCBCE27D508CFFC38C750D3776BF7F2AB4D5CAD167
FE3DA545CCD32C53EF2921A2FE1A88209F884151DF740EF81C0B92FCCD4BE47E
8466AD45BD3C26B6BD3C61AE0A04263208A6845D0A2F4BB53F2C714A1A5D7442
3344E4B944021868266736A8197165EBA0DE30E908940187C54988312E92BE2A
2B4AC9D9508250B0C794A4D12E4397FED41845E6663C8CB20BB3DF4D7E075E68
CBE30D483DCE2601C5A730E98A86C330EAD81303364B79DC6458042EB9AA294F
3E767ECD161DC7F10E34D91C788A567EC280B374A2DE3441B0AC10E8BCECBE19
19EF49B8C7937CB672AAAA4829EF589738A45336897F04E17E80B723ADC047C8
3C01EEE02008AE9EA5FC5B0DFDA487C08DDA07273A28881C72A6357F8D3C31DB
A3ECB44985935E6A692F4F4BEB1763E2AE95531F06E0A50E2964A74C011BB0F6
8D44F9E07AC8826C3133C8FE017B42837879ECC1B2020BBC1D34EDA1F20385AC
3BB263F418EFB6BCF66EFFE7D791EA4814DE67A35D96D3F531FCAFF4F94B05E3
3C5F001BC0CC81D3BD760339890830F94EA6BA8A14390A2BD2B233B0EDDFC044
EB0717C39703AB82AF844392EE494CB4478057D5509E5ED761AA327954B98931
00ADC29631E543F1B6F9E3D8E95C35C75EFBEA5C5DD3CE2716C796CAC062CBAF
D2DF2F0EA5DFD10161734AE927DF98450A42E1E2F3AFF70510164C1888E65136
94E5EAC41933111756F6112AA3E3B8594BA6DE6424897C2FE7C7996737F34A1F
FF82CD43A420BED1B84B8B5185AC5C5C0C7E30509A299D0D3D75C162182B5C19
F883F610DA982D37ECAA6042E58DAB72C831B7B39BDE6E5FFD2B9A7E8C7773C5
B749D9DD19C94BBC925884386E7009B44029A0CA40A60F8CEC19B74DD8BE373D
2E06051B2B77DDA669DD791496058F2AEC5F53BB6E16FB963E852FB71662A8C4
8231910F620F62AE9A04CDC7171DA5F7AC46CD4E8F53CB2268CE5537EE4696BA
C0706135F6C6F59877455E00BB5550C0E6758F8B3434629A24F3B570E1EDA4DB
3A154F9B224F272A478DB5956B9B1BEF0C5DE94CBA6E07617E27B37C1B051B9A
674A0DD57BDBF391A0540FB5C049327ADA7DECB903947DD465050D982981975C
C0C9C50F569D7E9C2D68609F20620FE350C5EB4DB5D686E4412262FB5FB15B04
78C2B41FC992D9F1814E8C878CC54659E5F7BD0FEA3BA011E9EDAC30D28E888F
166A72805838D90CF3F08F829AD025DC5B6564F86891389333802E7BFEB06ABA
5FBCBF80BFD34ED2D6E6B3E7D32E0649378873D8B2B21AD6B3495FF72AE50C35
60CDBADF5B6E6A5C998FD353A41B39E365ED938E9C4E5A312C6B88D899BEF515
0321A282F700F21A885B82FC2B56005B759644E1C71C656F4BD675700E9043E1
0C10F24BF5CA014F7A89B4938EFBCEB28884BEDE1D234A6B9A84602725DF6281
7329DC6469C6D9C729482D3CCF2927BE9962E5B2641C43ADFC746ADD55F3BD0A
9326889962400F7AB693B558E0698809BB1B3CD978EF3ABA3AD83207CE651933
31C460B9D26FF6BB795475FFB68DC05D297E4BDDF7FB4AF18C457356950EB6F9
127722AF70323005E939CBE091FE6C538594CB53386DF8AAC08B10706525BCDA
DAD64651A4A3BFB2B91FC262806032E1BDE668E4EDE8181453D63A792946DA4C
4B1C1C40824F99E745B5E9298E5D5028972B2B217AAD143BF2255A5B911F8D27
C46585DE17BCBF43AC9D8A22082140B2521E7C3C94F5B46E9B4D5E043597DFF5
6DBF1F7E9CC99F663A70D5B50B9276D183E5CE0680D70BAC629E04382530AB7A
8F5CA50F48DA89490ADE308361FD57A71425F962734A49C78E6A866B8B222839
1BE618A95A06F964A26220EAAE9856CF0893685698818E3DB66840C970674311
47D3F3C6323B09D0D4C812B5D6FF4D1C9B4663D2CA06D834EFDC6973B5EC8F7E
73DECFFF3EA3C55F6D3D1D2ED83F6EDB09036CC31872D8875D2B055D52FBD3DB
1A12872D97CC0D31DA86BB96A4893EFEFE945D46D8C0B763E259CAE1154C14CB
EF05A7DB3050052035F260AD3D2C99BA8880D90F44ED9207CFD832A382000D31
7EC05E788D892197A119C30EBBF2388BB943CB8103F071D7A568A311E18845ED
A54FB1E7D90717E843C0E62D08366F7D99477488A2B69294985393A866622EDF
A860613C4F7BC87EA2F96900AF1F59604474DD1292CBE8449264C582B72B8917
078B50686450F96E0DAB93E4D1F5375A6D1C3AF2D3B07300791A008E555F2942
67275644CBE023BE8EB42224AE0976F4CB7C81D0851C4EAE8D727BDFB7EB68FD
919CF4E3BFECE75460E4E580CDF87A0C7081FD070C13BF83CA8BA510ABE8F831
627138EA58E128857ECD46A1BF0E78A9B8B25A407ADFE513C79B444F15762FAA
DD11392821BC8CF4815D17492E66C20E1DE52760E578F9083E36F37B49215679
ACD0B18F44ADC6489777C38135399A0AF16854DC34AB2E92A3C01BE024590D2B
8A29EEFB2DACFB102896A13AF4CB9A1F108A3123D4F56EFE56F4AA6B45701741
4AF4941A15268AD8168F4A1473B2D085A7A5B9EBD1AC41E24A9F809E3BA87EC3
FF57F58EB7036873FEB5F043544DD6BECC2D05539D356C6FEF2A255DBE5A20B9
6C6EC04393BACBFF7B1DCAC910EF048BCEF237AB1407F5CB5FAFE72EF30CA066
1CE9AE1B922E8D81155466840B5C24F39AE700BF4331DD6403F57F4A1693F72C
D736ADBD4A287D445CCC08FC984913B8B0F19A236F9C603813001FFD0FECF431
DDA5D962E41C16C67D8FCC3E662F8EC043C0AF71765FADA628F1959181154125
42F6A443158F161E30E1A28F8C5DA833994BAF792768E28EA6A42B208C29235A
75193BB0A84B3033E73886F580BF09C882E64850CF3D98BCF941715FBD066388
7FE5473A00A5945B0A316395AD0D2043A17E6AC5E6B74AF9A270B71D5CE06DDB
896C1FF3F17C9D49BADA07769897FFFCE6FF6CA148A66E0F37B2C7216EAC238E
55BCC9E4BFDA161F87BB62C6B24D96E1743DDBAA1FB8B1AADA6252693CA5A375
63E6AD2CC09D0E218D33C19CE42BD4C41B49177FDF9D3B15D26FF46B969EBC7F
7D16787017A7E408F73049620BF38DF667F495DE5495445BB6D180C65C4EE1C4
7408F7FE1EDA2A333B0A790DE35FFC56ABD5D2C85446FB9B169638DF59D759D0
2E14118DFB5A8E84D4A0712FB141DFFB8371404D8C6CAE8E6EF8721B797B3B9E
972C899BF872C1CE07AF2045310556F78962B423C0D3A2BBC29070FE3FF2B61E
371F9D92AC62E81DDAD069B07EB1BA0BB6FCF8A30AEAE6E8B41B0D41CC0F5108
3460D7A6025B9F959A0ECE9E72BC073138756F61EC7A01952D1A63B2612D6B1F
91C654252DBD4E962C08A31C586E9E8876181E67761CB214A8FE4DC194593500
5DEC53A0C1513207399486ED36907F25DD4CF9A94E0BF9BDDD380F4B5FA796FB
BEB68184F98B84B86FCA861B7AD2EDF0D938AD774CBC2B2448710FF5D38B260E
591D653DF92368C963560E5F4A4A150851DDE47B6EBEA974CD38DF7BAAB6E086
75D425CDA2BAF6E0B3711447EEA6C17E6DD731C8C3215F8FB6DB2347FB5F94A6
49C9A2B0D017572A1E8621F26FC1F1B82483B39F3C86D9A0A4CAFC8034FBAF77
AA8CAC611A96AD3CA4AECF8ACFE03D1C03E65A27B7E58D5E461F5E7D14C75279
252E2F900D3A4A6DE0B72638B76A64BAFA687EE9E2A9CB73C88F2184C9FA14A4
A096DF74DE504E6B050FFCCB8FC6153F04A0F1D3EB8CDCD3488BAE7131AD73A8
37CFDDA60113D43142E427D0DF61397304339024C6407595D6C79B81485A51BC
1A38
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
cleartomark
{restore}if
%%EndFont 
%%BeginFont: NimbusSanL-ReguItal
%!PS-AdobeFont-1.0: NimbusSanL-ReguItal 1.05a
%%Title: NimbusSanL-ReguItal
%%CreationDate: Thu Mar 20 10:08:40 2003
%%Creator: Primoz Peterlin
%%DocumentSuppliedResources: font NimbusSanL-ReguItal
% Copyright (URW)++,Copyright 1999 by (URW)++ Design & Development
% Generated by PfaEdit 1.0 (http://pfaedit.sf.net/)
%%EndComments
FontDirectory/NimbusSanL-ReguItal known{/NimbusSanL-ReguItal findfont dup/UniqueID known{dup
/UniqueID get 5020908 eq exch/FontType get 1 eq and}{pop false}ifelse
{save true}{false}ifelse}{false}ifelse
11 dict begin
/FontType 1 def
/FontMatrix [0.001 0 0 0.001 0 0 ]readonly def
/FontName /NimbusSanL-ReguItal def
/FontBBox [-178 -284 1108 953 ]readonly def
/PaintType 0 def
/FontInfo 9 dict dup begin
/version (1.05a) readonly def
/Notice (Copyright \050URW\051++,Copyright 1999 by \050URW\051++ Design & Development) readonly def
/FullName (Nimbus Sans L Regular Italic) readonly def
/FamilyName (Nimbus Sans L) readonly def
/Weight (Regular) readonly def
/ItalicAngle -12 def
/isFixedPitch false def
/UnderlinePosition -151 def
/UnderlineThickness 50 def
end readonly def
/Encoding StandardEncoding def
currentdict end
currentfile eexec
D9D66F633B846AB284BCF8B0411B772DE5CE33C33655F6FF751F340A8D6C01E3
2E02C24E186BA91B34A1F538959D4450CB683EAE5B034D030186901B458D3777
6B3942BD2E07121385120248891AEC2EB33C4E3A0CF00828D0F130C31A918C18
979FE94379C648EF21ABF659253E43CD1253866F157F1DF85AE7E8714F061B1E
ABA3AD094FE8D6293916FA82EE4F486C7E513A06D4C9BE44306A8287970B4ABF
B6D1F9274A5A0BB6ECF713ADBD1260D5D6C4420D357FD486470A74B2F0621B59
A9373ABECDBF32FA68AABB66FAB0C970A3354A335D70DB2CCFB357288DEF82BE
422B9914B075E7EC18835881AB22C2A47DAAA4EEC0A8DDA1CDB5292531E5261E
D8FBC087C00D12D9BDC0051529207238FFF92500581849C386F8427D44353C41
FA42972E325397AFA55CA5189B1EF4979F06711E406A219DCC46C88FC82473B8
567E47B75364FBEE1A883FC42C9CD2E1EB581D4D0C25F509BF595314EA222031
BA9606F17E3E4931D50AC6AC2B63711B0E85A6CBE6FFD9275461474D673694DA
B38706890D6422CBB2B499C0C89A7AF218BD84FE0B13D689EB5930AD0DAB5C0B
55F68356C285EDD85B3C0AFE1B9001572AEC0C3692958F7F3E16DB0C2D0647BA
C1A4EA2EAE112F680B33AD9D59962FBD63BED5766186A1C4C21F500B374218E5
7CEBA25638D9F0520E789B2F39CB0567D6BD72C076BC76095B60ED5E82F33E9E
D2448B364626AB558A979368B0F1495D8C504EA8B6E291E781F5DD708FE9B5D9
9CC26079902BF1EA845CC6ECC973DACF88D956769DBABCCC1F7C44B3B1111732
3CFE60583458E93FB796A440E43018C4CFE846F1C79CCA0416E6B446ACCD1D05
A4A682928674FB388BB109497BEE1F0AD9EB289AD984DF057E8A27F23601CC25
EBA38ED89F18CE03BE3645F75ABB0BA2D6CA8746A0F96518E865AD53CD4F428F
601B06E05B6B3F27C3A62CCE52668854DB4DDED614791C32F31A1595BC2D3E16
772C0ECFFBD06A07A1221AEAFB8CC91029C159B121F677C9AAFDE187994135D2
741BDCF6B4442E6728BD38194DC406A9F88D3A94E458275AF47E670A57FFD531
F72836EE4932C0312FAA0C1CE257FBF790B4B211B413770AE9E73A46BA6E12F4
A58A5CA4121CD6A7A7214DDA473850650623BAE8D7BC6F4034C6B648F329EADA
DB8049C762F7D3B273FE1AD47F072E6A69282866FE0F37107E9DAA8FD7EEF483
7B825A0E000E57B711220A699F38EEE6BD832C6ADD8CABCF7A9A5EDBA83116C9
D9139619E407AF339C1A479065EA6FD7A58A466C6230CB5A8F8583955E0AB271
536098804287DA09D1CBECBC283B2810D28A1EDBFB2158886231E454146E77EE
C99A662AA43D50E62CFD36959A117F176D67803110F1BC427A4ED1B641A6779C
74345FBA0E956A1A0191652C64236A94BD225ED7AB7760718A400D7B193B7740
562B8A6FF2A3744824CC1704A1B735A328A4B94E80E1392F7E51FAE541F3A3FB
8E0B64F5FBE35E5C10A2423AD0D3897B1A83AE9F6E133420EFB4D2170609C680
DCC4683B918866E69430D36A5D1279E1ADB9A3915C53AD8A5BE8C2B56F53C193
1C7FC6A8123D18993CC91FE947C21072039C8206693ECCC8B3D4837D5C61442D
7AE3543F3EC5C349D20D4CB9C26ADE2DD3774D903024A13EDE0D58B509372010
1C0963DEC9250C60343947C0D900BBF6F62FDAF5B220AC85CB745676F87833CC
5803627C6DD6BE703FC708FAF6C2EA8F4349C9D4DAAEF330D9ACB450EBBF9D14
AF3F36DF5FD7E3659796103F5B013D89DC6BB390A7BDAC0A231CE71C48F0B539
15E2BA2EC06F3F0B742ED042F0A9F8DD7CBEBE018E1F056476FC098BE6A56B4E
E8FCB5924E01F73A956FCA977A5793953E253D95308C247A99C14559D37FD917
AD0A376543753719DC02423B9958C73D306BD7A90A8F9751C8FCC8CCBA11D3EF
D92B56C3AA4FCE302713F2D03E73FC22F88EAF3E4083CC9E64F40A500F045A27
CDFAEFA66D2E5393C2DAA100BE728339DA46EDA1FEF945E28E9C85C19F987562
CD6AA206F56662BE96AE49BE13904D8F6761251DCF8A9302D6F53ED0F720442A
89467CA60E57D0F1C98A2EFCA1A117133DD39BC60F687306A10609C324B84025
2750485AD8A5BE240B63473C5E2AE2241E8DA94598691F774407905226AC4AA6
3AFB2153270B1CDEED78BB0428971CC9818FC947D8975301E6E1BEA026619E1E
BB71D61651F11B54FCE233A82D9E909991182EDE3B441ADF3F3290CCA49EBBE3
1521ED8E26E0B153A0FF2F4F59F75C4F0F35A40B539A559B065752C1D90B8840
D35FDF02D15401691A3166F1B15FBFC8943439686D7AF78FF9C98451F47E84BC
28104ECF23154122B3E325ACA78A9D418FB443FB334F67F8BD2D33A8491FB2E8
5BA2BB3E1654E91FAD162198D74046A0D0DA776C72B19653C384F137FE2F2C0B
22E44DE76B8DC5F6483693CC0570BE5D3AAA999736F8649D61610BD6A90EF2CE
5CB3FBF89834AC0F9FE7D711030164D369966FF293DFF5CE3E09760991BE43DD
C1EC36C87B3EFF3AD68051BD4001646539D0558BA787BC4C9452E5E7855AB257
01BCFD2EF459393F9BA8579F4041C5E2724ED00C2841B1D7D75C9815BC042B78
CCEFBA239C2D02195CE277414692109216F0E5C8784F998FB23A74E686EF7CEF
8AC391B6187533042B43F6D99CF5477BD832C5407D87D64EA25EDB7136A3DBA2
832D3CF2E036B5E80EB9F630AD2F377F08EF34A8BA3B7C51D92FA8D6AD5E16CD
2058827FC22F49707CA9F527AF5C3F5E8158CABFD2AE27144B10CF5533B334AB
264D0A8BC22D0D58E0CC247A28D4ADCCF87EAEFEA07DCB70943C66499387F85B
94BA827FFA2EAF7B38D144784154BD7D1DC5F9D9975A5C61EB6BDB9D7F2F2759
2B2E1C379175AC346D2B30A54E6AF0BF968270B8F25A4C4B5C15D14EEC7BF32C
74486E924E3CBFC09B94EFC3F18BEE9F4D4CF102A58D40B8FD421BA8E33AD4EF
191E156223BB2EA49F86EE2DDBD1FD7DF79429B6E4C923F080EEAB130B08F225
B21887EAAB46EFCE4A65DC27F1218A8091BD2FFF87ED45359EC5411A444B291D
F51A334EC867217AE44F09A8A30157A4BBD92443D752D813CF9ADC4337E302AD
BEACB1A05DB01422E4F8947B247EC223F996C6AF2832A669DB0387D8F066972E
8F4DC20EAE8A4402208ECF869A0FA6F3944B2A8C055FAD22F4517A34EDF78E69
1DEBA743DF271F5E315735BCBDDB2C4FFFB0CF08F3B38183BDBE5F2734F3E18C
2514BC474E26C999E8C84DA18074943882C9F9F0BC454254BDBBFD6DF4190958
59E24D789BF4CC2B737CFDBD40C01F55406D2450691D6E1C804E48F8EBA157E1
867CCA3D2BA57964FE3BC098BD34DE7C3A50E70EC7A96A97F6C61BF5EBE5CF7E
658EA8E9CC539DC64529B3980CDA01A82F2ED43B5B384D33B5155E411848B965
EAE51F2140D1D3003FECEC3489B8FD02AE8F90CBC277A983859338A7DEBACEA6
1A95B4183C65CD81DF8FE633B9806C9E4D960FA1398BAB4B3673BE48D8CFF37F
628F498E474EE88B3C6BAD0D7506F41D4078E2886371A7CC4D3B514BB36FBC2D
34771F1050A85046BC59D7A1EB757CCFFD1E72C6C205D83B903E0E0047FB54C4
95754BA51EE39B403C0F97AED6E2FE69FBF1A168773D53D9DADC95597E0D29DD
354A702BE50E60774E7145013BFCBC10276012D16A110DC5C3324525D4140B85
4F083420146BC1C54CED91727E2988F8E4DE1900A9E00854489AB5D0F2288864
825AB813530A1E6E1A00AE39722E06E5605E51814B6E640A99D57CC0893D5739
A368518F2C7002424ABA0B659ED3C09463880F838560F67E217196CC4D8AFB9F
01C94BCE7F347DA88EBB9AE2C350957EF1DD590365E7F737A798400F1DA999AE
815CE2C19691054031766A1EA7CB218373411A79378F7B3AE2E3DC04C7B381B8
0FB89EFFF918B35371E9B19E9AF9E430B32A1B6355ACB1727ED9A46995D5F564
453182C671B363A3667F6E2334CBA2121CED171487B58BD872EEA9C096259D10
D17819413ED44268BECC7EAD5E43EF8EA625E36C30261439B562F0FFB8745E59
669F412ADC04F15D080A522F1D23B82ED7F49CB4096F04B70748F09804AD4E61
21342EE3C6913EB781A55A31E6421C6AB95C19666AA3944FE9A492039BE216EB
F95DCD2B092E7DD411AA49BCCD84D11263C0F00ADB9E1AF7C44065E26082D5FB
5E367E3A3A4961C629E31FE7A409F3CEE23F9093DD6ED507D83959632EE8EB52
8761D09E5C8B2E0CE5C2881FD535C80C4BACA0DF3A3EB4E5A5D7D917BF2B8AF3
8E625126B104A3D55E4C9B426BC2DF07A9F360E02FB947E1CCED44FB8F72AC5C
D1F9184190491337AE07D37F83F9672A31B8605954DFEB26F695603101C4A47C
5F0C550D6211D0805D0D28BD8ED37FDD54CA1F832E6AF3C1F33B58DE0C040D15
D7032E8BEEA19E837DA9AF21F9D7907AF183E5759E77F26DFBD6EF4F066B33E1
D5970C46A9DE06EE526E0483C559AB971D93D6A8A429E791EE33274AFF947167
61500869092F2AF2F0C9DBA78AE3A4939CC90F1A8411F899F2B522BBA275369D
42E9DF65665CA0F4DA1A16FFF1ABC1F76AC0BAC282F98E599DB34FE2F753328D
EE3BFEE0AF2AB20F9A607F7F7A74BA6AF5ECCEEEB5BEFC9AC7D6D7CF2ED981C6
E7BC4C77C5EF086BDFCFFB0A97AFE73F154AF002E5A17DC4C7C123C0079F0BDE
A4A16F5F96F94EB91F3F7F0DF48E6EE5606F568D6C028EC41B37EC914BCFAB3B
A0DC9B9997F5B1A8E58FDE6CADE1080E96A2752C438E1C800DDE4F53142A4DF2
37171E2C
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
cleartomark
{restore}if
%%EndFont 
TeXDict begin 40258437 52099151 1000 600 600 (writeup1.dvi)
@start /Fa 105[33 27[30 2[48 33 37 22 26 26 1[33 30 37
52 19 30 1[19 33 33 19 26 33 27 1[30 8[48 3[41 37 2[41
52 1[63 3[22 4[52 44 41 48 6[17 3[33 1[33 33 33 4[22
5[19 39[{ TeXBase1Encoding ReEncodeFont }40 66.6667 /URWPalladioL-Ital
rf /Fb 134[37 1[56 38 40 22 28 26 1[40 36 39 59 19 37
16 19 39 37 1[32 41 30 37 33 3[22 1[22 5[52 41 35 3[52
55 63 41 48 1[22 3[41 52 47 41 7[17 33 1[33 33 33 33
33 33 33 33 1[17 22 17 40[41 3[{ TeXBase1Encoding ReEncodeFont }51
66.6667 /URWPalladioL-Roma rf /Fc 204[40 40 40 49[{
 TeXBase1Encoding ReEncodeFont }3 79.1666 /URWPalladioL-Bold
rf /Fd 134[40 1[57 1[44 26 31 31 1[40 35 44 62 22 35
1[22 40 40 22 31 40 32 37 35 9[75 2[48 11[62 3[62 4[40
16[20 1[20 44[{ TeXBase1Encoding ReEncodeFont }28 79.1666
/URWPalladioL-Ital rf /Fe 168[87 61 66 1[61 66 71 4[56
5[56 61 1[66 11[51 51 51 51 51 51 51 49[{
 TeXBase1Encoding ReEncodeFont }17 91.6666 /NimbusSanL-Bold
rf /Ff 166[49 49 2[53 45 49 53 1[49 57 53 61 45 53 1[20
53 57 45 49 53 53 1[53 65[{ TeXBase1Encoding ReEncodeFont }20
73.3333 /NimbusSanL-Bold rf /Fg 201[32 32 32 32 32 50[{
 TeXBase1Encoding ReEncodeFont }5 58.3333 /NimbusSanL-Regu
rf /Fh 105[40 27[40 44 41 66 45 48 26 34 31 44 48 43
46 70 23 44 19 23 46 44 26 38 48 35 44 40 3[26 1[26 3[79
57 62 49 42 53 1[48 62 66 75 48 57 1[27 66 60 44 48 61
56 48 62 59 2[48 2[20 40 40 40 40 40 40 40 40 40 40 48
20 26 20 2[26 26 22 4[29 31[48 2[{ TeXBase1Encoding ReEncodeFont }72
79.1666 /URWPalladioL-Roma rf /Fi 138[37 19 2[37 2[37
4[15 1[37 1[37 37 33 1[37 25[52 5[44 65[{
 TeXBase1Encoding ReEncodeFont }12 66.6667 /NimbusSanL-ReguItal
rf /Fj 134[33 33 48 33 37 19 33 22 1[37 37 37 56 15 33
15 15 37 37 19 37 37 33 37 37 12[41 5[48 1[37 10[44 6[19
11[19 46[{ TeXBase1Encoding ReEncodeFont }30 66.6667
/NimbusSanL-Regu rf /Fk 139[22 37 26 14[37 41 37 31[48
65[{ TeXBase1Encoding ReEncodeFont }7 66.6667 /NimbusSanL-Bold
rf /Fl 134[56 1[83 1[60 1[42 39 1[60 55 58 88 29 2[29
58 56 1[48 61 1[55 50 13[52 2[60 2[95 61 9[61 78 9[50
2[50 1[50 50 50 3[25 2[33 33 40[{ TeXBase1Encoding ReEncodeFont }31
100 /URWPalladioL-Roma rf /Fm 138[85 46 1[56 1[85 77
82 3[33 41 1[79 1[68 1[63 11[142 3[74 2[86 111 23[71
4[71 71 71 48[{ TeXBase1Encoding ReEncodeFont }19 141.667
/URWPalladioL-Roma rf end
%%EndProlog
%%BeginSetup
%%Feature: *Resolution 600dpi
TeXDict begin
%%BeginPaperSize: Letter
/setpagedevice where
{ pop << /PageSize [612 792] >> setpagedevice }
{ /letter where { pop letter } if }
ifelse
%%EndPaperSize
 end
%%EndSetup
%%Page: 1 1
TeXDict begin 1 0 bop 0 0 a
SDict begin [/Producer (dvips + Distiller)/Title ()/Subject ()/Creator
(LaTeX with hyperref package)/Author ()/Keywords () /DOCINFO pdfmark
end
 0 0 a 0 0 a
SDict begin /product where{pop product(Distiller)search{pop pop pop
version(.)search{exch pop exch pop(3011)eq{gsave newpath 0 0 moveto
closepath clip/Courier findfont 10 scalefont setfont 72 72 moveto(.)show
grestore}if}{pop}ifelse}{pop}ifelse}if end
 0 0 a -158 -314
a
SDict begin H.S end
 -158 -314 a -158 -314 a
SDict begin H.R end
 -158 -314 a -158 -314 a
SDict begin [/View [/XYZ H.V]/Dest (page.1) cvn /DEST pdfmark end
 -158
-314 a 0 TeXcolorgray Black 0 TeXcolorgray -150 -150
a
 /pssetRGBcolor /setrgbcolor load def /pssetCMYKcolor /setcmykcolor
load def /pssetGraycolor /setgray load def
 -150 -150 a -150 -150 a
tx@Dict begin  gsave STV CP T /ps@rot 0 def grestore  end
 -150 -150 a -150 -150 a
tx@Dict begin  gsave STV CP T /ps@refangle 0.  def grestore  end
 -150
-150 a -150 -150 a
tx@Dict begin  gsave STV CP T /ps@rot 0 def grestore  end
 -150 -150 a -150 -150 a
SDict begin [/Count -0/Dest (section.1) cvn/Title (Command Log) /OUT
pdfmark end
 -150 -150
a -150 -150 a
SDict begin [/Count -0/Dest (section.2) cvn/Title (Write Up of Concurrency Solution)
/OUT pdfmark end
 -150 -150 a -150 -150 a
SDict begin [/Count -0/Dest (section.3) cvn/Title (Explaition of the Flags)
/OUT pdfmark end
 -150 -150 a -150
-150 a
SDict begin [/Count -0/Dest (section.4) cvn/Title (Questions Regarding Concurrency)
/OUT pdfmark end
 -150 -150 a -150 -150 a
SDict begin [/Count -0/Dest (section.5) cvn/Title (Version Control Log)
/OUT pdfmark end
 -150 -150 a -150 -150
a
SDict begin [/Count -0/Dest (section.6) cvn/Title (Work Log) /OUT pdfmark
end
 -150 -150 a -150 -150 a
SDict begin [/Count -0/Dest (section.7) cvn/Title (Citations) /OUT
pdfmark end
 -150 -150 a -150 -150 a
SDict begin [/Count -0/Dest (section.7) cvn/Title (References) /OUT
pdfmark end
 -150
-150 a -150 -150 a
SDict begin [/PageMode /UseOutlines/Page 1/View [/Fit] /DOCVIEW pdfmark
end
 -150 -150 a -150 -150 a
SDict begin [ {Catalog}<<>> /PUT pdfmark end
 -150 -150
a -150 -150 a
SDict begin H.S end
 -150 -150 a -150 -150 a
SDict begin 17.3749 H.A end
 -150 -150 a -150
-150 a
SDict begin [/View [/XYZ H.V]/Dest (Doc-Start) cvn /DEST pdfmark end
 -150 -150 a 0 TeXcolorgray 0 TeXcolorgray 1310
427 a Fm(Pr)m(oject)40 b(One)g(W)-10 b(riteup)1560 677
y(Spring)40 b(2017)p 0 TeXcolorgray 0 TeXcolorgray 266
996 a Fl(Shuai)30 b(Peng)e(\(pengs\),)g(Anya)g(Lehman)h(\(lehmana\),)g
(Andr)n(ew)g(Bowers)g(\(bowerand\),)p 0 TeXcolorgray
0 TeXcolorgray 1684 1243 a(May)f(4,)g(2017)1815 1473
y Fk(Abstract)p 0 TeXcolorgray 0 TeXcolorgray 127 1641
a Fj(This)d(is)g(our)g(wr)q(ite)f(up)h(f)n(or)g(the)f(project)h(one)g
Fi(Getting)f(Acquainted)p Fj(.)h(This)f(project)h(included)g(setting)f
(up)h(our)g(en)o(vironment)g(and)g(an)f(e)n(x)n(ercise)8
1754 y(on)i(concurrency)-7 b(.)28 b(Listed)e(belo)o(w)g(is)f(the)h
(process)h(w)o(e)f(took)g(to)g(set)f(out)h(the)f(en)o(vironment)g(as)i
(w)o(ell)e(as)i(the)e(process)i(w)o(e)g(took)e(to)h(complete)f(the)8
1866 y(concurrency)c(e)n(x)n(ercise)o(.)e(Note:)f(All)h(te)n(xt)f(in)g
(red)h(is)g(code)o(.)p 0 TeXcolorgray 1930 5709 a Fh(1)p
0 TeXcolorgray eop end
%%Page: 2 2
TeXDict begin 2 1 bop 0 TeXcolorgray 0 0 a
SDict begin /product where{pop product(Distiller)search{pop pop pop
version(.)search{exch pop exch pop(3011)eq{gsave newpath 0 0 moveto
closepath clip/Courier findfont 10 scalefont setfont 72 72 moveto(.)show
grestore}if}{pop}ifelse}{pop}ifelse}if end
 0 0 a -158
-314 a
SDict begin H.S end
 -158 -314 a -158 -314 a
SDict begin H.R end
 -158 -314 a -158 -314
a
SDict begin [/View [/XYZ H.V]/Dest (page.2) cvn /DEST pdfmark end
 -158 -314 a 0 TeXcolorgray 4018 -206 a Fg(2)p 0 TeXcolorgray
-150 -150 a
SDict begin H.S end
 -150 -150 a -150 -150 a
SDict begin 17.3749 H.A end
 -150 -150 a -150
-150 a
SDict begin [/View [/XYZ H.V]/Dest (section.1) cvn /DEST pdfmark end
 -150 -150 a 0 TeXcolorgray -148 -32 a Fe(1)p 0
TeXcolorgray 96 w(C)t Ff(O)t(M)t(M)t(A)t(N)t(D)34 b Fe(L)t
Ff(O)t(G)-150 45 y
SDict begin H.S end
 -150 45 a -150 45 a
SDict begin 17.3749 H.A end
 -150 45 a -150
45 a
SDict begin [/View [/XYZ H.V]/Dest (Item.1) cvn /DEST pdfmark end
 -150 45 a 0 TeXcolorgray -97 138 a Fh(1\))p 0 TeXcolorgray
39 w(T)-7 b(o)22 b(start)f(we)h(logged)h(on)f(to)h(the)f(os-class)p
0.75 0.25 0.25 TeXcolorrgb 21 w(ssh)f(username@os-class.or)o
(egonstate.edu)p 0 TeXcolorgray -150 161 a
SDict begin H.S end
 -150 161 a
-150 161 a
SDict begin 17.3749 H.A end
 -150 161 a -150 161 a
SDict begin [/View [/XYZ H.V]/Dest (Item.2) cvn /DEST pdfmark end
 -150 161 a 0 TeXcolorgray
-97 283 a Fh(2\))p 0 TeXcolorgray 39 w(Then)h(we)g(used)g(cd)h(to)f
(get)g(to)g(the)g(corr)o(ect)g(folder)i(in)e(scratch/spring2017)p
0.75 0.25 0.25 TeXcolorrgb 20 w(cd)g(/scratch/spring2017)p
0 TeXcolorgray -150 305 a
SDict begin H.S end
 -150 305 a -150 305 a
SDict begin 17.3749 H.A end
 -150
305 a -150 305 a
SDict begin [/View [/XYZ H.V]/Dest (Item.3) cvn /DEST pdfmark end
 -150 305 a 0 TeXcolorgray -97 427 a
Fh(3\))p 0 TeXcolorgray 39 w(Then)g(we)g(made)g(a)g(gr)o(oup)f(folder)j
(for)f(us)e(all)h(to)g(work)h(in)p 0.75 0.25 0.25 TeXcolorrgb
22 w(mkdir)g(11-04)p 0 TeXcolorgray -150 449 a
SDict begin H.S end
 -150 449
a -150 449 a
SDict begin 17.3749 H.A end
 -150 449 a -150 449 a
SDict begin [/View [/XYZ H.V]/Dest (Item.4) cvn /DEST pdfmark end
 -150 449 a 0 TeXcolorgray
-97 571 a Fh(4\))p 0 TeXcolorgray 39 w(Next)g(we)h(str)o(uggled)g(to)f
(make)g(said)g(folder)i(accessible)e(to)g(all)h(of)g(our)g(gor)o(up)f
(members)g(by)h(changing)f(the)h(permitions)f(on)h(it)f(so)8
715 y(not)g(just)d(the)i(gr)o(oup)g(member)g(that)f(cr)i(eated)f(the)g
(dir)o(ectory)g(could)h(work)g(in)f(it)p 0.75 0.25 0.25
TeXcolorrgb 22 w(chmod)h(777)e(11-04)p 0 TeXcolorgray
-150 738 a
SDict begin H.S end
 -150 738 a -150 738 a
SDict begin 17.3749 H.A end
 -150 738 a -150 738
a
SDict begin [/View [/XYZ H.V]/Dest (Item.5) cvn /DEST pdfmark end
 -150 738 a 0 TeXcolorgray -97 860 a Fh(5\))p 0 TeXcolorgray
39 w(Then)g(we)g(called)h(git)f(clone)g(to)h(download)g(the)f(pr)o
(oject)f(fr)o(om)i(the)f(GitHub)g(account)f(and)i(we)f(checked)h(to)f
(make)g(sur)o(e)f(we)h(got)g(all)8 1004 y(the)h(corr)o(ect)h(\002les)p
0.75 0.25 0.25 TeXcolorrgb 21 w(git)f(clone)h(git://git.yoctopr)o
(oject.or)o(g/linux-yocto-3.14)p 0 TeXcolorgray -150
1026 a
SDict begin H.S end
 -150 1026 a -150 1026 a
SDict begin 17.3749 H.A end
 -150 1026 a -150 1026
a
SDict begin [/View [/XYZ H.V]/Dest (Item.6) cvn /DEST pdfmark end
 -150 1026 a 0 TeXcolorgray -97 1148 a Fh(6\))p 0 TeXcolorgray
39 w(Then)k(we)g(switched)g(to)f(the)h(tag)f(we)h(needed)h(by)e(using)h
(cd)g(again)f(and)h(going)h(into)f(the)f(dir)o(ectory)i(that)e(was)g
(cloned)i(into)f(our)8 1292 y(folder)p 0.75 0.25 0.25
TeXcolorrgb 24 w(cd)22 b(linux-yocto-3.14)p 0 TeXcolorgray
-150 1315 a
SDict begin H.S end
 -150 1315 a -150 1315 a
SDict begin 17.3749 H.A end
 -150 1315 a -150
1315 a
SDict begin [/View [/XYZ H.V]/Dest (Item.7) cvn /DEST pdfmark end
 -150 1315 a 0 TeXcolorgray -97 1437 a Fh(7\))p
0 TeXcolorgray 39 w(Following)h(this)f(we)g(checked)h(out)f(the)g
(v3.14.26)p 0.75 0.25 0.25 TeXcolorrgb 19 w(git)g(checkout)g(v3.14.26)p
0 TeXcolorgray -150 1459 a
SDict begin H.S end
 -150 1459 a -150 1459 a
SDict begin 17.3749 H.A end
 -150
1459 a -150 1459 a
SDict begin [/View [/XYZ H.V]/Dest (Item.8) cvn /DEST pdfmark end
 -150 1459 a 0 TeXcolorgray -97 1581
a Fh(8\))p 0 TeXcolorgray 39 w(Next)32 b(came)h(con\002guring)g(the)f
(envir)o(onment)h(which)g(we)f(did)i(by)e(calling)p 0.75 0.25 0.25
TeXcolorrgb 33 w(sour)o(ce)g(/scratch/opt/envir)o(onment-setup-i586-)8
1725 y(poky-linux)p 0 TeXcolorgray -150 1747 a
SDict begin H.S end
 -150 1747
a -150 1747 a
SDict begin 17.3749 H.A end
 -150 1747 a -150 1747 a
SDict begin [/View [/XYZ H.V]/Dest (Item.9) cvn /DEST pdfmark end
 -150 1747 a 0 TeXcolorgray
-97 1869 a Fh(9\))p 0 TeXcolorgray 39 w(Then)22 b(we)g(made)g(a)g
(kernel)g(instance)g(for)h(our)f(gr)o(oup)-150 1892 y
SDict begin H.S end

-150 1892 a -150 1892 a
SDict begin 17.3749 H.A end
 -150 1892 a -150 1892 a
SDict begin [/View [/XYZ H.V]/Dest (Item.10) cvn /DEST pdfmark end
 -150
1892 a 0 TeXcolorgray -137 2014 a Fh(10\))p 0 TeXcolorgray
39 w(Then)g(we)g(coppied)g(in)h(the)e(\002les)h(that)g(lets)f(us)g
(con\002gur)o(e)p 0.75 0.25 0.25 TeXcolorrgb 22 w(cp)h
(/scratch/spring2017/\002les/con\002g-3.14.26-yocto-qemu)d(.con\002g)p
0 TeXcolorgray -150 2036 a
SDict begin H.S end
 -150 2036 a -150 2036 a
SDict begin 17.3749 H.A end
 -150
2036 a -150 2036 a
SDict begin [/View [/XYZ H.V]/Dest (Item.11) cvn /DEST pdfmark end
 -150 2036 a 0 TeXcolorgray -137 2158
a Fh(11\))p 0 TeXcolorgray 39 w(Then)j(we)g(ran)p 0.75 0.25 0.25
TeXcolorrgb 22 w(make)g(menucon\002g)p 0 TeXcolorgray
-150 2180 a
SDict begin H.S end
 -150 2180 a -150 2180 a
SDict begin 17.3749 H.A end
 -150 2180 a -150
2180 a
SDict begin [/View [/XYZ H.V]/Dest (Item.12) cvn /DEST pdfmark end
 -150 2180 a 0 TeXcolorgray -137 2302 a Fh(12\))p
0 TeXcolorgray 39 w(A)g(window)h(popped)e(up)-150 2324
y
SDict begin H.S end
 -150 2324 a -150 2324 a
SDict begin 17.3749 H.A end
 -150 2324 a -150 2324 a
SDict begin [/View [/XYZ H.V]/Dest (Item.13) cvn /DEST pdfmark end
 -150
2324 a 0 TeXcolorgray -137 2446 a Fh(13\))p 0 TeXcolorgray
39 w(In)h(this)g(window)h(we)f(pr)o(essed)p 0.75 0.25 0.25
TeXcolorrgb 21 w(/)p 0 TeXcolorgray 22 w(and)g(typed)p
0.75 0.25 0.25 TeXcolorrgb 22 w(LOCAL)-7 b(VERSION)p
0 TeXcolorgray -150 2469 a
SDict begin H.S end
 -150 2469 a -150 2469 a
SDict begin 17.3749 H.A end
 -150
2469 a -150 2469 a
SDict begin [/View [/XYZ H.V]/Dest (Item.14) cvn /DEST pdfmark end
 -150 2469 a 0 TeXcolorgray -137 2591
a Fh(14\))p 0 TeXcolorgray 39 w(Next)22 b(we)g(pr)o(essed)p
0.75 0.25 0.25 TeXcolorrgb 21 w(1)p 0 TeXcolorgray 22
w(and)g(edited)g(the)g(value)g(to)g(be)p 0.75 0.25 0.25
TeXcolorrgb 22 w(-11-04-hw1)p 0 TeXcolorgray 21 w(to)g(make)g(that)f
(the)h(name)g(of)h(the)e(kernel)-150 2613 y
SDict begin H.S end
 -150 2613
a -150 2613 a
SDict begin 17.3749 H.A end
 -150 2613 a -150 2613 a
SDict begin [/View [/XYZ H.V]/Dest (Item.15) cvn /DEST pdfmark end
 -150 2613 a 0 TeXcolorgray
-137 2735 a Fh(15\))p 0 TeXcolorgray 39 w(Then)h(we)g(built)g(our)g
(kernel)h(with)f(four)g(thr)o(eads)g(by)g(r)o(unning)p
0.75 0.25 0.25 TeXcolorrgb 23 w(-j4)p 0 TeXcolorgray
-150 2757 a
SDict begin H.S end
 -150 2757 a -150 2757 a
SDict begin 17.3749 H.A end
 -150 2757 a -150
2757 a
SDict begin [/View [/XYZ H.V]/Dest (Item.16) cvn /DEST pdfmark end
 -150 2757 a 0 TeXcolorgray -137 2879 a Fh(16\))p
0 TeXcolorgray 39 w(Then)g(we)g(ran)p 0.75 0.25 0.25
TeXcolorrgb 22 w(cd)h(..)p 0 TeXcolorgray 22 w(followed)g(by)p
0.75 0.25 0.25 TeXcolorrgb 22 w(gdb)p 0 TeXcolorgray
-150 2901 a
SDict begin H.S end
 -150 2901 a -150 2901 a
SDict begin 17.3749 H.A end
 -150 2901 a -150
2901 a
SDict begin [/View [/XYZ H.V]/Dest (Item.17) cvn /DEST pdfmark end
 -150 2901 a 0 TeXcolorgray -137 3023 a Fh(17\))p
0 TeXcolorgray 39 w(Our)j(next)f(step)f(was)h(to)h(move)f(onto)h(a)f
(dif)o(fer)o(ent)g(laptop)g(and)g(called)p 0.75 0.25 0.25
TeXcolorrgb 26 w(sour)o(ce)g(/scratch/opt/envir)o
(onment-setup-i586-poky-)8 3168 y(linux)p 0 TeXcolorgray
44 w(again)-150 3190 y
SDict begin H.S end
 -150 3190 a -150 3190 a
SDict begin 17.3749 H.A end
 -150 3190
a -150 3190 a
SDict begin [/View [/XYZ H.V]/Dest (Item.18) cvn /DEST pdfmark end
 -150 3190 a 0 TeXcolorgray -137 3312 a
Fh(18\))p 0 TeXcolorgray 39 w(Then)17 b(we)f(made)h(a)f(copy)g(for)i
(the)e(starting)g(kernel)h(and)g(the)f(drive)h(\002le)f(located)h(in)g
(the)f(scratch)h(dir)o(ectory)g(by)f(calling)p 0.75 0.25 0.25
TeXcolorrgb 17 w(/scratch/spring2017/\002les/cor)o(e-)8
3456 y(image-lsb-sdk-qemux86.ext3)p 0 TeXcolorgray -150
3478 a
SDict begin H.S end
 -150 3478 a -150 3478 a
SDict begin 17.3749 H.A end
 -150 3478 a -150 3478
a
SDict begin [/View [/XYZ H.V]/Dest (Item.19) cvn /DEST pdfmark end
 -150 3478 a 0 TeXcolorgray -137 3600 a Fh(19\))p 0
TeXcolorgray 39 w(Then)h(we)f(tried)h(r)o(unning)g(the)g(starting)f
(kernel)p 0.75 0.25 0.25 TeXcolorrgb 17 w(qemu-system-i386)e(-gdb)j
(tcp::5604)e(-S)h(-nographic)h(-kernel)g(bzImage-qemux86.bin)8
3745 y(-drive)29 b(\002le=cor)o(e-image)g
(-lsb-sdk-qemux86.ext3,if=virtio)d(-enable-kvm)i(-net)h(none)g(-usb)e
(-localtime)i(\226no-r)o(eboot)f(\226append)8 3889 y("r)o(oot=/dev/vda)
23 b(rw)f(console=ttyS0)f(debug")p 0 TeXcolorgray -150
3911 a
SDict begin H.S end
 -150 3911 a -150 3911 a
SDict begin 17.3749 H.A end
 -150 3911 a -150 3911
a
SDict begin [/View [/XYZ H.V]/Dest (Item.20) cvn /DEST pdfmark end
 -150 3911 a 0 TeXcolorgray -137 4033 a Fh(20\))p 0
TeXcolorgray 39 w(Since)h(we)g(pr)o(eviously)f(ran)h(the)g(qemu)f(in)i
(debug)e(mode,)i(we)f(used)f(gdb)h(to)g(contr)o(ol)h(it)f(so,)f(back)h
(on)g(the)g(origonal)h(computer)-6 b(,)21 b(we)8 4177
y(connected)i(the)f(qemu)g(by)g(r)o(unning)p 0.75 0.25 0.25
TeXcolorrgb 23 w(tar)o(get)f(r)o(emote)h(:5604)p 0 TeXcolorgray
-150 4200 a
SDict begin H.S end
 -150 4200 a -150 4200 a
SDict begin 17.3749 H.A end
 -150 4200 a -150
4200 a
SDict begin [/View [/XYZ H.V]/Dest (Item.21) cvn /DEST pdfmark end
 -150 4200 a 0 TeXcolorgray -137 4322 a Fh(21\))p
0 TeXcolorgray 39 w(Then)g(we)g(r)o(ebooted)g(the)g(VM)p
0.75 0.25 0.25 TeXcolorrgb 23 w(r)o(eboot)p 0 TeXcolorgray
-150 4338 a
SDict begin H.S end
 -150 4338 a -150 4338 a
SDict begin 17.3749 H.A end
 -150 4338 a -150
4338 a
SDict begin [/View [/XYZ H.V]/Dest (Item.22) cvn /DEST pdfmark end
 -150 4338 a 0 TeXcolorgray -137 4466 a Fh(22\))p
0 TeXcolorgray 39 w(Then)g(we)g(tried)h(r)o(unning)g(the)f(kernel)g
(instance)f(we)h(had)h(cr)o(eated)p 0.75 0.25 0.25 TeXcolorrgb
21 w(linux-yocto-3.14/ar)o(ch/x86/boot/)p 0 TeXcolorgray
-150 4488 a
SDict begin H.S end
 -150 4488 a -150 4488 a
SDict begin 17.3749 H.A end
 -150 4488 a -150
4488 a
SDict begin [/View [/XYZ H.V]/Dest (Item.23) cvn /DEST pdfmark end
 -150 4488 a 0 TeXcolorgray -137 4610 a Fh(23\))p
0 TeXcolorgray 39 w(Then)33 b(we)f(ran)p 0.75 0.25 0.25
TeXcolorrgb 33 w(qemu-system-i386)f(-gdb)i(tcp::5601)d(-S)j(-nographic)
g(-kernel)g(linux-yocto-3.14/ar)o(ch/x86/boot/bzImage)d(-)8
4754 y(drive)i(\002le=cor)o(e-image-lsb-sdk-q)g(emux86.ext3,if=virtio)d
(-enable-kvm)i(-net)g(none)h(-usb)f(-localtime)g(\226no-r)o(eboot)g
(\226append)8 4899 y("r)o(oot=/dev/vda)23 b(rw)f(console=ttyS0)f
(debug")p 0 TeXcolorgray -150 4921 a
SDict begin H.S end
 -150 4921 a -150
4921 a
SDict begin 17.3749 H.A end
 -150 4921 a -150 4921 a
SDict begin [/View [/XYZ H.V]/Dest (Item.24) cvn /DEST pdfmark end
 -150 4921 a 0 TeXcolorgray
-137 5043 a Fh(24\))p 0 TeXcolorgray 39 w(Finally)h(we)g(r)o(ebooted)h
(the)f(vm)f(and)i(used)p 0.75 0.25 0.25 TeXcolorrgb 21
w(q)p 0 TeXcolorgray 23 w(to)f(quit)-150 5082 y
SDict begin H.S end
 -150
5082 a -150 5082 a
SDict begin 17.3749 H.A end
 -150 5082 a -150 5082 a
SDict begin [/View [/XYZ H.V]/Dest (section.2) cvn /DEST pdfmark end
 -150 5082
a 0 TeXcolorgray 0 TeXcolorgray eop end
%%Page: 3 3
TeXDict begin 3 2 bop 0 TeXcolorgray 0 0 a
SDict begin /product where{pop product(Distiller)search{pop pop pop
version(.)search{exch pop exch pop(3011)eq{gsave newpath 0 0 moveto
closepath clip/Courier findfont 10 scalefont setfont 72 72 moveto(.)show
grestore}if}{pop}ifelse}{pop}ifelse}if end
 0 0 a -158
-314 a
SDict begin H.S end
 -158 -314 a -158 -314 a
SDict begin H.R end
 -158 -314 a -158 -314
a
SDict begin [/View [/XYZ H.V]/Dest (page.3) cvn /DEST pdfmark end
 -158 -314 a 0 TeXcolorgray 4018 -206 a Fg(3)p 0 TeXcolorgray
0 TeXcolorgray -148 -32 a Fe(2)p 0 TeXcolorgray 96 w(W)t
Ff(R)t(I)t(T)t(E)32 b Fe(U)t Ff(P)f(O)t(F)f Fe(C)t Ff(O)t(N)t(C)t(U)t
(R)t(R)t(E)t(N)t(C)t(Y)35 b Fe(S)t Ff(O)t(L)t(U)t(T)t(I)t(O)t(N)-150
138 y Fh(W)-7 b(e)41 b(noticed)h(that)e(the)h(assignment)f(r)o(equir)o
(ed)h(functionality)g(for)h(a)e(consumer)-6 b(,)41 b(pr)o(oducer)-6
b(,)41 b(and)h(random)f(number)g(generator)-150 283 y(operations.)32
b(The)h(best)f(solution)h(we)h(thought)f(of)g(was)g(to)g(cr)o(eate)g
(functions)g(for)h(each)f(of)h(these)e(operations,)h(then)g(use)f(main)
h(to)-150 427 y(generate)28 b(our)h(thr)o(eads)e(and)i(handle)f(the)g
(operations)g(of)h(the)f(pr)o(ogram.)g(Our)h(main)f(function)h
(intitialzes)e(our)h(values,)f(cr)o(eates)g(the)-150
571 y(thr)o(eads,)21 b(then)h(loops)f(thr)o(ough)h(calling)f(the)h(dif)
o(fer)o(ent)g(functions)g(as)f(necessary)-9 b(.)21 b(Once)h(the)g(pr)o
(oducer)g(function)g(is)g(called,)f(it)h(calls)f(the)-150
715 y(random)g(generator)f(function)h(to)f(cr)o(eate)f(the)h(numbers)g
(to)g(be)g(stor)o(ed)g(in)g(the)g(str)o(uct,)g(which)h(ar)o(e)e(stor)o
(ed)h(in)g(the)g(buf)o(fer)h(once)f(the)g(str)o(uct)-150
860 y(is)i(cr)o(eated.)g(W)-7 b(e)22 b(used)g(mutex)g(locking)h(to)g
(pr)o(otect)f(data)g(fr)o(om)g(other)h(thr)o(eads.)f(Thepr)o(oducer)g
(then)g(waits)g(it's)g(wait)g(period,)h(which)f(is)-150
1004 y(also)f(randomly)i(generated.)e(In)h(a)f(similar)g(fashion,)h
(when)g(the)f(consumer)h(fucntion)g(is)g(called)g(it)f(will)h(pull)f(a)
h(str)o(uct)f(fr)o(om)h(the)g(buf)o(fer)-6 b(,)-150 1148
y(wait)23 b(for)i(the)f(given)g(amount)f(of)i(time,)e(given)h(by)f(the)
h(second)g(number)g(in)g(the)g(str)o(uct,)f(then)h(print)g(out)g(the)f
(\002rst)h(number)-6 b(.)23 b(As)h(noted)-150 1292 y(earlier)-6
b(,)22 b(main)g(loops)g(thr)o(ough)g(cr)o(eating)f(thr)o(eads)h(and)g
(calling)g(the)g(functions.)-150 1315 y
SDict begin H.S end
 -150 1315 a -150
1315 a
SDict begin 17.3749 H.A end
 -150 1315 a -150 1315 a
SDict begin [/View [/XYZ H.V]/Dest (section.3) cvn /DEST pdfmark end
 -150 1315 a 0 TeXcolorgray
-148 1591 a Fe(3)p 0 TeXcolorgray 96 w(E)t Ff(X)t(P)t(L)t(A)t(I)t(T)t
(I)t(O)t(N)35 b(O)t(F)c(T)t(H)t(E)f Fe(F)t Ff(L)t(AG)t(S)-150
1668 y
SDict begin H.S end
 -150 1668 a -150 1668 a
SDict begin 17.3749 H.A end
 -150 1668 a -150 1668
a
SDict begin [/View [/XYZ H.V]/Dest (Item.25) cvn /DEST pdfmark end
 -150 1668 a 0 TeXcolorgray -97 1761 a Fh(1\))p 0 TeXcolorgray
0.75 0.25 0.25 TeXcolorrgb 39 w(-gdb)p 0 TeXcolorgray
23 w(makes)21 b(the)h(device)g(wait)g(for)h(a)f(connection)h(to)f(the)g
(gdb)g(debug)g(tool.)-150 1784 y
SDict begin H.S end
 -150 1784 a -150 1784
a
SDict begin 17.3749 H.A end
 -150 1784 a -150 1784 a
SDict begin [/View [/XYZ H.V]/Dest (Item.26) cvn /DEST pdfmark end
 -150 1784 a 0 TeXcolorgray
-97 1906 a Fh(2\))p 0 TeXcolorgray 0.75 0.25 0.25 TeXcolorrgb
39 w(-nongraphic)p 0 TeXcolorgray 23 w(means)f(make)h(it)g(a)g(non)g
(graphical)g(interface)g(that)f(works)i(like)f(the)g(command)g(line.)
-150 1928 y
SDict begin H.S end
 -150 1928 a -150 1928 a
SDict begin 17.3749 H.A end
 -150 1928 a -150
1928 a
SDict begin [/View [/XYZ H.V]/Dest (Item.27) cvn /DEST pdfmark end
 -150 1928 a 0 TeXcolorgray -97 2050 a Fh(3\))p
0 TeXcolorgray 0.75 0.25 0.25 TeXcolorrgb 39 w(-kernal)p
0 TeXcolorgray 23 w(means)f(to)h(use)g(the)g(following)h(kernel.)-150
2072 y
SDict begin H.S end
 -150 2072 a -150 2072 a
SDict begin 17.3749 H.A end
 -150 2072 a -150 2072
a
SDict begin [/View [/XYZ H.V]/Dest (Item.28) cvn /DEST pdfmark end
 -150 2072 a 0 TeXcolorgray -97 2194 a Fh(4\))p 0 TeXcolorgray
0.75 0.25 0.25 TeXcolorrgb 39 w(-drive)p 0 TeXcolorgray
23 w(means)e(to)i(use)e(the)h(following)h(driver)-6 b(.)-150
2216 y
SDict begin H.S end
 -150 2216 a -150 2216 a
SDict begin 17.3749 H.A end
 -150 2216 a -150 2216
a
SDict begin [/View [/XYZ H.V]/Dest (Item.29) cvn /DEST pdfmark end
 -150 2216 a 0 TeXcolorgray -97 2338 a Fh(5\))p 0 TeXcolorgray
0.75 0.25 0.25 TeXcolorrgb 39 w(-enablekvm)p 0 TeXcolorgray
22 w(enables)21 b(KVM)i(in)f(full)g(virtualization)f(support.)-150
2361 y
SDict begin H.S end
 -150 2361 a -150 2361 a
SDict begin 17.3749 H.A end
 -150 2361 a -150 2361
a
SDict begin [/View [/XYZ H.V]/Dest (Item.30) cvn /DEST pdfmark end
 -150 2361 a 0 TeXcolorgray -97 2483 a Fh(6\))p 0 TeXcolorgray
0.75 0.25 0.25 TeXcolorrgb 39 w(-net)p 0 TeXcolorgray
23 w(means)g(to)h(use)f(the)h(follwing)h(network.)-150
2505 y
SDict begin H.S end
 -150 2505 a -150 2505 a
SDict begin 17.3749 H.A end
 -150 2505 a -150 2505
a
SDict begin [/View [/XYZ H.V]/Dest (Item.31) cvn /DEST pdfmark end
 -150 2505 a 0 TeXcolorgray -97 2627 a Fh(7\))p 0 TeXcolorgray
0.75 0.25 0.25 TeXcolorrgb 39 w(-usb)p 0 TeXcolorgray
22 w(enables)e(the)h(USB)g(driver)-6 b(.)-150 2643 y
SDict begin H.S end

-150 2643 a -150 2643 a
SDict begin 17.3749 H.A end
 -150 2643 a -150 2643 a
SDict begin [/View [/XYZ H.V]/Dest (Item.32) cvn /DEST pdfmark end
 -150
2643 a 0 TeXcolorgray -97 2771 a Fh(8\))p 0 TeXcolorgray
0.75 0.25 0.25 TeXcolorrgb 39 w(-localtime)p 0 TeXcolorgray
23 w(its)21 b(setting)h(the)g(time)f(for)i(the)f(local)h(machine.)-150
2793 y
SDict begin H.S end
 -150 2793 a -150 2793 a
SDict begin 17.3749 H.A end
 -150 2793 a -150 2793
a
SDict begin [/View [/XYZ H.V]/Dest (Item.33) cvn /DEST pdfmark end
 -150 2793 a 0 TeXcolorgray -97 2915 a Fh(9\))p 0 TeXcolorgray
0.75 0.25 0.25 TeXcolorrgb 39 w(\226no-r)o(eboot)p 0
TeXcolorgray 23 w(exits)e(instead)g(of)i(r)o(ebooting.)-150
2938 y
SDict begin H.S end
 -150 2938 a -150 2938 a
SDict begin 17.3749 H.A end
 -150 2938 a -150 2938
a
SDict begin [/View [/XYZ H.V]/Dest (Item.34) cvn /DEST pdfmark end
 -150 2938 a 0 TeXcolorgray -137 3060 a Fh(10\))p 0
TeXcolorgray 0.75 0.25 0.25 TeXcolorrgb 39 w(\226append)p
0 TeXcolorgray 21 w(uses)e(the)h(command)g(line)h(as)e(the)h(kernel)g
(command)h(line.)-150 3082 y
SDict begin H.S end
 -150 3082 a -150 3082 a
SDict begin 17.3749 H.A end

-150 3082 a -150 3082 a
SDict begin [/View [/XYZ H.V]/Dest (Item.35) cvn /DEST pdfmark end
 -150 3082 a 0 TeXcolorgray -137
3204 a Fh(11\))p 0 TeXcolorgray 0.75 0.25 0.25 TeXcolorrgb
39 w(-s)p 0 TeXcolorgray 22 w(changes)f(it)g(to)g(strict)g(mode)h
(which)f(makes)f(it)h(so)g(that)g(it)g(fails)f(on)i(dif)o(fer)o(ent)f
(image)g(size)f(or)i(sector)f(allocation.)-150 3243 y
SDict begin H.S end

-150 3243 a -150 3243 a
SDict begin 17.3749 H.A end
 -150 3243 a -150 3243 a
SDict begin [/View [/XYZ H.V]/Dest (section.4) cvn /DEST pdfmark end
 -150
3243 a 0 TeXcolorgray -148 3503 a Fe(4)p 0 TeXcolorgray
96 w(Q)s Ff(U)t(E)t(S)t(T)t(I)t(O)t(N)t(S)35 b Fe(R)t
Ff(E)t(G)t(A)t(R)t(D)t(I)t(N)t(G)g Fe(C)t Ff(O)t(N)t(C)t(U)t(R)t(R)t(E)
t(N)t(C)t(Y)-150 3579 y
SDict begin H.S end
 -150 3579 a -150 3579 a
SDict begin 17.3749 H.A end
 -150
3579 a -150 3579 a
SDict begin [/View [/XYZ H.V]/Dest (Item.36) cvn /DEST pdfmark end
 -150 3579 a 0 TeXcolorgray -97 3673
a Fh(1\))p 0 TeXcolorgray 39 w Fd(What)28 b(do)g(you)g(think)g(the)g
(main)g(point)h(of)f(this)g(assignment)f(is)h Fh(The)g(main)f(point)h
(of)h(this)f(assignment)f(is)g(to)h(get)g(us)g(to)g(learn)g(mor)o(e)8
3817 y(about)36 b(conncer)o(ency)g(and)h(to)f(build)g(up)f(our)i
(ability)e(to)i(understand)f(and)g(think)g(in)g(parallel.)f(Parallel)h
(computing)f(is)h(the)8 3961 y(simultaneous)24 b(use)h(of)h(multiple)e
(r)o(esour)o(ces)h(to)g(solve)g(a)g(computational)g(pr)o(oblem.)f(This)
h(is)g(important)g(because)f(compar)o(ed)h(to)8 4105
y(serial)e(computing,)g(parallel)g(computing)h(is)f(much)g(better)h
(for)g(tasks)e(such)i(as)f(modeling,)h(simulating,)e(and)i(working)g
(on)g(mor)o(e)8 4250 y(complex,)h(r)o(eal)f(world)i(pr)o(oblems.)d(The)
i(conceptual)f(pr)o(oblem)g(of)h(this)g(assingmnt)e(is)i(not)f(as)g
(challenging)h(as)f(understuanding)8 4394 y(how)h(to)f(implement)f(it.)
g(The)h(secondary)g(point)f(of)i(this)e(assignment)g(is)g(to)h(get)g
(us)f(familiar)h(with)g(the)g(techniques)f(we)h(need)g(for)8
4538 y(the)e(r)o(est)g(of)g(this)g(class.)-150 4540 y
SDict begin H.S end

-150 4540 a -150 4540 a
SDict begin 17.3749 H.A end
 -150 4540 a -150 4540 a
SDict begin [/View [/XYZ H.V]/Dest (Item.37) cvn /DEST pdfmark end
 -150
4540 a 0 TeXcolorgray -97 4682 a Fh(2\))p 0 TeXcolorgray
39 w Fd(How)29 b(did)f(you)g(personally)f(appr)o(oach)h(the)g(pr)o
(oblem?)e(Design)i(decisions,)g(algorithm,)f(etc.)i Fh(T)-7
b(o)28 b(start)g(this)g(pr)o(oblem,)f(we)i(\002rst)f(worked)8
4827 y(out)c(the)g(pseudo)f(code)i(with)f(pen)g(and)g(paper)-6
b(.)23 b(W)-7 b(e)24 b(designed)g(it)g(so)g(that)f(the)h(Consumer)g(is)
f(a)h(function)g(and)h(the)e(Pr)o(oducer)i(is)e(a)8 4971
y(function.)i(Then)f(we)g(also)g(cr)o(eated)g(a)g(function)g(that)g
(generated)g(dif)o(fer)o(ent)h(random)g(numbers)e(based)h(on)g(cases[)p
Fc(1)o Fh(])h([)p Fc(3)p Fh(])f(\(case)g(for)8 5115 y(the)29
b(3-7)f(second)h(waiting)f(period,)h(the)f(2-9)g(second)h(waiting)g
(period,)f(and)h(the)g(random)g(number)f(that)g(the)g(consumer)h
(prints)8 5259 y(out\).)20 b(W)-7 b(e)19 b(went)h(about)e(this)h(by)h
(using)f(a)g(str)o(uct)g(to)g(hold)i(the)e(values)f(that)h(the)g(Pr)o
(oducer)h(cr)o(eates)f(and)g(the)g(Consumer)h(ar)o(e)f(taking.)8
5404 y(The)24 b(\002rst)g(number)g(in)g(each)g(str)o(uct)g(will)g(be)g
(the)g(randomly)h(gemerated)e(number)h(for)h(the)f(consumer)g(to)h
(print)f(and)g(the)g(second)p 0 TeXcolorgray 0 TeXcolorgray
eop end
%%Page: 4 4
TeXDict begin 4 3 bop 0 TeXcolorgray 0 0 a
SDict begin /product where{pop product(Distiller)search{pop pop pop
version(.)search{exch pop exch pop(3011)eq{gsave newpath 0 0 moveto
closepath clip/Courier findfont 10 scalefont setfont 72 72 moveto(.)show
grestore}if}{pop}ifelse}{pop}ifelse}if end
 0 0 a -158
-314 a
SDict begin H.S end
 -158 -314 a -158 -314 a
SDict begin H.R end
 -158 -314 a -158 -314
a
SDict begin [/View [/XYZ H.V]/Dest (page.4) cvn /DEST pdfmark end
 -158 -314 a 0 TeXcolorgray 4018 -206 a Fg(4)p 0 TeXcolorgray
8 -54 a Fh(will)21 b(be)f(the)h(time)f(the)g(consumer)h(should)f(wait.)
g(This)g(str)o(uct)g(is)h(generated)f(in)h(our)g(main)f(function.)h(W)
-7 b(e)20 b(also)g(cr)o(eated)g(a)h(function)8 90 y(that)h(checked)h
(to)f(see)f(if)i(RdRand)f(works)g(on)h(the)f(curr)o(ent)g(system.[)p
Fc(2)n Fh(])-150 113 y
SDict begin H.S end
 -150 113 a -150 113 a
SDict begin 17.3749 H.A end
 -150 113
a -150 113 a
SDict begin [/View [/XYZ H.V]/Dest (Item.38) cvn /DEST pdfmark end
 -150 113 a 0 TeXcolorgray -97 235 a Fh(3\))p
0 TeXcolorgray 39 w Fd(How)k(did)f(you)h(ensur)o(e)f(your)g(solution)h
(was)h(corr)o(ect?)e(T)-9 b(esting)26 b(details,)f(for)h(instance.)g
Fh(T)-7 b(o)26 b(ensur)o(e)f(that)g(our)h(solution)g(was)f(corr)o(ect)h
(we)8 379 y(used)e(printf)f(to)h(print)f(out)h(all)f(the)h(step)e(by)i
(step)e(details)h(that)g(ar)o(e)g(not)h(normally)f(shown)h(so)g(that)e
(we)i(knew)g(exactly)f(what)g(was)8 523 y(going)g(on)f(behind)h(the)f
(scene.)-150 545 y
SDict begin H.S end
 -150 545 a -150 545 a
SDict begin 17.3749 H.A end
 -150 545 a -150
545 a
SDict begin [/View [/XYZ H.V]/Dest (Item.39) cvn /DEST pdfmark end
 -150 545 a 0 TeXcolorgray -97 667 a Fh(4\))p 0
TeXcolorgray 39 w Fd(What)k(did)f(you)h(learn?)f Fh(This)g(assignment)f
(taught)h(us)g(how)h(to)g(pr)o(operly)f(cr)o(eate)h(a)f(pr)o(ogram)g
(that)g(uses)g(parallel)g(pr)o(ogramming.)8 812 y(W)-7
b(e)26 b(r)o(e-learned)h(a)e(lot)h(of)h(old)f(material)g(about)f
(writing)h(in)g(c)g(and)h(utilizing)e(pthr)o(eads.)f(W)-7
b(e)26 b(also)g(learned)g(the)g(contr)o(ol)g(you)g(can)8
956 y(gain)c(with)g(inline)h(assembly)-9 b(.)20 b(This)i(pr)o(oject)f
(also)g(helped)h(us)g(understand)g(how)g(we)g(work)h(as)e(a)h(gr)o
(oup.)-150 995 y
SDict begin H.S end
 -150 995 a -150 995 a
SDict begin 17.3749 H.A end
 -150 995 a -150
995 a
SDict begin [/View [/XYZ H.V]/Dest (section.5) cvn /DEST pdfmark end
 -150 995 a 0 TeXcolorgray -148 1255 a Fe(5)p 0
TeXcolorgray 96 w(V)t Ff(E)t(R)t(S)t(I)t(O)t(N)34 b Fe(C)t
Ff(O)t(N)t(T)t(R)s(O)t(L)e Fe(L)t Ff(O)t(G)p 0 TeXcolorgray
0 TeXcolorgray 314 1475 4 145 v 366 1432 a Fh(File)22
b(V)-9 b(ersion)p 827 1475 V 100 w(Gr)o(oup)22 b(Member\(s\))p
1560 1475 V 777 w(What)f(W)-7 b(as)22 b(Done)p 3583 1475
V 316 1479 3269 4 v 316 1495 V 314 1640 4 145 v 524 1596
a(V1)p 827 1640 V 429 w(Andr)o(ew)p 1560 1640 V 513 w(Cr)o(eated)f(the)
h(concer)o(ency)h(\002le)f(to)g(work)h(fr)o(om)p 3583
1640 V 316 1643 3269 4 v 314 1787 4 145 v 524 1744 a(V2)p
827 1787 V 429 w(Andr)o(ew)p 1560 1787 V 801 w(Developed)f(the)g
(functions)p 3583 1787 V 316 1791 3269 4 v 314 1935 4
145 v 524 1892 a(V2)p 827 1935 V 475 w(Shuai)p 1560 1935
V 802 w(Implemented)f(the)h(functions)p 3583 1935 V 316
1938 3269 4 v 314 2082 4 145 v 524 2039 a(V3)p 827 2082
V 429 w(Andr)o(ew)p 1560 2082 V 271 w(Developed)h(the)f(str)o(ucts)f
(and)h(the)g(consumer)g(and)g(pr)o(oducer)p 3583 2082
V 316 2086 3269 4 v 314 2230 4 145 v 530 2187 a(v4)p
827 2230 V 481 w(Shaui)p 1560 2230 V 899 w(Adapted)g(the)g(mt19937)p
3583 2230 V 316 2233 3269 4 v 314 2378 4 145 v 530 2334
a(v5)p 827 2378 V 481 w(Shaui)p 1560 2378 V 964 w(Debugged)g(the)g
(\002le)p 3583 2378 V 316 2381 3269 4 v 314 2525 4 145
v 530 2482 a(v6)p 827 2525 V 485 w(Anya)p 1560 2525 V
786 w(Cr)o(eated)g(the)g(r)o(drand)h(function)p 3583
2525 V 316 2528 3269 4 v 314 2673 4 145 v 530 2629 a(v7)p
827 2673 V 526 w(All)p 1560 2673 V 903 w(Compiled)f(it)g(all)g
(together)p 3583 2673 V 316 2676 3269 4 v -150 2748 a
SDict begin H.S end

-150 2748 a -150 2748 a
SDict begin 17.3749 H.A end
 -150 2748 a -150 2748 a
SDict begin [/View [/XYZ H.V]/Dest (section.6) cvn /DEST pdfmark end
 -150
2748 a 0 TeXcolorgray -148 2924 a Fe(6)p 0 TeXcolorgray
96 w(W)r Ff(O)t(R)t(K)32 b Fe(L)t Ff(O)t(G)p 0 TeXcolorgray
0 TeXcolorgray 0 TeXcolorgray 0 TeXcolorgray eop end
%%Page: 5 5
TeXDict begin 5 4 bop 0 TeXcolorgray 0 0 a
SDict begin /product where{pop product(Distiller)search{pop pop pop
version(.)search{exch pop exch pop(3011)eq{gsave newpath 0 0 moveto
closepath clip/Courier findfont 10 scalefont setfont 72 72 moveto(.)show
grestore}if}{pop}ifelse}{pop}ifelse}if end
 0 0 a -158
-314 a
SDict begin H.S end
 -158 -314 a -158 -314 a
SDict begin H.R end
 -158 -314 a -158 -314
a
SDict begin [/View [/XYZ H.V]/Dest (page.5) cvn /DEST pdfmark end
 -158 -314 a 0 TeXcolorgray 4018 -206 a Fg(5)p 0 TeXcolorgray
-152 -6 4 145 v -3 -49 a Fh(Date)p 308 -6 V 197 w(Gr)o(oup)22
b(Member\(s\))p 1040 -6 V 100 w(Start)f(T)l(ime)p 1501
-6 V 99 w(End)i(T)l(ime)p 1941 -6 V 98 w(T)-7 b(otal)21
b(T)l(ime)g(W)-7 b(orked)p 2709 -6 V 623 w(Accomplished)p
4357 -6 V -150 -2 4510 4 v -150 14 V -152 158 4 145 v
-100 115 a(April)21 b(11th)p 308 158 V 362 w(All)p 1040
158 V 399 w(11:00am)p 1501 158 V 156 w(12:00pm)p 1941
158 V 339 w(1)g(hour)p 2709 158 V 584 w(Met)h(our)g(gr)o(oup)g(members)
f(and)p 4357 158 V -152 303 V 308 303 V 1040 303 V 1501
303 V 1941 303 V 2709 303 V 2981 259 a(exchanged)h(contact)g
(information.)p 4357 303 V -152 447 V 308 447 V 1040
447 V 1501 447 V 1941 447 V 2709 447 V 2955 404 a(Set)g(up)f(our)h
(working)h(envir)o(onment)p 4357 447 V -152 591 V 308
591 V 1040 591 V 1501 591 V 1941 591 V 2709 591 V 3022
548 a(including)f(cr)o(eating)g(our)g(kernel)p 4357 591
V -152 735 V 308 735 V 1040 735 V 1501 735 V 1941 735
V 2709 735 V 2979 692 a(and)g(making)g(the)g(gr)o(oup)f(folder)i(to)p
4357 735 V -152 880 V 308 880 V 1040 880 V 1501 880 V
1941 880 V 2709 880 V 2963 836 a(work)g(in.)f(Made)g(sur)o(e)f(all)h
(members)p 4357 880 V -152 1024 V 308 1024 V 1040 1024
V 1501 1024 V 1941 1024 V 2709 1024 V 3023 981 a(of)g(the)g(gr)o(oup)g
(could)h(access)e(the)p 4357 1024 V -152 1168 V 308 1168
V 1040 1168 V 1501 1168 V 1941 1168 V 2709 1168 V 3051
1125 a(gr)o(oup)h(folder)h(and)f(the)g(gr)o(oup)p 4357
1168 V -152 1312 V 308 1312 V 1040 1312 V 1501 1312 V
1941 1312 V 2709 1312 V 3244 1269 a(GitHub)g(account.)p
4357 1312 V -150 1316 4510 4 v -152 1460 4 145 v -100
1417 a(April)f(18th)p 308 1460 V 362 w(All)p 1040 1460
V 399 w(11:00am)p 1501 1460 V 156 w(12:00pm)p 1941 1460
V 339 w(1)g(hour)p 2709 1460 V 614 w(Set)h(up)f(the)h(folder)i(to)e
(contain)p 4357 1460 V -152 1604 V 308 1604 V 1040 1604
V 1501 1604 V 1941 1604 V 2709 1604 V 3070 1561 a(the)g(work)g(we)g
(will)h(be)f(doing)p 4357 1604 V -152 1748 V 308 1748
V 1040 1748 V 1501 1748 V 1941 1748 V 2709 1748 V 3093
1705 a(in)g(this)g(pr)o(oject.)f(Started)h(on)p 4357
1748 V -152 1893 V 308 1893 V 1040 1893 V 1501 1893 V
1941 1893 V 2709 1893 V 3110 1849 a(the)g(writeup)f(by)h(setting)g(it)p
4357 1893 V -152 2037 V 308 2037 V 1040 2037 V 1501 2037
V 1941 2037 V 2709 2037 V 3031 1994 a(up)g(and)g(completing)g(the)g
(write)p 4357 2037 V -152 2181 V 308 2181 V 1040 2181
V 1501 2181 V 1941 2181 V 2709 2181 V 3034 2138 a(up)f(for)i(the)f(log)
h(of)g(commands.)p 4357 2181 V -152 2325 V 308 2325 V
1040 2325 V 1501 2325 V 1941 2325 V 2709 2325 V 3119
2282 a(Got)g(the)f(github)f(to)i(work.)p 4357 2325 V
-152 2470 V 308 2470 V 1040 2470 V 1501 2470 V 1941 2470
V 2709 2470 V 3092 2426 a(W)-7 b(e)22 b(also)f(r)o(ead)h(thr)o(ough)g
(the)p 4357 2470 V -152 2614 V 308 2614 V 1040 2614 V
1501 2614 V 1941 2614 V 2709 2614 V 3119 2571 a(concer)o(ency)h
(assignment.)p 4357 2614 V -150 2617 4510 4 v -152 2762
4 145 v -100 2718 a(April)e(19th)p 308 2762 V 362 w(All)p
1040 2762 V 414 w(2:30pm)p 1501 2762 V 193 w(8:30pm)p
1941 2762 V 342 w(5)h(hours)p 2709 2762 V 463 w(Begain)h(the)f(concer)o
(ency)g(assignment.)p 4357 2762 V -152 2906 V 308 2906
V 1040 2906 V 1501 2906 V 1941 2906 V 2709 2906 V 2970
2863 a(Cr)o(eated)g(the)g(psudeo)f(code)i(for)g(the)p
4357 2906 V -152 3050 V 308 3050 V 1040 3050 V 1501 3050
V 1941 3050 V 2709 3050 V 3002 3007 a(exersise)e(and)i(discused)e(how)i
(we)p 4357 3050 V -152 3194 V 308 3194 V 1040 3194 V
1501 3194 V 1941 3194 V 2709 3194 V 2983 3151 a(wanted)f(to)g(go)g
(about)g(completing)p 4357 3194 V -152 3339 V 308 3339
V 1040 3339 V 1501 3339 V 1941 3339 V 2709 3339 V 3012
3295 a(the)g(exersise.)f(Cr)o(eated)h(the)g(c)g(\002le)p
4357 3339 V -152 3483 V 308 3483 V 1040 3483 V 1501 3483
V 1941 3483 V 2709 3483 V 2998 3440 a(and)h(made)f(our)g(str)o(uct)g
(and)g(all)g(of)p 4357 3483 V -152 3627 V 308 3627 V
1040 3627 V 1501 3627 V 1941 3627 V 2709 3627 V 2995
3584 a(our)h(functions.)f(Also)f(worked)i(on)p 4357 3627
V -152 3771 V 308 3771 V 1040 3771 V 1501 3771 V 1941
3771 V 2709 3771 V 2989 3728 a(the)f(write)g(up)g(to)g(cr)o(eate)f(the)
h(work)p 4357 3771 V -152 3916 V 308 3916 V 1040 3916
V 1501 3916 V 1941 3916 V 2709 3916 V 3024 3872 a(log)g(and)g(begain)g
(to)g(asnwer)g(the)p 4357 3916 V -152 4060 V 308 4060
V 1040 4060 V 1501 4060 V 1941 4060 V 2709 4060 V 3119
4017 a(questions)f(r)o(egar)o(ding)h(the)p 4357 4060
V -152 4204 V 308 4204 V 1040 4204 V 1501 4204 V 1941
4204 V 2709 4204 V 3181 4161 a(concer)o(ency)g(exer)o(cise.)p
4357 4204 V -150 4207 4510 4 v -152 4352 4 145 v -100
4308 a(April)f(20th)p 308 4352 V 362 w(All)p 1040 4352
V 414 w(5:00pm)p 1501 4352 V 173 w(10:30pm)p 1941 4352
V 292 w(5.5)g(hours)p 2709 4352 V 273 w(Almost)g(\002nished)h(the)g
(concer)o(ency)h(assignment.)p 4357 4352 V -152 4496
V 308 4496 V 1040 4496 V 1501 4496 V 1941 4496 V 2709
4496 V 2969 4453 a(Debugged)g(the)e(pr)o(oject)h(and)g(made)p
4357 4496 V -152 4640 V 308 4640 V 1040 4640 V 1501 4640
V 1941 4640 V 2709 4640 V 3065 4597 a(it)g(so)g(that)g(the)g(loop)g
(went)g(for)p 4357 4640 V -152 4784 V 308 4784 V 1040
4784 V 1501 4784 V 1941 4784 V 2709 4784 V 3000 4741
a(our)g(desir)o(ed)h(length.)f(Also)f(made)p 4357 4784
V -152 4929 V 308 4929 V 1040 4929 V 1501 4929 V 1941
4929 V 2709 4929 V 2942 4885 a(the)h(two)g(random)h(generating)f
(stlyes)p 4357 4929 V -150 4932 4510 4 v -152 5076 4
145 v -100 5033 a(April)f(21th)p 308 5076 V 317 w(Shuai)p
1040 5076 V 349 w(12:00pm)p 1501 5076 V 172 w(1:00pm)p
1941 5076 V 359 w(1)g(hour)p 2709 5076 V 682 w(Fixed)h(the)g(compile)g
(err)o(or)p 4357 5076 V -150 5080 4510 4 v -152 5224
4 145 v -100 5180 a(April)f(21th)p 308 5224 V 158 w(Andr)o(ew)-7
b(,)21 b(Anya)p 1040 5224 V 191 w(12:00pm)p 1501 5224
V 172 w(7:45pm)p 1941 5224 V 292 w(7.75)g(hours)p 2709
5224 V 383 w(Finished)h(the)g(concer)o(ency)h(assignment.)p
4357 5224 V -152 5368 V 308 5368 V 1040 5368 V 1501 5368
V 1941 5368 V 2709 5368 V 3009 5325 a(Redid)f(most)g(of)h(the)f(concer)
o(ency)-9 b(.)p 4357 5368 V -152 5512 V 308 5512 V 1040
5512 V 1501 5512 V 1941 5512 V 2709 5512 V 3172 5469
a(Edited)23 b(the)f(make\002le..)p 4357 5512 V -152 5657
V 308 5657 V 1040 5657 V 1501 5657 V 1941 5657 V 2709
5657 V 2930 5613 a(Also)g(wrapped)g(up)f(the)h(writeup)g(and)p
4357 5657 V -152 5801 V 308 5801 V 1040 5801 V 1501 5801
V 1941 5801 V 2709 5801 V 3271 5757 a(turned)h(it)f(all)g(in.)p
4357 5801 V -150 5804 4510 4 v 0 TeXcolorgray 0 TeXcolorgray
eop end
%%Page: 6 6
TeXDict begin 6 5 bop 0 TeXcolorgray 0 0 a
SDict begin /product where{pop product(Distiller)search{pop pop pop
version(.)search{exch pop exch pop(3011)eq{gsave newpath 0 0 moveto
closepath clip/Courier findfont 10 scalefont setfont 72 72 moveto(.)show
grestore}if}{pop}ifelse}{pop}ifelse}if end
 0 0 a -158
-314 a
SDict begin H.S end
 -158 -314 a -158 -314 a
SDict begin H.R end
 -158 -314 a -158 -314
a
SDict begin [/View [/XYZ H.V]/Dest (page.6) cvn /DEST pdfmark end
 -158 -314 a 0 TeXcolorgray 4018 -206 a Fg(6)p 0 TeXcolorgray
-150 -150 a
SDict begin H.S end
 -150 -150 a -150 -150 a
SDict begin 17.3749 H.A end
 -150 -150 a -150
-150 a
SDict begin [/View [/XYZ H.V]/Dest (section.7) cvn /DEST pdfmark end
 -150 -150 a 0 TeXcolorgray -148 -32 a Fe(7)p 0
TeXcolorgray 96 w(C)t Ff(I)t(T)m(A)m(T)t(I)t(O)t(N)t(S)-148
163 y Fe(R)t Ff(E)t(F)t(E)t(R)t(E)t(N)t(C)t(E)t(S)-150
273 y
SDict begin H.S end
 -150 273 a -150 273 a
SDict begin 13.5506 H.A end
 -150 273 a -150 273 a
SDict begin [/View [/XYZ H.V]/Dest (Item.40) cvn /DEST pdfmark end
 -150
273 a 0 TeXcolorgray 62 x Fb([1])p 0 TeXcolorgray 40
w(T)-6 b(akuji)19 b(Nishimura)i(and)e(Makoto)g(Matsumoto.)h
Fa(Mersenne)e(T)-6 b(wister)18 b(with)h(impr)o(oved)f(initialization)p
Fb(.)c(MT)-5 b(,)19 b(1997-2002.)-150 354 y
SDict begin H.S end
 -150 354
a -150 354 a
SDict begin 13.5506 H.A end
 -150 354 a -150 354 a
SDict begin [/View [/XYZ H.V]/Dest (Item.41) cvn /DEST pdfmark end
 -150 354 a 0 TeXcolorgray
94 x Fb([2])p 0 TeXcolorgray 40 w(Blaise)h(Barney)-7
b(.)18 b Fa(POSIX)h(Thr)o(eads)f(Pr)o(ogramming)p Fb(.)f(Lawr)o(ence)h
(Livermor)o(e)h(National)h(Laboratory)-7 b(,)20 b(2017.)-150
466 y
SDict begin H.S end
 -150 466 a -150 466 a
SDict begin 13.5506 H.A end
 -150 466 a -150 466 a
SDict begin [/View [/XYZ H.V]/Dest (Item.42) cvn /DEST pdfmark end
 -150
466 a 0 TeXcolorgray 94 x Fb([3])p 0 TeXcolorgray 40
w(Intel)31 b(Corporation.)i Fa(Intel)d(64)h(and)g(IA-32)g(Ar)o
(chitectur)o(es)g(Softwar)o(e)e(Developer)r(')l(s)h(Manual:)f(Basic)g
(Ar)o(chitectur)o(e')p Fb(.)h(Or)o(der)h(Number:)g(325462-060US,)i
(Intel)-33 673 y(technologies,)19 b(2016.)-150 691 y
SDict begin H.S end

-150 691 a -150 691 a
SDict begin 13.5506 H.A end
 -150 691 a -150 691 a
SDict begin [/View [/XYZ H.V]/Dest (Item.43) cvn /DEST pdfmark end
 -150 691
a 0 TeXcolorgray 94 x Fb([4])p 0 TeXcolorgray 40 w(Dirk)g
(Eddelbuettel.)f Fa(Catch)h(trl-C)g(in)g(C)p Fb(.)g(Stack)f(Over\003ow)
-6 b(,)18 b(2016.)-150 797 y
SDict begin H.S end
 -150 797 a -150 797 a
SDict begin 13.5506 H.A end
 -150
797 a -150 797 a
SDict begin [/View [/XYZ H.V]/Dest (Item.44) cvn /DEST pdfmark end
 -150 797 a 0 TeXcolorgray 101 x Fb([5])p
0 TeXcolorgray 40 w(IBM)h(Knowledge)g(Center)-5 b(.)19
b Fa(pthr)o(ead)g(kill)e(\226)i(Send)g(Signal)e(to)i(Thr)o(ead)p
Fb(.)f(IMB)p 0 TeXcolorgray 0 TeXcolorgray eop end
%%Trailer

userdict /end-hook known{end-hook}if
%%EOF
