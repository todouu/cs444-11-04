--- slob.c	2017-06-08 21:24:35.985830976 -0700
+++ linux-yocto-3.14/mm/slob.c	2017-06-08 21:54:59.360521311 -0700
@@ -58,7 +58,7 @@
 
 #include <linux/kernel.h>
 #include <linux/slab.h>
-#include <linux/syscalls.h>
+
 #include <linux/mm.h>
 #include <linux/swap.h> /* struct reclaim_state */
 #include <linux/cache.h>
@@ -71,6 +71,7 @@
 #include <trace/events/kmem.h>
 
 #include <linux/atomic.h>
+
 #include "slab.h"
 /*
  * slob_block has a field 'units', which indicates size of block if +ve,
@@ -90,8 +91,6 @@
 	slobidx_t units;
 };
 typedef struct slob_block slob_t;
-long pagesused = 0;
-long numavailable = 0;
 
 /*
  * All partially free slob pages go on these lists.
@@ -268,13 +267,12 @@
  */
 static void *slob_alloc(size_t size, gfp_t gfp, int align, int node)
 {
-    struct page *sp, *try_page = NULL, *start_sp;
+	struct page *sp;
 	struct list_head *prev;
-	struct list_head *slob_list, *testlist;
+	struct list_head *slob_list;
 	slob_t *b = NULL;
 	unsigned long flags;
-	int tries;
-	numavailable = 0;
+
 	if (size < SLOB_BREAK1)
 		slob_list = &free_slob_small;
 	else if (size < SLOB_BREAK2)
@@ -293,38 +291,19 @@
 		if (node != NUMA_NO_NODE && page_to_nid(sp) != node)
 			continue;
 #endif
-		tries = 0;
-       	numavailable += sp->units; 
-		start_sp = sp;		// Set a start_sp so we know when to stop optimization.
-        try_page = sp;	// Set current page as the sp to be attempted on.
-        testlist = slob_list;		// Set the test sloblist.
-        
-		//printk("Got this far at least.\n");
-
 		/* Enough room on this page? */
 		if (sp->units < SLOB_UNITS(size))
 			continue;
-    	while ((tries < 100))
-		{
-			if (list_entry(testlist->next,struct page,list)->units >= SLOB_UNITS(size)) 
-			{
-				if (list_entry(testlist->next,struct page,list)->units < try_page->units)
-				{
-					try_page = list_entry(testlist->next,struct page,list);
-				}
-			}
-			
-			if(list_entry(testlist->next,struct page,list) == start_sp)
-				break;
-			
-			testlist = testlist->next;
-			tries += 1;
-		}
-		
-		prev = try_page->list.prev;
-		b = slob_page_alloc(try_page, size, align);
+
+		/* Attempt to alloc */
+		prev = sp->list.prev;
+		b = slob_page_alloc(sp, size, align);
 		if (!b)
 			continue;
+
+		/* Improve fragment distribution and reduce our average
+		 * search time by starting our next search here. (see
+		 * Knuth vol 1, sec 2.5, pg 449) */
 		if (prev != slob_list->prev &&
 				slob_list->next != prev->next)
 			list_move_tail(slob_list, prev->next);
@@ -334,9 +313,6 @@
 
 	/* Not enough space: must allocate a new page */
 	if (!b) {
-
-	   	pagesused++;
-		numavailable--;
 		b = slob_new_pages(gfp & ~__GFP_ZERO, 0, node);
 		if (!b)
 			return NULL;
@@ -386,8 +362,6 @@
 		__ClearPageSlab(sp);
 		page_mapcount_reset(sp);
 		slob_free_pages(b, 0);
-		pagesused--;
-		numavailable++;
 		return;
 	}
 
@@ -669,15 +643,3 @@
 {
 	slab_state = FULL;
 }
-
-asmlinkage long sys_slob_used(void)
-{
-	printk("checking supposed amount of mem used...\n");
-    return pagesused*SLOB_UNITS(PAGE_SIZE);
-}
-
-asmlinkage long sys_slob_free(void)
-{
-	printk("checking actual amount of mem used...\n");
-    return numavailable;
-}

--- syscall_32.tbl	2017-06-08 21:15:38.554784411 -0700
+++ linux-yocto-3.14/arch/x86/syscalls/syscall_32.tbl	2017-06-08 21:54:54.940447030 -0700
@@ -228,8 +228,8 @@
 219	i386	madvise			sys_madvise
 220	i386	getdents64		sys_getdents64			compat_sys_getdents64
 221	i386	fcntl64			sys_fcntl64			compat_sys_fcntl64
-222	i386    slob_free		sys_slob_free
-223	i386	slob_used		sys_slob_used
+# 222 is unused
+# 223 is unused
 224	i386	gettid			sys_gettid
 225	i386	readahead		sys_readahead			sys32_readahead
 226	i386	setxattr		sys_setxattr
@@ -358,4 +358,4 @@
 349	i386	kcmp			sys_kcmp
 350	i386	finit_module		sys_finit_module
 351	i386	sched_setattr		sys_sched_setattr
-352	i386	sched_getattr		sys_sched_getattr
\ No newline at end of file
+352	i386	sched_getattr		sys_sched_getattr

--- syscalls.h	2017-06-08 21:15:29.960639759 -0700
+++ linux-yocto-3.14/include/linux/syscalls.h	2017-06-08 21:54:58.978514891 -0700
@@ -855,7 +855,4 @@
 asmlinkage long sys_kcmp(pid_t pid1, pid_t pid2, int type,
 			 unsigned long idx1, unsigned long idx2);
 asmlinkage long sys_finit_module(int fd, const char __user *uargs, int flags);
-asmlinkage long sys_slob_free(void);
-asmlinkage long sys_slob_used(void);
-
-#endif
\ No newline at end of file
+#endif



